{"version":3,"sources":["build/start_fragment.js","build/almond.js","build/end_fragment.js","node_modules/ramda/dist/ramda.js","node_modules/baconjs/dist/Bacon.js","datalist.js"],"names":["root","factory","define","amd","DataListJS","this","requirejs","require","undef","hasProp","obj","prop","hasOwn","call","normalize","name","baseName","nameParts","nameSegment","mapValue","foundMap","lastIndex","foundI","foundStarMap","starI","i","j","part","normalizedBaseParts","baseParts","split","map","config","starMap","length","nodeIdCompat","jsSuffixRegExp","test","replace","charAt","slice","concat","splice","join","makeRequire","relName","forceSync","args","aps","arguments","push","req","apply","makeNormalize","makeLoad","depName","value","defined","callDep","waiting","defining","main","Error","splitPrefix","prefix","index","indexOf","substring","makeRelParts","makeConfig","makeMap","handlers","Object","prototype","hasOwnProperty","relParts","plugin","parts","relResourceName","f","n","pr","p","exports","e","module","id","uri","deps","callback","cjsModule","ret","usingExports","callbackType","load","undefined","alt","setTimeout","cfg","_defined","jQuery","global","R","_isPlaceholder","a","_curry1","fn","f1","_curry2","f2","b","_b","_a","_concat","set1","set2","idx","len1","len2","result","_arity","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","_curryN","received","combined","argsIdx","left","combinedIdx","_curry3","f3","c","_c","_isTransformer","_dispatchable","methodNames","xf","Array","pop","_isArray","_reduced","x","@@transducer/value","@@transducer/reduced","XAll","all","_map","functor","len","_isString","toString","XWrap","_xwrap","_arrayReduce","acc","list","_iterableReduce","iter","step","next","done","_methodReduce","methodName","bind","_reduce","_isArrayLike","symIterator","reduce","TypeError","XMap","_has","XAny","any","_aperture","limit","XAperture","pos","full","_isFunction","_makeFlat","recursive","flatt","jlen","ilen","_forceReduced","_cloneRegExp","pattern","RegExp","source","ignoreCase","multiline","sticky","unicode","_clone","refFrom","refTo","deep","copy","copiedValue","key","type","Date","valueOf","_pipe","g","_checkForMethod","methodname","pipe","tail","compose","reverse","composeK","init","last","chain","_pipeP","ctx","then","pipeP","composeP","_arrayFromIterator","_containsWith","pred","_functionName","match","String","_uniqContentEquals","aIterator","bIterator","stackA","stackB","eq","_equals","aItem","identical","typeA","equals","constructor","message","size","entries","values","keysA","keys","extendedStackA","extendedStackB","_indexOf","inf","item","_contains","_quote","s","_complement","_filter","_isObject","XFilter","_toString","seen","recur","y","xs","mapPairs","keys$$1","k","sort","reject","isNaN","NaN","_toISOString","Infinity","repr","XReduceBy","valueFn","valueAcc","keyFn","inputs","XDrop","XTake","dropLast$2","take","XDropLast","dropLastWhile$2","XDropLastWhile","retained","XDropRepeatsWith","lastValue","seenFirstValue","XDropWhile","XFind","found","XFindIndex","XFindLast","XFindLastIndex","lastIdx","_identity","_Set","_nativeSet","Set","_items","hasOrAdd","shouldAdd","set","prevSize","add","has","bIdx","_objectAssign","target","output","nextKey","_stepCat","_stepCatArray","_stepCatString","_stepCatObject","_isNumber","_of","_createPartialApplicator","Math","max","pipeK","XTakeWhile","XTap","_isRegExp","always","val","F","T","__","@@functional/placeholder","Number","curryN","addIndex","origFn","adjust","start","_idx","_list","isArray","_xfBase","input","_xall","nodeType","thisObj","Symbol","iterator","_xmap","_isArguments","hasEnumBug","propertyIsEnumerable","nonEnumerableProps","hasArgsEnumBug","contains","_keys","nIdx","ks","checkArgsLength","path","paths","pluck","allPass","preds","and","_xany","anyPass","ap","applyF","applyX","store","getCopy","_xaperture","aperture","append","el","props","vals","applySpec","spec","v","applyTo","ascend","aa","bb","assoc","_isInteger","isInteger","isNil","assocPath","nextObj","arr","nAry","binary","liftN","arity","lifted","lift","both","curry","preservingReduced","@@transducer/init","@@transducer/result","@@transducer/step","_flatCat","rxf","_xchain","monad","clamp","min","clone","comparator","not","complement","fromIndex","toIndex","pad","toISOString","d","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","toFixed","_xfilter","filter","filterable","toString$1","cond","pairs","pair","constructN","Fn","$0","$1","$2","$3","$4","$5","$6","$7","$8","$9","construct","contains$1","converge","after","fns","context","_xreduceBy","reduceBy","elt","countBy","elem","dec","defaultTo","descend","difference","first","second","out","firstLen","differenceWith","dissoc","remove","count","update","dissocPath","head","divide","_xdrop","drop","_xtake","_xdropLast","dropLast","retain","flush","_xdropLastWhile","dropLastWhile","sameAsLast","_xdropRepeatsWith","nth","offset","dropRepeatsWith","dropRepeats","_xdropWhile","dropWhile","or","either","empty","takeLast","endsWith","suffix","eqBy","eqProps","obj1","obj2","evolve","transformations","object","transformation","_xfind","find","_xfindIndex","findIndex","_xfindLast","findLast","_xfindLastIndex","findLastIndex","flatten","flip","forEach","forEachObjIndexed","keyList","fromPairs","groupBy","groupWith","res","nextidx","gt","gte","hasIn","identity","ifElse","condition","onTrue","onFalse","inc","indexBy","innerJoin","ys","insert","insertAll","elts","uniqBy","appliedItem","uniq","intersection","list1","list2","lookupList","filteredList","intersperse","separator","_assign","assign","objOf","into","invert","invertObj","invoker","method","is","Ctor","isEmpty","juxt","keysIn","lastIndexOf","lens","getter","setter","toFunctorFn","focus","lensIndex","lensPath","lensProp","lt","lte","mapAccum","tuple","mapAccumRight","mapObjIndexed","rx","str","mathMod","m","maxBy","sum","mean","median","width","memoizeWith","mFn","cache","memoize","merge","l","r","mergeAll","mergeWithKey","mergeDeepWithKey","lObj","rObj","lVal","rVal","mergeDeepLeft","mergeDeepRight","mergeDeepWith","mergeWith","_","_l","_r","minBy","modulo","multiply","negate","none","nthArg","o","of","omit","names","once","called","Identity","over","fst","snd","partial","partialRight","partition","pathEq","_path","pathOr","pathSatisfies","propPath","pick","pickAll","pickBy","prepend","product","useWith","transformers","project","propEq","propIs","propOr","propSatisfies","ps","range","from","to","reduceRight","reduceWhile","reduced","times","RangeError","repeat","regex","replacement","scan","sequence","traversable","sortBy","sortWith","splitAt","array","splitEvery","splitWhen","startsWith","subtract","symmetricDifference","symmetricDifferenceWith","takeLastWhile","_xtakeWhile","takeWhile","_xtap","tap","toLower","toPairs","toPairsIn","toUpper","transduce","transpose","outerlist","innerlist","traverse","ws","zeroWidth","hasProtoTrim","trim","_trim","beginRx","endRx","tryCatch","tryer","catcher","unapply","unary","uncurryN","depth","endIdx","currentDepth","unfold","seed","union","uniqWith","unionWith","unless","whenFalseFn","unnest","until","valuesIn","vs","Const","fantasy-land/map","view","when","whenTrueFn","where","testObj","whereEq","without","xprod","zip","rv","zipObj","zipWith","defineProperty","Bacon","nop","former","cloneArray","assert","assertObservableIsProperty","_isObservable","_isProperty","assertEventStream","event","_isEventStream","assertObservable","assertFunction","isFunction","assertArray","assertNoArguments","extend","inherit","child","parent","ctor","symbol","Some","Event","eventIdCounter","Next","Initial","End","Error$1","error","initialEvent","nextEvent","endEvent","toEvent","_isEvent","registerObs","obs","spies","running","spy","Desc","describe","ref","_isDesc","_len","_key","withDesc","desc","findDeps","flatMap","isObservable","_isSource","Dispatcher","_subscribe","_handleEvent","subscribe","handleEvent","pushing","ended","prevError","unsubSrc","subscriptions","queue","withMethodCallSupport","wrapped","makeFunctionArgs","makeFunction_","partiallyApplied","applied","_len2","_key2","toSimpleExtractor","fieldValue","toFieldExtractor","partFuncs","isFieldKey","makeFunction","convertArgsToFunction","sampled","sampledBy","_ref","_ref2","toCombinator","toFieldKey","right","Observable","idCounter","initialDesc","PropertyDispatcher","property","current","None","currentValueRootId","propertyEnded","propertyFromStreamSubscribe","Property","streamSubscribeToPropertySubscribe","handler","dispatcher","EventStream","options","defaultDesc","allowSync","asyncWrapSubscribe","subscribing","sink","deliverAsync","toDeliverNow","asyncDeliveries","inTransaction","UpdateBarrier","isInTransaction","soonButNotYet","scheduler","initValue","streamSubscribe","initSent","subbed","unsub","reply","more","sendInit","noMore","hasValue","isInitial","isEnd","CompositeUnsubscribe","ss","unsubscribe","unsubscribed","starting","never","constant","withHandler","fmap","Source","sync","ConsumingSource","BufferingSource","when_","whenP","extractPatternsAndSources","sourceArgs","sources","pats","patterns","patSources","toArray","constantToFunction","pat","ixs","triggerFound","isTrigger","ix","_extractPatternsAndSo","fromObservable","needsBarrier","containsDuplicateDeps","resultStream","hasAtLeast","cannotMatch","mayHave","nonFlattened","trigger","unsubAll","flushLater","whenDoneWith","flushWhileTriggers","triggers","consume","ends","cannotSync","markEnded","isError","hasWaiters","observables","checkObservable","state","internalDeps","groupSimultaneous","streams","groupSimultaneous_","awaiting","other","toProperty","skipDuplicates","argumentsToObservables","argumentsToObservablesAndFunction","makeSpawner","makeObservable","addPropertyInitValueToStream","stream","justInitValue","fromBinder","binder","eventTransformer","unbound","shouldUnbind","unbind","unbinder","later","delay","sender","clearTimeout","Bus","subscribeAll","guardedSink","combineTemplate","template","ctxStack","setValue","applyStreamValue","constantValue","mkContext","pushContext","newContext","containsObservables","compile","funcs","popContext","compileTemplate","combinator","rootContext","each","resultProperty","combineAsArray","_this","initHandled","prev","ESObservable","observable","fromEventTarget","eventSource","_findHandlerMethods","findHandlerMethods","sub","fromPoll","poll","setInterval","clearInterval","valueAndEnd","fromPromise","promise","abort","bound","interval","smartSink","unsubBoth","repeatedly","generator","flag","subscribeNext","subscribeInternal","sequentially","tryF","initial","Function","_isSome","getOrElse","get","isDefined","inspect","_isNone","toOption","isNone","indexWhere","filtered","fold","cached","me","recursionDepth","results","isEvent","isNext","log","toNext","_isNext","_isInitial","now","getTime","rootEvent","processingAfters","waiterObs","waiters","aftersStack","aftersStackHeight","flushed","ensureStackHeight","h","afterTransaction","stackIndexForThisObs","containsObs","processAfters","aftersList","stackSizeAtStart","isRoot","topOfStack","topAfters","_topAfters$index","callSuccess","obsWaiters","flushWaiters","obsId","flushDepsOf","dep","currentEventId","wrappedSubscribe","unsubd","doUnsub","shouldUnsub","hasSubscribers","removeSub","subscription","pushIt","pushToSubscriptions","tmp","shift","unsubscribeFromSource","_len3","_key3","onValue","onValues","onError","onEnd","_name","withDescription","maybeSubSource","dispatchingId","valId","changes","_this2","forceAsync","initValue_","disp","toEventStream","unsubMe","iterable","version","withStateMachine","initState","fromF","newState","outputs","isEqual","combineWith","_argumentsToObservabl","combine","bufferWithTime","bufferWithTimeOrCount","MAX_VALUE","bufferWithCount","flushOrSchedule","buffer","schedule","onInput","onFlush","scheduled","end","valuesToPush","delayMs","flatMap_","params","rootDep","childDeps","isProperty","initialSpawned","composite","spawn","checkQueue","checkEnd","unsubRoot","mapError","firstOnly","handleEventValueWith","flatMapWithConcurrencyLimit","flatMapConcat","unsubRight","unsubLeft","concatAll","bufferingThrottle","minimumInterval","newSink","subscribeInput","unsubscribeInput","plug","rootPush","pushQueue","liftCallback","fromCallback","fromNodeCallback","mapEnd","skipErrors","takeUntil","stopper","endMarker","withEndMarker","impl","_event$value","data","flatMapLatest","flatMapped","delayChanges","debounce","debounceImmediate","flatMapFirst","decode","cases","diff","prevTuple","doAction","doEnd","doError","doLog","console","_console","endOnError","errors","observerOrOnNext","onComplete","observer","complete","closed","cancel","toESObservable","flatMapEvent","flatMapError","flatScan","updated","sampler","thisSource","samplerSource","w","sample","fromArray","pushNeeded","fromESObservable","_observable","eventMethods","methodPair","addListener","fromEvent","keyF","limitF","src","similar","limited","holdWhen","valve","onHold","bufferedValues","srcIsEnded","subscribed","endIfBothEnded","toSend","$","asEventStream","eventName","selector","on","off","Zepto","lastEvent","retry","retries","retriesDone","isRetryable","finished","valueStream","pause","skip","skipUntil","starter","started","skipWhile","ok","startWith","slidingWindow","minValues","window","throttle","firstToPromise","PromiseCtr","Promise","resolve","toPromise","zipAsArray","observablesAndFunction","self","createListElementWithValueAndConfig","valueText","listItemConfig_","listItemConfig","styles","listElementStyle","padding","listElement","document","createElement","textContent","cssClassName","classList","ofMutableObjectUpdateValueForKey","style","createDocumentFragmentOfElements","elements","frag","createDocumentFragment","element","appendChild","mutationsForElement","initOptions","domNode","MutationObserver","observe","disconnect","polyfill","polyfillConfiguration_","polyfillConfiguration","body","querySelectorAll","resizingPage","createListElementWithValue","listItemStyle","setupInputElement","inputElement","selectBox","createSelectionContainerForInput","uListStyle","dataListElement","getElementById","getAttribute","optionsLiveCollection","getElementsByTagName","positionListAccordingToInput","positionTargetBelowSourceElement","childList","hasFocus","activeElement","truthy","blur","falsy","hideSelectBox","display","showSelectBox","updateSelectBoxContentsWithDomFragment","replaceContainerContentsWithDomFragment","matchedOptions","userText","optionTexts","optionButtons","toggledAreAnyOptionsMatched","selecting","button","populateInputWithValue","disableBodyScroll","parentElement","allPositionUpdateFunctions","isElementTotallyScrolled","targetElement","scrollHeight","scrollTop","clientHeight","preventPageScrollingAtElementScrollEndingsStartingWithEvent","initialTouchEvent","targetTouches","touchEvent","isScrollingDown","clientY","preventDefault","addEventListener","removeEventListener","containerElement","fragment","createRange","selectNodeContents","deleteContents","insertNode","dispatchEvent","top","offsetTop","offsetHeight","offsetLeft","offsetWidth","inputField","listConfig_","listConfig","inputFieldStyle","getComputedStyle","boxStyle","listStyle","position","overflowY","margin","boxShadow","maxHeight","zIndex","backgroundColor","color","isNotNativelySupported","HTMLDataListElement"],"mappings":"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","file":"datalist.min.js","sourcesContent":["(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        //Allow using this built library as an AMD module\n        //in another project. That other project will only\n        //see this AMD call, not the internal modules in\n        //the closure below.\n        define([], factory);\n    } else {\n        //Browser globals case. Just assign the\n        //result to a property on the global.\n        root.DataListJS = factory();\n    }\n}(this, function () {\n    //almond, and your modules will be inlined here\n","/**\n * @license almond 0.3.3 Copyright jQuery Foundation and other contributors.\n * Released under MIT license, http://github.com/requirejs/almond/LICENSE\n */\n//Going sloppy to avoid 'use strict' string cost, but strict practices should\n//be followed.\n/*global setTimeout: false */\n\nvar requirejs, require, define;\n(function (undef) {\n    var main, req, makeMap, handlers,\n        defined = {},\n        waiting = {},\n        config = {},\n        defining = {},\n        hasOwn = Object.prototype.hasOwnProperty,\n        aps = [].slice,\n        jsSuffixRegExp = /\\.js$/;\n\n    function hasProp(obj, prop) {\n        return hasOwn.call(obj, prop);\n    }\n\n    /**\n     * Given a relative module name, like ./something, normalize it to\n     * a real name that can be mapped to a path.\n     * @param {String} name the relative name\n     * @param {String} baseName a real name that the name arg is relative\n     * to.\n     * @returns {String} normalized name\n     */\n    function normalize(name, baseName) {\n        var nameParts, nameSegment, mapValue, foundMap, lastIndex,\n            foundI, foundStarMap, starI, i, j, part, normalizedBaseParts,\n            baseParts = baseName && baseName.split(\"/\"),\n            map = config.map,\n            starMap = (map && map['*']) || {};\n\n        //Adjust any relative paths.\n        if (name) {\n            name = name.split('/');\n            lastIndex = name.length - 1;\n\n            // If wanting node ID compatibility, strip .js from end\n            // of IDs. Have to do this here, and not in nameToUrl\n            // because node allows either .js or non .js to map\n            // to same file.\n            if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\n                name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');\n            }\n\n            // Starts with a '.' so need the baseName\n            if (name[0].charAt(0) === '.' && baseParts) {\n                //Convert baseName to array, and lop off the last part,\n                //so that . matches that 'directory' and not name of the baseName's\n                //module. For instance, baseName of 'one/two/three', maps to\n                //'one/two/three.js', but we want the directory, 'one/two' for\n                //this normalization.\n                normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);\n                name = normalizedBaseParts.concat(name);\n            }\n\n            //start trimDots\n            for (i = 0; i < name.length; i++) {\n                part = name[i];\n                if (part === '.') {\n                    name.splice(i, 1);\n                    i -= 1;\n                } else if (part === '..') {\n                    // If at the start, or previous value is still ..,\n                    // keep them so that when converted to a path it may\n                    // still work when converted to a path, even though\n                    // as an ID it is less than ideal. In larger point\n                    // releases, may be better to just kick out an error.\n                    if (i === 0 || (i === 1 && name[2] === '..') || name[i - 1] === '..') {\n                        continue;\n                    } else if (i > 0) {\n                        name.splice(i - 1, 2);\n                        i -= 2;\n                    }\n                }\n            }\n            //end trimDots\n\n            name = name.join('/');\n        }\n\n        //Apply map config if available.\n        if ((baseParts || starMap) && map) {\n            nameParts = name.split('/');\n\n            for (i = nameParts.length; i > 0; i -= 1) {\n                nameSegment = nameParts.slice(0, i).join(\"/\");\n\n                if (baseParts) {\n                    //Find the longest baseName segment match in the config.\n                    //So, do joins on the biggest to smallest lengths of baseParts.\n                    for (j = baseParts.length; j > 0; j -= 1) {\n                        mapValue = map[baseParts.slice(0, j).join('/')];\n\n                        //baseName segment has  config, find if it has one for\n                        //this name.\n                        if (mapValue) {\n                            mapValue = mapValue[nameSegment];\n                            if (mapValue) {\n                                //Match, update name to the new value.\n                                foundMap = mapValue;\n                                foundI = i;\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                if (foundMap) {\n                    break;\n                }\n\n                //Check for a star map match, but just hold on to it,\n                //if there is a shorter segment match later in a matching\n                //config, then favor over this star map.\n                if (!foundStarMap && starMap && starMap[nameSegment]) {\n                    foundStarMap = starMap[nameSegment];\n                    starI = i;\n                }\n            }\n\n            if (!foundMap && foundStarMap) {\n                foundMap = foundStarMap;\n                foundI = starI;\n            }\n\n            if (foundMap) {\n                nameParts.splice(0, foundI, foundMap);\n                name = nameParts.join('/');\n            }\n        }\n\n        return name;\n    }\n\n    function makeRequire(relName, forceSync) {\n        return function () {\n            //A version of a require function that passes a moduleName\n            //value for items that may need to\n            //look up paths relative to the moduleName\n            var args = aps.call(arguments, 0);\n\n            //If first arg is not require('string'), and there is only\n            //one arg, it is the array form without a callback. Insert\n            //a null so that the following concat is correct.\n            if (typeof args[0] !== 'string' && args.length === 1) {\n                args.push(null);\n            }\n            return req.apply(undef, args.concat([relName, forceSync]));\n        };\n    }\n\n    function makeNormalize(relName) {\n        return function (name) {\n            return normalize(name, relName);\n        };\n    }\n\n    function makeLoad(depName) {\n        return function (value) {\n            defined[depName] = value;\n        };\n    }\n\n    function callDep(name) {\n        if (hasProp(waiting, name)) {\n            var args = waiting[name];\n            delete waiting[name];\n            defining[name] = true;\n            main.apply(undef, args);\n        }\n\n        if (!hasProp(defined, name) && !hasProp(defining, name)) {\n            throw new Error('No ' + name);\n        }\n        return defined[name];\n    }\n\n    //Turns a plugin!resource to [plugin, resource]\n    //with the plugin being undefined if the name\n    //did not have a plugin prefix.\n    function splitPrefix(name) {\n        var prefix,\n            index = name ? name.indexOf('!') : -1;\n        if (index > -1) {\n            prefix = name.substring(0, index);\n            name = name.substring(index + 1, name.length);\n        }\n        return [prefix, name];\n    }\n\n    //Creates a parts array for a relName where first part is plugin ID,\n    //second part is resource ID. Assumes relName has already been normalized.\n    function makeRelParts(relName) {\n        return relName ? splitPrefix(relName) : [];\n    }\n\n    /**\n     * Makes a name map, normalizing the name, and using a plugin\n     * for normalization if necessary. Grabs a ref to plugin\n     * too, as an optimization.\n     */\n    makeMap = function (name, relParts) {\n        var plugin,\n            parts = splitPrefix(name),\n            prefix = parts[0],\n            relResourceName = relParts[1];\n\n        name = parts[1];\n\n        if (prefix) {\n            prefix = normalize(prefix, relResourceName);\n            plugin = callDep(prefix);\n        }\n\n        //Normalize according\n        if (prefix) {\n            if (plugin && plugin.normalize) {\n                name = plugin.normalize(name, makeNormalize(relResourceName));\n            } else {\n                name = normalize(name, relResourceName);\n            }\n        } else {\n            name = normalize(name, relResourceName);\n            parts = splitPrefix(name);\n            prefix = parts[0];\n            name = parts[1];\n            if (prefix) {\n                plugin = callDep(prefix);\n            }\n        }\n\n        //Using ridiculous property names for space reasons\n        return {\n            f: prefix ? prefix + '!' + name : name, //fullName\n            n: name,\n            pr: prefix,\n            p: plugin\n        };\n    };\n\n    function makeConfig(name) {\n        return function () {\n            return (config && config.config && config.config[name]) || {};\n        };\n    }\n\n    handlers = {\n        require: function (name) {\n            return makeRequire(name);\n        },\n        exports: function (name) {\n            var e = defined[name];\n            if (typeof e !== 'undefined') {\n                return e;\n            } else {\n                return (defined[name] = {});\n            }\n        },\n        module: function (name) {\n            return {\n                id: name,\n                uri: '',\n                exports: defined[name],\n                config: makeConfig(name)\n            };\n        }\n    };\n\n    main = function (name, deps, callback, relName) {\n        var cjsModule, depName, ret, map, i, relParts,\n            args = [],\n            callbackType = typeof callback,\n            usingExports;\n\n        //Use name if no relName\n        relName = relName || name;\n        relParts = makeRelParts(relName);\n\n        //Call the callback to define the module, if necessary.\n        if (callbackType === 'undefined' || callbackType === 'function') {\n            //Pull out the defined dependencies and pass the ordered\n            //values to the callback.\n            //Default to [require, exports, module] if no deps\n            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;\n            for (i = 0; i < deps.length; i += 1) {\n                map = makeMap(deps[i], relParts);\n                depName = map.f;\n\n                //Fast path CommonJS standard dependencies.\n                if (depName === \"require\") {\n                    args[i] = handlers.require(name);\n                } else if (depName === \"exports\") {\n                    //CommonJS module spec 1.1\n                    args[i] = handlers.exports(name);\n                    usingExports = true;\n                } else if (depName === \"module\") {\n                    //CommonJS module spec 1.1\n                    cjsModule = args[i] = handlers.module(name);\n                } else if (hasProp(defined, depName) ||\n                           hasProp(waiting, depName) ||\n                           hasProp(defining, depName)) {\n                    args[i] = callDep(depName);\n                } else if (map.p) {\n                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});\n                    args[i] = defined[depName];\n                } else {\n                    throw new Error(name + ' missing ' + depName);\n                }\n            }\n\n            ret = callback ? callback.apply(defined[name], args) : undefined;\n\n            if (name) {\n                //If setting exports via \"module\" is in play,\n                //favor that over return value and exports. After that,\n                //favor a non-undefined return value over exports use.\n                if (cjsModule && cjsModule.exports !== undef &&\n                        cjsModule.exports !== defined[name]) {\n                    defined[name] = cjsModule.exports;\n                } else if (ret !== undef || !usingExports) {\n                    //Use the return value from the function.\n                    defined[name] = ret;\n                }\n            }\n        } else if (name) {\n            //May just be an object definition for the module. Only\n            //worry about defining if have a module name.\n            defined[name] = callback;\n        }\n    };\n\n    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {\n        if (typeof deps === \"string\") {\n            if (handlers[deps]) {\n                //callback in this case is really relName\n                return handlers[deps](callback);\n            }\n            //Just return the module wanted. In this scenario, the\n            //deps arg is the module name, and second arg (if passed)\n            //is just the relName.\n            //Normalize module name, if it contains . or ..\n            return callDep(makeMap(deps, makeRelParts(callback)).f);\n        } else if (!deps.splice) {\n            //deps is a config object, not an array.\n            config = deps;\n            if (config.deps) {\n                req(config.deps, config.callback);\n            }\n            if (!callback) {\n                return;\n            }\n\n            if (callback.splice) {\n                //callback is an array, which means it is a dependency list.\n                //Adjust args if there are dependencies\n                deps = callback;\n                callback = relName;\n                relName = null;\n            } else {\n                deps = undef;\n            }\n        }\n\n        //Support require(['a'])\n        callback = callback || function () {};\n\n        //If relName is a function, it is an errback handler,\n        //so remove it.\n        if (typeof relName === 'function') {\n            relName = forceSync;\n            forceSync = alt;\n        }\n\n        //Simulate async callback;\n        if (forceSync) {\n            main(undef, deps, callback, relName);\n        } else {\n            //Using a non-zero value because of concern for what old browsers\n            //do, and latest browsers \"upgrade\" to 4 if lower value is used:\n            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:\n            //If want a value immediately, use require('id') instead -- something\n            //that works in almond on the global level, but not guaranteed and\n            //unlikely to work in other AMD implementations.\n            setTimeout(function () {\n                main(undef, deps, callback, relName);\n            }, 4);\n        }\n\n        return req;\n    };\n\n    /**\n     * Just drops the config on the floor, but returns req in case\n     * the config return value is used.\n     */\n    req.config = function (cfg) {\n        return req(cfg);\n    };\n\n    /**\n     * Expose module registry for debugging and tooling\n     */\n    requirejs._defined = defined;\n\n    define = function (name, deps, callback) {\n        if (typeof name !== 'string') {\n            throw new Error('See almond README: incorrect module build, no module name');\n        }\n\n        //This module may not have dependencies\n        if (!deps.splice) {\n            //deps is not an array, so probably means\n            //an object literal or factory function for\n            //the value. Adjust args.\n            callback = deps;\n            deps = [];\n        }\n\n        if (!hasProp(defined, name) && !hasProp(waiting, name)) {\n            waiting[name] = [name, deps, callback];\n        }\n    };\n\n    define.amd = {\n        jQuery: true\n    };\n}());\n\ndefine(\"build/almond\", function(){});\n\n","//The modules for your project will be inlined above\n    //this snippet. Ask almond to synchronously require the\n    //module value for 'main' here and return it as the\n    //value to use for the public API for the built file.\n    return require('datalist');\n}));\n","//  Ramda v0.24.1\n//  https://github.com/ramda/ramda\n//  (c) 2013-2017 Scott Sauyet, Michael Hurley, and David Chambers\n//  Ramda may be freely distributed under the MIT license.\n\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define('vendor/ramda',['exports'], factory) :\n\t(factory((global.R = {})));\n}(this, (function (exports) { 'use strict';\n\nfunction _isPlaceholder(a) {\n  return a != null &&\n         typeof a === 'object' &&\n         a['@@functional/placeholder'] === true;\n}\n\n/**\n * Optimized internal one-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nfunction _curry1(fn) {\n  return function f1(a) {\n    if (arguments.length === 0 || _isPlaceholder(a)) {\n      return f1;\n    } else {\n      return fn.apply(this, arguments);\n    }\n  };\n}\n\n/**\n * Returns a function that always returns the given value. Note that for\n * non-primitives the value returned is a reference to the original value.\n *\n * This function is known as `const`, `constant`, or `K` (for K combinator) in\n * other languages and libraries.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig a -> (* -> a)\n * @param {*} val The value to wrap in a function\n * @return {Function} A Function :: * -> val.\n * @example\n *\n *      var t = R.always('Tee');\n *      t(); //=> 'Tee'\n */\nvar always = _curry1(function always(val) {\n  return function() {\n    return val;\n  };\n});\n\n/**\n * A function that always returns `false`. Any passed in parameters are ignored.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Function\n * @sig * -> Boolean\n * @param {*}\n * @return {Boolean}\n * @see R.always, R.T\n * @example\n *\n *      R.F(); //=> false\n */\nvar F = always(false);\n\n/**\n * A function that always returns `true`. Any passed in parameters are ignored.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Function\n * @sig * -> Boolean\n * @param {*}\n * @return {Boolean}\n * @see R.always, R.F\n * @example\n *\n *      R.T(); //=> true\n */\nvar T = always(true);\n\n/**\n * A special placeholder value used to specify \"gaps\" within curried functions,\n * allowing partial application of any combination of arguments, regardless of\n * their positions.\n *\n * If `g` is a curried ternary function and `_` is `R.__`, the following are\n * equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2, _)(1, 3)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @constant\n * @memberOf R\n * @since v0.6.0\n * @category Function\n * @example\n *\n *      var greet = R.replace('{name}', R.__, 'Hello, {name}!');\n *      greet('Alice'); //=> 'Hello, Alice!'\n */\nvar __ = {'@@functional/placeholder': true};\n\n/**\n * Optimized internal two-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nfunction _curry2(fn) {\n  return function f2(a, b) {\n    switch (arguments.length) {\n      case 0:\n        return f2;\n      case 1:\n        return _isPlaceholder(a) ? f2\n             : _curry1(function(_b) { return fn(a, _b); });\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) ? f2\n             : _isPlaceholder(a) ? _curry1(function(_a) { return fn(_a, b); })\n             : _isPlaceholder(b) ? _curry1(function(_b) { return fn(a, _b); })\n             : fn(a, b);\n    }\n  };\n}\n\n/**\n * Adds two values.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a\n * @param {Number} b\n * @return {Number}\n * @see R.subtract\n * @example\n *\n *      R.add(2, 3);       //=>  5\n *      R.add(7)(10);      //=> 17\n */\nvar add = _curry2(function add(a, b) {\n  return Number(a) + Number(b);\n});\n\n/**\n * Private `concat` function to merge two array-like objects.\n *\n * @private\n * @param {Array|Arguments} [set1=[]] An array-like object.\n * @param {Array|Arguments} [set2=[]] An array-like object.\n * @return {Array} A new, merged array.\n * @example\n *\n *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n */\nfunction _concat(set1, set2) {\n  set1 = set1 || [];\n  set2 = set2 || [];\n  var idx;\n  var len1 = set1.length;\n  var len2 = set2.length;\n  var result = [];\n\n  idx = 0;\n  while (idx < len1) {\n    result[result.length] = set1[idx];\n    idx += 1;\n  }\n  idx = 0;\n  while (idx < len2) {\n    result[result.length] = set2[idx];\n    idx += 1;\n  }\n  return result;\n}\n\nfunction _arity(n, fn) {\n  /* eslint-disable no-unused-vars */\n  switch (n) {\n    case 0: return function() { return fn.apply(this, arguments); };\n    case 1: return function(a0) { return fn.apply(this, arguments); };\n    case 2: return function(a0, a1) { return fn.apply(this, arguments); };\n    case 3: return function(a0, a1, a2) { return fn.apply(this, arguments); };\n    case 4: return function(a0, a1, a2, a3) { return fn.apply(this, arguments); };\n    case 5: return function(a0, a1, a2, a3, a4) { return fn.apply(this, arguments); };\n    case 6: return function(a0, a1, a2, a3, a4, a5) { return fn.apply(this, arguments); };\n    case 7: return function(a0, a1, a2, a3, a4, a5, a6) { return fn.apply(this, arguments); };\n    case 8: return function(a0, a1, a2, a3, a4, a5, a6, a7) { return fn.apply(this, arguments); };\n    case 9: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8) { return fn.apply(this, arguments); };\n    case 10: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) { return fn.apply(this, arguments); };\n    default: throw new Error('First argument to _arity must be a non-negative integer no greater than ten');\n  }\n}\n\n/**\n * Internal curryN function.\n *\n * @private\n * @category Function\n * @param {Number} length The arity of the curried function.\n * @param {Array} received An array of arguments received thus far.\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nfunction _curryN(length, received, fn) {\n  return function() {\n    var combined = [];\n    var argsIdx = 0;\n    var left = length;\n    var combinedIdx = 0;\n    while (combinedIdx < received.length || argsIdx < arguments.length) {\n      var result;\n      if (combinedIdx < received.length &&\n          (!_isPlaceholder(received[combinedIdx]) ||\n           argsIdx >= arguments.length)) {\n        result = received[combinedIdx];\n      } else {\n        result = arguments[argsIdx];\n        argsIdx += 1;\n      }\n      combined[combinedIdx] = result;\n      if (!_isPlaceholder(result)) {\n        left -= 1;\n      }\n      combinedIdx += 1;\n    }\n    return left <= 0 ? fn.apply(this, combined)\n                     : _arity(left, _curryN(length, combined, fn));\n  };\n}\n\n/**\n * Returns a curried equivalent of the provided function, with the specified\n * arity. The curried function has two unusual capabilities. First, its\n * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\n * the following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.5.0\n * @category Function\n * @sig Number -> (* -> a) -> (* -> a)\n * @param {Number} length The arity for the returned function.\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curry\n * @example\n *\n *      var sumArgs = (...args) => R.sum(args);\n *\n *      var curriedAddFourNumbers = R.curryN(4, sumArgs);\n *      var f = curriedAddFourNumbers(1, 2);\n *      var g = f(3);\n *      g(4); //=> 10\n */\nvar curryN = _curry2(function curryN(length, fn) {\n  if (length === 1) {\n    return _curry1(fn);\n  }\n  return _arity(length, _curryN(length, [], fn));\n});\n\n/**\n * Creates a new list iteration function from an existing one by adding two new\n * parameters to its callback function: the current index, and the entire list.\n *\n * This would turn, for instance, [`R.map`](#map) function into one that\n * more closely resembles `Array.prototype.map`. Note that this will only work\n * for functions in which the iteration callback function is the first\n * parameter, and where the list is the last parameter. (This latter might be\n * unimportant if the list parameter is not used.)\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Function\n * @category List\n * @sig ((a ... -> b) ... -> [a] -> *) -> (a ..., Int, [a] -> b) ... -> [a] -> *)\n * @param {Function} fn A list iteration function that does not pass index or list to its callback\n * @return {Function} An altered list iteration function that passes (item, index, list) to its callback\n * @example\n *\n *      var mapIndexed = R.addIndex(R.map);\n *      mapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);\n *      //=> ['0-f', '1-o', '2-o', '3-b', '4-a', '5-r']\n */\nvar addIndex = _curry1(function addIndex(fn) {\n  return curryN(fn.length, function() {\n    var idx = 0;\n    var origFn = arguments[0];\n    var list = arguments[arguments.length - 1];\n    var args = Array.prototype.slice.call(arguments, 0);\n    args[0] = function() {\n      var result = origFn.apply(this, _concat(arguments, [idx, list]));\n      idx += 1;\n      return result;\n    };\n    return fn.apply(this, args);\n  });\n});\n\n/**\n * Optimized internal three-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nfunction _curry3(fn) {\n  return function f3(a, b, c) {\n    switch (arguments.length) {\n      case 0:\n        return f3;\n      case 1:\n        return _isPlaceholder(a) ? f3\n             : _curry2(function(_b, _c) { return fn(a, _b, _c); });\n      case 2:\n        return _isPlaceholder(a) && _isPlaceholder(b) ? f3\n             : _isPlaceholder(a) ? _curry2(function(_a, _c) { return fn(_a, b, _c); })\n             : _isPlaceholder(b) ? _curry2(function(_b, _c) { return fn(a, _b, _c); })\n             : _curry1(function(_c) { return fn(a, b, _c); });\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3\n             : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function(_a, _b) { return fn(_a, _b, c); })\n             : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function(_a, _c) { return fn(_a, b, _c); })\n             : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function(_b, _c) { return fn(a, _b, _c); })\n             : _isPlaceholder(a) ? _curry1(function(_a) { return fn(_a, b, c); })\n             : _isPlaceholder(b) ? _curry1(function(_b) { return fn(a, _b, c); })\n             : _isPlaceholder(c) ? _curry1(function(_c) { return fn(a, b, _c); })\n             : fn(a, b, c);\n    }\n  };\n}\n\n/**\n * Applies a function to the value at the given index of an array, returning a\n * new copy of the array with the element at the given index replaced with the\n * result of the function application.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig (a -> a) -> Number -> [a] -> [a]\n * @param {Function} fn The function to apply.\n * @param {Number} idx The index.\n * @param {Array|Arguments} list An array-like object whose value\n *        at the supplied index will be replaced.\n * @return {Array} A copy of the supplied array-like object with\n *         the element at index `idx` replaced with the value\n *         returned by applying `fn` to the existing element.\n * @see R.update\n * @example\n *\n *      R.adjust(R.add(10), 1, [1, 2, 3]);     //=> [1, 12, 3]\n *      R.adjust(R.add(10))(1)([1, 2, 3]);     //=> [1, 12, 3]\n * @symb R.adjust(f, -1, [a, b]) = [a, f(b)]\n * @symb R.adjust(f, 0, [a, b]) = [f(a), b]\n */\nvar adjust = _curry3(function adjust(fn, idx, list) {\n  if (idx >= list.length || idx < -list.length) {\n    return list;\n  }\n  var start = idx < 0 ? list.length : 0;\n  var _idx = start + idx;\n  var _list = _concat(list);\n  _list[_idx] = fn(list[_idx]);\n  return _list;\n});\n\n/**\n * Tests whether or not an object is an array.\n *\n * @private\n * @param {*} val The object to test.\n * @return {Boolean} `true` if `val` is an array, `false` otherwise.\n * @example\n *\n *      _isArray([]); //=> true\n *      _isArray(null); //=> false\n *      _isArray({}); //=> false\n */\nvar _isArray = Array.isArray || function _isArray(val) {\n  return (val != null &&\n          val.length >= 0 &&\n          Object.prototype.toString.call(val) === '[object Array]');\n};\n\nfunction _isTransformer(obj) {\n  return typeof obj['@@transducer/step'] === 'function';\n}\n\n/**\n * Returns a function that dispatches with different strategies based on the\n * object in list position (last argument). If it is an array, executes [fn].\n * Otherwise, if it has a function with one of the given method names, it will\n * execute that function (functor case). Otherwise, if it is a transformer,\n * uses transducer [xf] to return a new transformer (transducer case).\n * Otherwise, it will default to executing [fn].\n *\n * @private\n * @param {Array} methodNames properties to check for a custom implementation\n * @param {Function} xf transducer to initialize if object is transformer\n * @param {Function} fn default ramda implementation\n * @return {Function} A function that dispatches on object in list position\n */\nfunction _dispatchable(methodNames, xf, fn) {\n  return function() {\n    if (arguments.length === 0) {\n      return fn();\n    }\n    var args = Array.prototype.slice.call(arguments, 0);\n    var obj = args.pop();\n    if (!_isArray(obj)) {\n      var idx = 0;\n      while (idx < methodNames.length) {\n        if (typeof obj[methodNames[idx]] === 'function') {\n          return obj[methodNames[idx]].apply(obj, args);\n        }\n        idx += 1;\n      }\n      if (_isTransformer(obj)) {\n        var transducer = xf.apply(null, args);\n        return transducer(obj);\n      }\n    }\n    return fn.apply(this, arguments);\n  };\n}\n\nfunction _reduced(x) {\n  return x && x['@@transducer/reduced'] ? x :\n    {\n      '@@transducer/value': x,\n      '@@transducer/reduced': true\n    };\n}\n\nvar _xfBase = {\n  init: function() {\n    return this.xf['@@transducer/init']();\n  },\n  result: function(result) {\n    return this.xf['@@transducer/result'](result);\n  }\n};\n\nfunction XAll(f, xf) {\n  this.xf = xf;\n  this.f = f;\n  this.all = true;\n}\nXAll.prototype['@@transducer/init'] = _xfBase.init;\nXAll.prototype['@@transducer/result'] = function(result) {\n  if (this.all) {\n    result = this.xf['@@transducer/step'](result, true);\n  }\n  return this.xf['@@transducer/result'](result);\n};\nXAll.prototype['@@transducer/step'] = function(result, input) {\n  if (!this.f(input)) {\n    this.all = false;\n    result = _reduced(this.xf['@@transducer/step'](result, false));\n  }\n  return result;\n};\n\nvar _xall = _curry2(function _xall(f, xf) { return new XAll(f, xf); });\n\n/**\n * Returns `true` if all elements of the list match the predicate, `false` if\n * there are any that don't.\n *\n * Dispatches to the `all` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> Boolean\n * @param {Function} fn The predicate function.\n * @param {Array} list The array to consider.\n * @return {Boolean} `true` if the predicate is satisfied by every element, `false`\n *         otherwise.\n * @see R.any, R.none, R.transduce\n * @example\n *\n *      var equals3 = R.equals(3);\n *      R.all(equals3)([3, 3, 3, 3]); //=> true\n *      R.all(equals3)([3, 3, 1, 3]); //=> false\n */\nvar all = _curry2(_dispatchable(['all'], _xall, function all(fn, list) {\n  var idx = 0;\n  while (idx < list.length) {\n    if (!fn(list[idx])) {\n      return false;\n    }\n    idx += 1;\n  }\n  return true;\n}));\n\n/**\n * Returns the larger of its two arguments.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> a\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.maxBy, R.min\n * @example\n *\n *      R.max(789, 123); //=> 789\n *      R.max('a', 'b'); //=> 'b'\n */\nvar max = _curry2(function max(a, b) { return b > a ? b : a; });\n\nfunction _map(fn, functor) {\n  var idx = 0;\n  var len = functor.length;\n  var result = Array(len);\n  while (idx < len) {\n    result[idx] = fn(functor[idx]);\n    idx += 1;\n  }\n  return result;\n}\n\nfunction _isString(x) {\n  return Object.prototype.toString.call(x) === '[object String]';\n}\n\n/**\n * Tests whether or not an object is similar to an array.\n *\n * @private\n * @category Type\n * @category List\n * @sig * -> Boolean\n * @param {*} x The object to test.\n * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.\n * @example\n *\n *      _isArrayLike([]); //=> true\n *      _isArrayLike(true); //=> false\n *      _isArrayLike({}); //=> false\n *      _isArrayLike({length: 10}); //=> false\n *      _isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true\n */\nvar _isArrayLike = _curry1(function isArrayLike(x) {\n  if (_isArray(x)) { return true; }\n  if (!x) { return false; }\n  if (typeof x !== 'object') { return false; }\n  if (_isString(x)) { return false; }\n  if (x.nodeType === 1) { return !!x.length; }\n  if (x.length === 0) { return true; }\n  if (x.length > 0) {\n    return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);\n  }\n  return false;\n});\n\nfunction XWrap(fn) {\n  this.f = fn;\n}\nXWrap.prototype['@@transducer/init'] = function() {\n  throw new Error('init not implemented on XWrap');\n};\nXWrap.prototype['@@transducer/result'] = function(acc) { return acc; };\nXWrap.prototype['@@transducer/step'] = function(acc, x) {\n  return this.f(acc, x);\n};\n\nfunction _xwrap(fn) { return new XWrap(fn); }\n\n/**\n * Creates a function that is bound to a context.\n * Note: `R.bind` does not provide the additional argument-binding capabilities of\n * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Function\n * @category Object\n * @sig (* -> *) -> {*} -> (* -> *)\n * @param {Function} fn The function to bind to context\n * @param {Object} thisObj The context to bind `fn` to\n * @return {Function} A function that will execute in the context of `thisObj`.\n * @see R.partial\n * @example\n *\n *      var log = R.bind(console.log, console);\n *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}\n *      // logs {a: 2}\n * @symb R.bind(f, o)(a, b) = f.call(o, a, b)\n */\nvar bind = _curry2(function bind(fn, thisObj) {\n  return _arity(fn.length, function() {\n    return fn.apply(thisObj, arguments);\n  });\n});\n\nfunction _arrayReduce(xf, acc, list) {\n  var idx = 0;\n  var len = list.length;\n  while (idx < len) {\n    acc = xf['@@transducer/step'](acc, list[idx]);\n    if (acc && acc['@@transducer/reduced']) {\n      acc = acc['@@transducer/value'];\n      break;\n    }\n    idx += 1;\n  }\n  return xf['@@transducer/result'](acc);\n}\n\nfunction _iterableReduce(xf, acc, iter) {\n  var step = iter.next();\n  while (!step.done) {\n    acc = xf['@@transducer/step'](acc, step.value);\n    if (acc && acc['@@transducer/reduced']) {\n      acc = acc['@@transducer/value'];\n      break;\n    }\n    step = iter.next();\n  }\n  return xf['@@transducer/result'](acc);\n}\n\nfunction _methodReduce(xf, acc, obj, methodName) {\n  return xf['@@transducer/result'](obj[methodName](bind(xf['@@transducer/step'], xf), acc));\n}\n\nvar symIterator = (typeof Symbol !== 'undefined') ? Symbol.iterator : '@@iterator';\n\nfunction _reduce(fn, acc, list) {\n  if (typeof fn === 'function') {\n    fn = _xwrap(fn);\n  }\n  if (_isArrayLike(list)) {\n    return _arrayReduce(fn, acc, list);\n  }\n  if (typeof list['fantasy-land/reduce'] === 'function') {\n    return _methodReduce(fn, acc, list, 'fantasy-land/reduce');\n  }\n  if (list[symIterator] != null) {\n    return _iterableReduce(fn, acc, list[symIterator]());\n  }\n  if (typeof list.next === 'function') {\n    return _iterableReduce(fn, acc, list);\n  }\n  if (typeof list.reduce === 'function') {\n    return _methodReduce(fn, acc, list, 'reduce');\n  }\n\n  throw new TypeError('reduce: list must be array or iterable');\n}\n\nfunction XMap(f, xf) {\n  this.xf = xf;\n  this.f = f;\n}\nXMap.prototype['@@transducer/init'] = _xfBase.init;\nXMap.prototype['@@transducer/result'] = _xfBase.result;\nXMap.prototype['@@transducer/step'] = function(result, input) {\n  return this.xf['@@transducer/step'](result, this.f(input));\n};\n\nvar _xmap = _curry2(function _xmap(f, xf) { return new XMap(f, xf); });\n\nfunction _has(prop, obj) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nvar toString = Object.prototype.toString;\nvar _isArguments = function() {\n  return toString.call(arguments) === '[object Arguments]' ?\n    function _isArguments(x) { return toString.call(x) === '[object Arguments]'; } :\n    function _isArguments(x) { return _has('callee', x); };\n};\n\n// cover IE < 9 keys issues\nvar hasEnumBug = !({toString: null}).propertyIsEnumerable('toString');\nvar nonEnumerableProps = ['constructor', 'valueOf', 'isPrototypeOf', 'toString',\n                          'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n// Safari bug\nvar hasArgsEnumBug = (function() {\n  'use strict';\n  return arguments.propertyIsEnumerable('length');\n}());\n\nvar contains = function contains(list, item) {\n  var idx = 0;\n  while (idx < list.length) {\n    if (list[idx] === item) {\n      return true;\n    }\n    idx += 1;\n  }\n  return false;\n};\n\n/**\n * Returns a list containing the names of all the enumerable own properties of\n * the supplied object.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {k: v} -> [k]\n * @param {Object} obj The object to extract properties from\n * @return {Array} An array of the object's own properties.\n * @see R.keysIn, R.values\n * @example\n *\n *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']\n */\nvar _keys = typeof Object.keys === 'function' && !hasArgsEnumBug ?\n  function keys(obj) {\n    return Object(obj) !== obj ? [] : Object.keys(obj);\n  } :\n  function keys(obj) {\n    if (Object(obj) !== obj) {\n      return [];\n    }\n    var prop, nIdx;\n    var ks = [];\n    var checkArgsLength = hasArgsEnumBug && _isArguments(obj);\n    for (prop in obj) {\n      if (_has(prop, obj) && (!checkArgsLength || prop !== 'length')) {\n        ks[ks.length] = prop;\n      }\n    }\n    if (hasEnumBug) {\n      nIdx = nonEnumerableProps.length - 1;\n      while (nIdx >= 0) {\n        prop = nonEnumerableProps[nIdx];\n        if (_has(prop, obj) && !contains(ks, prop)) {\n          ks[ks.length] = prop;\n        }\n        nIdx -= 1;\n      }\n    }\n    return ks;\n  };\nvar keys = _curry1(_keys);\n\n/**\n * Takes a function and\n * a [functor](https://github.com/fantasyland/fantasy-land#functor),\n * applies the function to each of the functor's values, and returns\n * a functor of the same shape.\n *\n * Ramda provides suitable `map` implementations for `Array` and `Object`,\n * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.\n *\n * Dispatches to the `map` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * Also treats functions as functors and will compose them together.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Functor f => (a -> b) -> f a -> f b\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {Array} list The list to be iterated over.\n * @return {Array} The new list.\n * @see R.transduce, R.addIndex\n * @example\n *\n *      var double = x => x * 2;\n *\n *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]\n *\n *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}\n * @symb R.map(f, [a, b]) = [f(a), f(b)]\n * @symb R.map(f, { x: a, y: b }) = { x: f(a), y: f(b) }\n * @symb R.map(f, functor_o) = functor_o.map(f)\n */\nvar map = _curry2(_dispatchable(['fantasy-land/map', 'map'], _xmap, function map(fn, functor) {\n  switch (Object.prototype.toString.call(functor)) {\n    case '[object Function]':\n      return curryN(functor.length, function() {\n        return fn.call(this, functor.apply(this, arguments));\n      });\n    case '[object Object]':\n      return _reduce(function(acc, key) {\n        acc[key] = fn(functor[key]);\n        return acc;\n      }, {}, keys(functor));\n    default:\n      return _map(fn, functor);\n  }\n}));\n\n/**\n * Retrieve the value at a given path.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Object\n * @typedefn Idx = String | Int\n * @sig [Idx] -> {a} -> a | Undefined\n * @param {Array} path The path to use.\n * @param {Object} obj The object to retrieve the nested property from.\n * @return {*} The data at `path`.\n * @see R.prop\n * @example\n *\n *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2\n *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined\n */\nvar path = _curry2(function path(paths, obj) {\n  var val = obj;\n  var idx = 0;\n  while (idx < paths.length) {\n    if (val == null) {\n      return;\n    }\n    val = val[paths[idx]];\n    idx += 1;\n  }\n  return val;\n});\n\n/**\n * Returns a function that when supplied an object returns the indicated\n * property of that object, if it exists.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig s -> {s: a} -> a | Undefined\n * @param {String} p The property name\n * @param {Object} obj The object to query\n * @return {*} The value at `obj.p`.\n * @see R.path\n * @example\n *\n *      R.prop('x', {x: 100}); //=> 100\n *      R.prop('x', {}); //=> undefined\n */\n\nvar prop = _curry2(function prop(p, obj) { return path([p], obj); });\n\n/**\n * Returns a new list by plucking the same named property off all objects in\n * the list supplied.\n *\n * `pluck` will work on\n * any [functor](https://github.com/fantasyland/fantasy-land#functor) in\n * addition to arrays, as it is equivalent to `R.map(R.prop(k), f)`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Functor f => k -> f {k: v} -> f v\n * @param {Number|String} key The key name to pluck off of each object.\n * @param {Array} f The array or functor to consider.\n * @return {Array} The list of values for the given key.\n * @see R.props\n * @example\n *\n *      R.pluck('a')([{a: 1}, {a: 2}]); //=> [1, 2]\n *      R.pluck(0)([[1, 2], [3, 4]]);   //=> [1, 3]\n *      R.pluck('val', {a: {val: 3}, b: {val: 5}}); //=> {a: 3, b: 5}\n * @symb R.pluck('x', [{x: 1, y: 2}, {x: 3, y: 4}, {x: 5, y: 6}]) = [1, 3, 5]\n * @symb R.pluck(0, [[1, 2], [3, 4], [5, 6]]) = [1, 3, 5]\n */\nvar pluck = _curry2(function pluck(p, list) {\n  return map(prop(p), list);\n});\n\n/**\n * Returns a single item by iterating through the list, successively calling\n * the iterator function and passing it an accumulator value and the current\n * value from the array, and then passing the result to the next call.\n *\n * The iterator function receives two values: *(acc, value)*. It may use\n * [`R.reduced`](#reduced) to shortcut the iteration.\n *\n * The arguments' order of [`reduceRight`](#reduceRight)'s iterator function\n * is *(value, acc)*.\n *\n * Note: `R.reduce` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.reduce` method. For more details\n * on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description\n *\n * Dispatches to the `reduce` method of the third argument, if present. When\n * doing so, it is up to the user to handle the [`R.reduced`](#reduced)\n * shortcuting, as this is not implemented by `reduce`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduced, R.addIndex, R.reduceRight\n * @example\n *\n *      R.reduce(R.subtract, 0, [1, 2, 3, 4]) // => ((((0 - 1) - 2) - 3) - 4) = -10\n *      //          -               -10\n *      //         / \\              / \\\n *      //        -   4           -6   4\n *      //       / \\              / \\\n *      //      -   3   ==>     -3   3\n *      //     / \\              / \\\n *      //    -   2           -1   2\n *      //   / \\              / \\\n *      //  0   1            0   1\n *\n * @symb R.reduce(f, a, [b, c, d]) = f(f(f(a, b), c), d)\n */\nvar reduce = _curry3(_reduce);\n\n/**\n * Takes a list of predicates and returns a predicate that returns true for a\n * given list of arguments if every one of the provided predicates is satisfied\n * by those arguments.\n *\n * The function returned is a curried function whose arity matches that of the\n * highest-arity predicate.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Logic\n * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n * @param {Array} predicates An array of predicates to check\n * @return {Function} The combined predicate\n * @see R.anyPass\n * @example\n *\n *      var isQueen = R.propEq('rank', 'Q');\n *      var isSpade = R.propEq('suit', '♠︎');\n *      var isQueenOfSpades = R.allPass([isQueen, isSpade]);\n *\n *      isQueenOfSpades({rank: 'Q', suit: '♣︎'}); //=> false\n *      isQueenOfSpades({rank: 'Q', suit: '♠︎'}); //=> true\n */\nvar allPass = _curry1(function allPass(preds) {\n  return curryN(reduce(max, 0, pluck('length', preds)), function() {\n    var idx = 0;\n    var len = preds.length;\n    while (idx < len) {\n      if (!preds[idx].apply(this, arguments)) {\n        return false;\n      }\n      idx += 1;\n    }\n    return true;\n  });\n});\n\n/**\n * Returns `true` if both arguments are `true`; `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig a -> b -> a | b\n * @param {Any} a\n * @param {Any} b\n * @return {Any} the first argument if it is falsy, otherwise the second argument.\n * @see R.both\n * @example\n *\n *      R.and(true, true); //=> true\n *      R.and(true, false); //=> false\n *      R.and(false, true); //=> false\n *      R.and(false, false); //=> false\n */\nvar and = _curry2(function and(a, b) {\n  return a && b;\n});\n\nfunction XAny(f, xf) {\n  this.xf = xf;\n  this.f = f;\n  this.any = false;\n}\nXAny.prototype['@@transducer/init'] = _xfBase.init;\nXAny.prototype['@@transducer/result'] = function(result) {\n  if (!this.any) {\n    result = this.xf['@@transducer/step'](result, false);\n  }\n  return this.xf['@@transducer/result'](result);\n};\nXAny.prototype['@@transducer/step'] = function(result, input) {\n  if (this.f(input)) {\n    this.any = true;\n    result = _reduced(this.xf['@@transducer/step'](result, true));\n  }\n  return result;\n};\n\nvar _xany = _curry2(function _xany(f, xf) { return new XAny(f, xf); });\n\n/**\n * Returns `true` if at least one of elements of the list match the predicate,\n * `false` otherwise.\n *\n * Dispatches to the `any` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> Boolean\n * @param {Function} fn The predicate function.\n * @param {Array} list The array to consider.\n * @return {Boolean} `true` if the predicate is satisfied by at least one element, `false`\n *         otherwise.\n * @see R.all, R.none, R.transduce\n * @example\n *\n *      var lessThan0 = R.flip(R.lt)(0);\n *      var lessThan2 = R.flip(R.lt)(2);\n *      R.any(lessThan0)([1, 2]); //=> false\n *      R.any(lessThan2)([1, 2]); //=> true\n */\nvar any = _curry2(_dispatchable(['any'], _xany, function any(fn, list) {\n  var idx = 0;\n  while (idx < list.length) {\n    if (fn(list[idx])) {\n      return true;\n    }\n    idx += 1;\n  }\n  return false;\n}));\n\n/**\n * Takes a list of predicates and returns a predicate that returns true for a\n * given list of arguments if at least one of the provided predicates is\n * satisfied by those arguments.\n *\n * The function returned is a curried function whose arity matches that of the\n * highest-arity predicate.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Logic\n * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n * @param {Array} predicates An array of predicates to check\n * @return {Function} The combined predicate\n * @see R.allPass\n * @example\n *\n *      var isClub = R.propEq('suit', '♣');\n *      var isSpade = R.propEq('suit', '♠');\n *      var isBlackCard = R.anyPass([isClub, isSpade]);\n *\n *      isBlackCard({rank: '10', suit: '♣'}); //=> true\n *      isBlackCard({rank: 'Q', suit: '♠'}); //=> true\n *      isBlackCard({rank: 'Q', suit: '♦'}); //=> false\n */\nvar anyPass = _curry1(function anyPass(preds) {\n  return curryN(reduce(max, 0, pluck('length', preds)), function() {\n    var idx = 0;\n    var len = preds.length;\n    while (idx < len) {\n      if (preds[idx].apply(this, arguments)) {\n        return true;\n      }\n      idx += 1;\n    }\n    return false;\n  });\n});\n\n/**\n * ap applies a list of functions to a list of values.\n *\n * Dispatches to the `ap` method of the second argument, if present. Also\n * treats curried functions as applicatives.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Function\n * @sig [a -> b] -> [a] -> [b]\n * @sig Apply f => f (a -> b) -> f a -> f b\n * @sig (a -> b -> c) -> (a -> b) -> (a -> c)\n * @param {*} applyF\n * @param {*} applyX\n * @return {*}\n * @example\n *\n *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]\n *      R.ap([R.concat('tasty '), R.toUpper], ['pizza', 'salad']); //=> [\"tasty pizza\", \"tasty salad\", \"PIZZA\", \"SALAD\"]\n *\n *      // R.ap can also be used as S combinator\n *      // when only two functions are passed\n *      R.ap(R.concat, R.toUpper)('Ramda') //=> 'RamdaRAMDA'\n * @symb R.ap([f, g], [a, b]) = [f(a), f(b), g(a), g(b)]\n */\nvar ap = _curry2(function ap(applyF, applyX) {\n  return (\n    typeof applyX['fantasy-land/ap'] === 'function' ?\n      applyX['fantasy-land/ap'](applyF) :\n    typeof applyF.ap === 'function' ?\n      applyF.ap(applyX) :\n    typeof applyF === 'function' ?\n      function(x) { return applyF(x)(applyX(x)); } :\n    // else\n      _reduce(function(acc, f) { return _concat(acc, map(f, applyX)); }, [], applyF)\n  );\n});\n\nfunction _aperture(n, list) {\n  var idx = 0;\n  var limit = list.length - (n - 1);\n  var acc = new Array(limit >= 0 ? limit : 0);\n  while (idx < limit) {\n    acc[idx] = Array.prototype.slice.call(list, idx, idx + n);\n    idx += 1;\n  }\n  return acc;\n}\n\nfunction XAperture(n, xf) {\n  this.xf = xf;\n  this.pos = 0;\n  this.full = false;\n  this.acc = new Array(n);\n}\nXAperture.prototype['@@transducer/init'] = _xfBase.init;\nXAperture.prototype['@@transducer/result'] = function(result) {\n  this.acc = null;\n  return this.xf['@@transducer/result'](result);\n};\nXAperture.prototype['@@transducer/step'] = function(result, input) {\n  this.store(input);\n  return this.full ? this.xf['@@transducer/step'](result, this.getCopy()) : result;\n};\nXAperture.prototype.store = function(input) {\n  this.acc[this.pos] = input;\n  this.pos += 1;\n  if (this.pos === this.acc.length) {\n    this.pos = 0;\n    this.full = true;\n  }\n};\nXAperture.prototype.getCopy = function() {\n  return _concat(Array.prototype.slice.call(this.acc, this.pos),\n                 Array.prototype.slice.call(this.acc, 0, this.pos));\n};\n\nvar _xaperture = _curry2(function _xaperture(n, xf) { return new XAperture(n, xf); });\n\n/**\n * Returns a new list, composed of n-tuples of consecutive elements. If `n` is\n * greater than the length of the list, an empty list is returned.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig Number -> [a] -> [[a]]\n * @param {Number} n The size of the tuples to create\n * @param {Array} list The list to split into `n`-length tuples\n * @return {Array} The resulting list of `n`-length tuples\n * @see R.transduce\n * @example\n *\n *      R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]\n *      R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n *      R.aperture(7, [1, 2, 3, 4, 5]); //=> []\n */\nvar aperture = _curry2(_dispatchable([], _xaperture, _aperture));\n\n/**\n * Returns a new list containing the contents of the given list, followed by\n * the given element.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> [a]\n * @param {*} el The element to add to the end of the new list.\n * @param {Array} list The list of elements to add a new item to.\n *        list.\n * @return {Array} A new list containing the elements of the old list followed by `el`.\n * @see R.prepend\n * @example\n *\n *      R.append('tests', ['write', 'more']); //=> ['write', 'more', 'tests']\n *      R.append('tests', []); //=> ['tests']\n *      R.append(['tests'], ['write', 'more']); //=> ['write', 'more', ['tests']]\n */\nvar append = _curry2(function append(el, list) {\n  return _concat(list, [el]);\n});\n\n/**\n * Applies function `fn` to the argument list `args`. This is useful for\n * creating a fixed-arity function from a variadic function. `fn` should be a\n * bound function if context is significant.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Function\n * @sig (*... -> a) -> [*] -> a\n * @param {Function} fn The function which will be called with `args`\n * @param {Array} args The arguments to call `fn` with\n * @return {*} result The result, equivalent to `fn(...args)`\n * @see R.call, R.unapply\n * @example\n *\n *      var nums = [1, 2, 3, -99, 42, 6, 7];\n *      R.apply(Math.max, nums); //=> 42\n * @symb R.apply(f, [a, b, c]) = f(a, b, c)\n */\nvar apply = _curry2(function apply(fn, args) {\n  return fn.apply(this, args);\n});\n\n/**\n * Returns a list of all the enumerable own properties of the supplied object.\n * Note that the order of the output array is not guaranteed across different\n * JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {k: v} -> [v]\n * @param {Object} obj The object to extract values from\n * @return {Array} An array of the values of the object's own properties.\n * @see R.valuesIn, R.keys\n * @example\n *\n *      R.values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]\n */\nvar values = _curry1(function values(obj) {\n  var props = keys(obj);\n  var len = props.length;\n  var vals = [];\n  var idx = 0;\n  while (idx < len) {\n    vals[idx] = obj[props[idx]];\n    idx += 1;\n  }\n  return vals;\n});\n\n/**\n * Given a spec object recursively mapping properties to functions, creates a\n * function producing an object of the same structure, by mapping each property\n * to the result of calling its associated function with the supplied arguments.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Function\n * @sig {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})\n * @param {Object} spec an object recursively mapping properties to functions for\n *        producing the values for these properties.\n * @return {Function} A function that returns an object of the same structure\n * as `spec', with each property set to the value returned by calling its\n * associated function with the supplied arguments.\n * @see R.converge, R.juxt\n * @example\n *\n *      var getMetrics = R.applySpec({\n *        sum: R.add,\n *        nested: { mul: R.multiply }\n *      });\n *      getMetrics(2, 4); // => { sum: 6, nested: { mul: 8 } }\n * @symb R.applySpec({ x: f, y: { z: g } })(a, b) = { x: f(a, b), y: { z: g(a, b) } }\n */\nvar applySpec = _curry1(function applySpec(spec) {\n  spec = map(function(v) { return typeof v == 'function' ? v : applySpec(v); },\n             spec);\n  return curryN(reduce(max, 0, pluck('length', values(spec))),\n                function() {\n                  var args = arguments;\n                  return map(function(f) { return apply(f, args); }, spec);\n                });\n});\n\n/**\n* Takes a value and applies a function to it.\n*\n* This function is also known as the `thrush` combinator.\n*\n* @func\n* @memberOf R\n * @since v0.25.0\n* @category Function\n* @sig a -> (a -> b) -> b\n* @param {*} x The value\n* @param {Function} f The function to apply\n* @return {*} The result of applying `f` to `x`\n* @example\n*\n*      var t42 = R.applyTo(42);\n*      t42(R.identity); //=> 42\n*      t42(R.add(1)); //=> 43\n*/\nvar applyTo = _curry2(function applyTo(x, f) { return f(x); });\n\n/**\n * Makes an ascending comparator function out of a function that returns a value\n * that can be compared with `<` and `>`.\n *\n * @func\n * @memberOf R\n * @since v0.23.0\n * @category Function\n * @sig Ord b => (a -> b) -> a -> a -> Number\n * @param {Function} fn A function of arity one that returns a value that can be compared\n * @param {*} a The first item to be compared.\n * @param {*} b The second item to be compared.\n * @return {Number} `-1` if fn(a) < fn(b), `1` if fn(b) < fn(a), otherwise `0`\n * @see R.descend\n * @example\n *\n *      var byAge = R.ascend(R.prop('age'));\n *      var people = [\n *        // ...\n *      ];\n *      var peopleByYoungestFirst = R.sort(byAge, people);\n */\nvar ascend = _curry3(function ascend(fn, a, b) {\n  var aa = fn(a);\n  var bb = fn(b);\n  return aa < bb ? -1 : aa > bb ? 1 : 0;\n});\n\n/**\n * Makes a shallow clone of an object, setting or overriding the specified\n * property with the given value. Note that this copies and flattens prototype\n * properties onto the new object as well. All non-primitive properties are\n * copied by reference.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Object\n * @sig String -> a -> {k: v} -> {k: v}\n * @param {String} prop The property name to set\n * @param {*} val The new value\n * @param {Object} obj The object to clone\n * @return {Object} A new object equivalent to the original except for the changed property.\n * @see R.dissoc\n * @example\n *\n *      R.assoc('c', 3, {a: 1, b: 2}); //=> {a: 1, b: 2, c: 3}\n */\nvar assoc = _curry3(function assoc(prop, val, obj) {\n  var result = {};\n  for (var p in obj) {\n    result[p] = obj[p];\n  }\n  result[prop] = val;\n  return result;\n});\n\n/**\n * Determine if the passed argument is an integer.\n *\n * @private\n * @param {*} n\n * @category Type\n * @return {Boolean}\n */\nvar _isInteger = Number.isInteger || function _isInteger(n) {\n  return (n << 0) === n;\n};\n\n/**\n * Checks if the input value is `null` or `undefined`.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Type\n * @sig * -> Boolean\n * @param {*} x The value to test.\n * @return {Boolean} `true` if `x` is `undefined` or `null`, otherwise `false`.\n * @example\n *\n *      R.isNil(null); //=> true\n *      R.isNil(undefined); //=> true\n *      R.isNil(0); //=> false\n *      R.isNil([]); //=> false\n */\nvar isNil = _curry1(function isNil(x) { return x == null; });\n\n/**\n * Makes a shallow clone of an object, setting or overriding the nodes required\n * to create the given path, and placing the specific value at the tail end of\n * that path. Note that this copies and flattens prototype properties onto the\n * new object as well. All non-primitive properties are copied by reference.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Object\n * @typedefn Idx = String | Int\n * @sig [Idx] -> a -> {a} -> {a}\n * @param {Array} path the path to set\n * @param {*} val The new value\n * @param {Object} obj The object to clone\n * @return {Object} A new object equivalent to the original except along the specified path.\n * @see R.dissocPath\n * @example\n *\n *      R.assocPath(['a', 'b', 'c'], 42, {a: {b: {c: 0}}}); //=> {a: {b: {c: 42}}}\n *\n *      // Any missing or non-object keys in path will be overridden\n *      R.assocPath(['a', 'b', 'c'], 42, {a: 5}); //=> {a: {b: {c: 42}}}\n */\nvar assocPath = _curry3(function assocPath(path, val, obj) {\n  if (path.length === 0) {\n    return val;\n  }\n  var idx = path[0];\n  if (path.length > 1) {\n    var nextObj = (!isNil(obj) && _has(idx, obj)) ? obj[idx] : _isInteger(path[1]) ? [] : {};\n    val = assocPath(Array.prototype.slice.call(path, 1), val, nextObj);\n  }\n  if (_isInteger(idx) && _isArray(obj)) {\n    var arr = [].concat(obj);\n    arr[idx] = val;\n    return arr;\n  } else {\n    return assoc(idx, val, obj);\n  }\n});\n\n/**\n * Wraps a function of any arity (including nullary) in a function that accepts\n * exactly `n` parameters. Any extraneous parameters will not be passed to the\n * supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig Number -> (* -> a) -> (* -> a)\n * @param {Number} n The desired arity of the new function.\n * @param {Function} fn The function to wrap.\n * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n *         arity `n`.\n * @see R.binary, R.unary\n * @example\n *\n *      var takesTwoArgs = (a, b) => [a, b];\n *\n *      takesTwoArgs.length; //=> 2\n *      takesTwoArgs(1, 2); //=> [1, 2]\n *\n *      var takesOneArg = R.nAry(1, takesTwoArgs);\n *      takesOneArg.length; //=> 1\n *      // Only `n` arguments are passed to the wrapped function\n *      takesOneArg(1, 2); //=> [1, undefined]\n * @symb R.nAry(0, f)(a, b) = f()\n * @symb R.nAry(1, f)(a, b) = f(a)\n * @symb R.nAry(2, f)(a, b) = f(a, b)\n */\nvar nAry = _curry2(function nAry(n, fn) {\n  switch (n) {\n    case 0: return function() {return fn.call(this);};\n    case 1: return function(a0) {return fn.call(this, a0);};\n    case 2: return function(a0, a1) {return fn.call(this, a0, a1);};\n    case 3: return function(a0, a1, a2) {return fn.call(this, a0, a1, a2);};\n    case 4: return function(a0, a1, a2, a3) {return fn.call(this, a0, a1, a2, a3);};\n    case 5: return function(a0, a1, a2, a3, a4) {return fn.call(this, a0, a1, a2, a3, a4);};\n    case 6: return function(a0, a1, a2, a3, a4, a5) {return fn.call(this, a0, a1, a2, a3, a4, a5);};\n    case 7: return function(a0, a1, a2, a3, a4, a5, a6) {return fn.call(this, a0, a1, a2, a3, a4, a5, a6);};\n    case 8: return function(a0, a1, a2, a3, a4, a5, a6, a7) {return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7);};\n    case 9: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8) {return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8);};\n    case 10: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);};\n    default: throw new Error('First argument to nAry must be a non-negative integer no greater than ten');\n  }\n});\n\n/**\n * Wraps a function of any arity (including nullary) in a function that accepts\n * exactly 2 parameters. Any extraneous parameters will not be passed to the\n * supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Function\n * @sig (* -> c) -> (a, b -> c)\n * @param {Function} fn The function to wrap.\n * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n *         arity 2.\n * @see R.nAry, R.unary\n * @example\n *\n *      var takesThreeArgs = function(a, b, c) {\n *        return [a, b, c];\n *      };\n *      takesThreeArgs.length; //=> 3\n *      takesThreeArgs(1, 2, 3); //=> [1, 2, 3]\n *\n *      var takesTwoArgs = R.binary(takesThreeArgs);\n *      takesTwoArgs.length; //=> 2\n *      // Only 2 arguments are passed to the wrapped function\n *      takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]\n * @symb R.binary(f)(a, b, c) = f(a, b)\n */\nvar binary = _curry1(function binary(fn) {\n  return nAry(2, fn);\n});\n\nfunction _isFunction(x) {\n  return Object.prototype.toString.call(x) === '[object Function]';\n}\n\n/**\n * \"lifts\" a function to be the specified arity, so that it may \"map over\" that\n * many lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Function\n * @sig Number -> (*... -> *) -> ([*]... -> [*])\n * @param {Function} fn The function to lift into higher context\n * @return {Function} The lifted function.\n * @see R.lift, R.ap\n * @example\n *\n *      var madd3 = R.liftN(3, (...args) => R.sum(args));\n *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]\n */\nvar liftN = _curry2(function liftN(arity, fn) {\n  var lifted = curryN(arity, fn);\n  return curryN(arity, function() {\n    return _reduce(ap, map(lifted, arguments[0]), Array.prototype.slice.call(arguments, 1));\n  });\n});\n\n/**\n * \"lifts\" a function of arity > 1 so that it may \"map over\" a list, Function or other\n * object that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Function\n * @sig (*... -> *) -> ([*]... -> [*])\n * @param {Function} fn The function to lift into higher context\n * @return {Function} The lifted function.\n * @see R.liftN\n * @example\n *\n *      var madd3 = R.lift((a, b, c) => a + b + c);\n *\n *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]\n *\n *      var madd5 = R.lift((a, b, c, d, e) => a + b + c + d + e);\n *\n *      madd5([1,2], [3], [4, 5], [6], [7, 8]); //=> [21, 22, 22, 23, 22, 23, 23, 24]\n */\nvar lift = _curry1(function lift(fn) {\n  return liftN(fn.length, fn);\n});\n\n/**\n * A function which calls the two provided functions and returns the `&&`\n * of the results.\n * It returns the result of the first function if it is false-y and the result\n * of the second function otherwise. Note that this is short-circuited,\n * meaning that the second function will not be invoked if the first returns a\n * false-y value.\n *\n * In addition to functions, `R.both` also accepts any fantasy-land compatible\n * applicative functor.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category Logic\n * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n * @param {Function} f A predicate\n * @param {Function} g Another predicate\n * @return {Function} a function that applies its arguments to `f` and `g` and `&&`s their outputs together.\n * @see R.and\n * @example\n *\n *      var gt10 = R.gt(R.__, 10)\n *      var lt20 = R.lt(R.__, 20)\n *      var f = R.both(gt10, lt20);\n *      f(15); //=> true\n *      f(30); //=> false\n */\nvar both = _curry2(function both(f, g) {\n  return _isFunction(f) ?\n    function _both() {\n      return f.apply(this, arguments) && g.apply(this, arguments);\n    } :\n    lift(and)(f, g);\n});\n\n/**\n * Returns a curried equivalent of the provided function. The curried function\n * has two unusual capabilities. First, its arguments needn't be provided one\n * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\n * the following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (* -> a) -> (* -> a)\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curryN\n * @example\n *\n *      var addFourNumbers = (a, b, c, d) => a + b + c + d;\n *\n *      var curriedAddFourNumbers = R.curry(addFourNumbers);\n *      var f = curriedAddFourNumbers(1, 2);\n *      var g = f(3);\n *      g(4); //=> 10\n */\nvar curry = _curry1(function curry(fn) {\n  return curryN(fn.length, fn);\n});\n\n/**\n * Returns the result of calling its first argument with the remaining\n * arguments. This is occasionally useful as a converging function for\n * [`R.converge`](#converge): the first branch can produce a function while the\n * remaining branches produce values to be passed to that function as its\n * arguments.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Function\n * @sig (*... -> a),*... -> a\n * @param {Function} fn The function to apply to the remaining arguments.\n * @param {...*} args Any number of positional arguments.\n * @return {*}\n * @see R.apply\n * @example\n *\n *      R.call(R.add, 1, 2); //=> 3\n *\n *      var indentN = R.pipe(R.repeat(' '),\n *                           R.join(''),\n *                           R.replace(/^(?!$)/gm));\n *\n *      var format = R.converge(R.call, [\n *                                  R.pipe(R.prop('indent'), indentN),\n *                                  R.prop('value')\n *                              ]);\n *\n *      format({indent: 2, value: 'foo\\nbar\\nbaz\\n'}); //=> '  foo\\n  bar\\n  baz\\n'\n * @symb R.call(f, a, b) = f(a, b)\n */\nvar call = curry(function call(fn) {\n  return fn.apply(this, Array.prototype.slice.call(arguments, 1));\n});\n\n/**\n * `_makeFlat` is a helper function that returns a one-level or fully recursive\n * function based on the flag passed in.\n *\n * @private\n */\nfunction _makeFlat(recursive) {\n  return function flatt(list) {\n    var value, jlen, j;\n    var result = [];\n    var idx = 0;\n    var ilen = list.length;\n\n    while (idx < ilen) {\n      if (_isArrayLike(list[idx])) {\n        value = recursive ? flatt(list[idx]) : list[idx];\n        j = 0;\n        jlen = value.length;\n        while (j < jlen) {\n          result[result.length] = value[j];\n          j += 1;\n        }\n      } else {\n        result[result.length] = list[idx];\n      }\n      idx += 1;\n    }\n    return result;\n  };\n}\n\nfunction _forceReduced(x) {\n  return {\n    '@@transducer/value': x,\n    '@@transducer/reduced': true\n  };\n}\n\nvar preservingReduced = function(xf) {\n  return {\n    '@@transducer/init': _xfBase.init,\n    '@@transducer/result': function(result) {\n      return xf['@@transducer/result'](result);\n    },\n    '@@transducer/step': function(result, input) {\n      var ret = xf['@@transducer/step'](result, input);\n      return ret['@@transducer/reduced'] ? _forceReduced(ret) : ret;\n    }\n  };\n};\n\nvar _flatCat = function _xcat(xf) {\n  var rxf = preservingReduced(xf);\n  return {\n    '@@transducer/init': _xfBase.init,\n    '@@transducer/result': function(result) {\n      return rxf['@@transducer/result'](result);\n    },\n    '@@transducer/step': function(result, input) {\n      return !_isArrayLike(input) ? _reduce(rxf, result, [input]) : _reduce(rxf, result, input);\n    }\n  };\n};\n\nvar _xchain = _curry2(function _xchain(f, xf) {\n  return map(f, _flatCat(xf));\n});\n\n/**\n * `chain` maps a function over a list and concatenates the results. `chain`\n * is also known as `flatMap` in some libraries\n *\n * Dispatches to the `chain` method of the second argument, if present,\n * according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig Chain m => (a -> m b) -> m a -> m b\n * @param {Function} fn The function to map with\n * @param {Array} list The list to map over\n * @return {Array} The result of flat-mapping `list` with `fn`\n * @example\n *\n *      var duplicate = n => [n, n];\n *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]\n *\n *      R.chain(R.append, R.head)([1, 2, 3]); //=> [1, 2, 3, 1]\n */\nvar chain = _curry2(_dispatchable(['fantasy-land/chain', 'chain'], _xchain, function chain(fn, monad) {\n  if (typeof monad === 'function') {\n    return function(x) { return fn(monad(x))(x); };\n  }\n  return _makeFlat(false)(map(fn, monad));\n}));\n\n/**\n * Restricts a number to be within a range.\n *\n * Also works for other ordered types such as Strings and Dates.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Relation\n * @sig Ord a => a -> a -> a -> a\n * @param {Number} minimum The lower limit of the clamp (inclusive)\n * @param {Number} maximum The upper limit of the clamp (inclusive)\n * @param {Number} value Value to be clamped\n * @return {Number} Returns `minimum` when `val < minimum`, `maximum` when `val > maximum`, returns `val` otherwise\n * @example\n *\n *      R.clamp(1, 10, -5) // => 1\n *      R.clamp(1, 10, 15) // => 10\n *      R.clamp(1, 10, 4)  // => 4\n */\nvar clamp = _curry3(function clamp(min, max, value) {\n  if (min > max) {\n    throw new Error('min must not be greater than max in clamp(min, max, value)');\n  }\n  return value < min ? min :\n         value > max ? max :\n         value;\n});\n\nfunction _cloneRegExp(pattern) {\n  return new RegExp(pattern.source, (pattern.global     ? 'g' : '') +\n                                    (pattern.ignoreCase ? 'i' : '') +\n                                    (pattern.multiline  ? 'm' : '') +\n                                    (pattern.sticky     ? 'y' : '') +\n                                    (pattern.unicode    ? 'u' : ''));\n}\n\n/**\n * Gives a single-word string description of the (native) type of a value,\n * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not\n * attempt to distinguish user Object types any further, reporting them all as\n * 'Object'.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Type\n * @sig (* -> {*}) -> String\n * @param {*} val The value to test\n * @return {String}\n * @example\n *\n *      R.type({}); //=> \"Object\"\n *      R.type(1); //=> \"Number\"\n *      R.type(false); //=> \"Boolean\"\n *      R.type('s'); //=> \"String\"\n *      R.type(null); //=> \"Null\"\n *      R.type([]); //=> \"Array\"\n *      R.type(/[A-z]/); //=> \"RegExp\"\n *      R.type(() => {}); //=> \"Function\"\n *      R.type(undefined); //=> \"Undefined\"\n */\nvar type = _curry1(function type(val) {\n  return val === null      ? 'Null'      :\n         val === undefined ? 'Undefined' :\n         Object.prototype.toString.call(val).slice(8, -1);\n});\n\n/**\n * Copies an object.\n *\n * @private\n * @param {*} value The value to be copied\n * @param {Array} refFrom Array containing the source references\n * @param {Array} refTo Array containing the copied source references\n * @param {Boolean} deep Whether or not to perform deep cloning.\n * @return {*} The copied value.\n */\nfunction _clone(value, refFrom, refTo, deep) {\n  var copy = function copy(copiedValue) {\n    var len = refFrom.length;\n    var idx = 0;\n    while (idx < len) {\n      if (value === refFrom[idx]) {\n        return refTo[idx];\n      }\n      idx += 1;\n    }\n    refFrom[idx + 1] = value;\n    refTo[idx + 1] = copiedValue;\n    for (var key in value) {\n      copiedValue[key] = deep ?\n        _clone(value[key], refFrom, refTo, true) : value[key];\n    }\n    return copiedValue;\n  };\n  switch (type(value)) {\n    case 'Object':  return copy({});\n    case 'Array':   return copy([]);\n    case 'Date':    return new Date(value.valueOf());\n    case 'RegExp':  return _cloneRegExp(value);\n    default:        return value;\n  }\n}\n\n/**\n * Creates a deep copy of the value which may contain (nested) `Array`s and\n * `Object`s, `Number`s, `String`s, `Boolean`s and `Date`s. `Function`s are\n * assigned by reference rather than copied\n *\n * Dispatches to a `clone` method if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {*} -> {*}\n * @param {*} value The object or array to clone\n * @return {*} A deeply cloned copy of `val`\n * @example\n *\n *      var objects = [{}, {}, {}];\n *      var objectsClone = R.clone(objects);\n *      objects === objectsClone; //=> false\n *      objects[0] === objectsClone[0]; //=> false\n */\nvar clone = _curry1(function clone(value) {\n  return value != null && typeof value.clone === 'function' ?\n    value.clone() :\n    _clone(value, [], [], true);\n});\n\n/**\n * Makes a comparator function out of a function that reports whether the first\n * element is less than the second.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig ((a, b) -> Boolean) -> ((a, b) -> Number)\n * @param {Function} pred A predicate function of arity two which will return `true` if the first argument\n * is less than the second, `false` otherwise\n * @return {Function} A Function :: a -> b -> Int that returns `-1` if a < b, `1` if b < a, otherwise `0`\n * @example\n *\n *      var byAge = R.comparator((a, b) => a.age < b.age);\n *      var people = [\n *        // ...\n *      ];\n *      var peopleByIncreasingAge = R.sort(byAge, people);\n */\nvar comparator = _curry1(function comparator(pred) {\n  return function(a, b) {\n    return pred(a, b) ? -1 : pred(b, a) ? 1 : 0;\n  };\n});\n\n/**\n * A function that returns the `!` of its argument. It will return `true` when\n * passed false-y value, and `false` when passed a truth-y one.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig * -> Boolean\n * @param {*} a any value\n * @return {Boolean} the logical inverse of passed argument.\n * @see R.complement\n * @example\n *\n *      R.not(true); //=> false\n *      R.not(false); //=> true\n *      R.not(0); //=> true\n *      R.not(1); //=> false\n */\nvar not = _curry1(function not(a) {\n  return !a;\n});\n\n/**\n * Takes a function `f` and returns a function `g` such that if called with the same arguments\n * when `f` returns a \"truthy\" value, `g` returns `false` and when `f` returns a \"falsy\" value `g` returns `true`.\n *\n * `R.complement` may be applied to any functor\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category Logic\n * @sig (*... -> *) -> (*... -> Boolean)\n * @param {Function} f\n * @return {Function}\n * @see R.not\n * @example\n *\n *      var isNotNil = R.complement(R.isNil);\n *      isNil(null); //=> true\n *      isNotNil(null); //=> false\n *      isNil(7); //=> false\n *      isNotNil(7); //=> true\n */\nvar complement = lift(not);\n\nfunction _pipe(f, g) {\n  return function() {\n    return g.call(this, f.apply(this, arguments));\n  };\n}\n\n/**\n * This checks whether a function has a [methodname] function. If it isn't an\n * array it will execute that function otherwise it will default to the ramda\n * implementation.\n *\n * @private\n * @param {Function} fn ramda implemtation\n * @param {String} methodname property to check for a custom implementation\n * @return {Object} Whatever the return value of the method is.\n */\nfunction _checkForMethod(methodname, fn) {\n  return function() {\n    var length = arguments.length;\n    if (length === 0) {\n      return fn();\n    }\n    var obj = arguments[length - 1];\n    return (_isArray(obj) || typeof obj[methodname] !== 'function') ?\n      fn.apply(this, arguments) :\n      obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));\n  };\n}\n\n/**\n * Returns the elements of the given list or string (or object with a `slice`\n * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).\n *\n * Dispatches to the `slice` method of the third argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @sig Number -> Number -> String -> String\n * @param {Number} fromIndex The start index (inclusive).\n * @param {Number} toIndex The end index (exclusive).\n * @param {*} list\n * @return {*}\n * @example\n *\n *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']\n *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']\n *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']\n *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']\n *      R.slice(0, 3, 'ramda');                     //=> 'ram'\n */\nvar slice = _curry3(_checkForMethod('slice', function slice(fromIndex, toIndex, list) {\n  return Array.prototype.slice.call(list, fromIndex, toIndex);\n}));\n\n/**\n * Returns all but the first element of the given list or string (or object\n * with a `tail` method).\n *\n * Dispatches to the `slice` method of the first argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.head, R.init, R.last\n * @example\n *\n *      R.tail([1, 2, 3]);  //=> [2, 3]\n *      R.tail([1, 2]);     //=> [2]\n *      R.tail([1]);        //=> []\n *      R.tail([]);         //=> []\n *\n *      R.tail('abc');  //=> 'bc'\n *      R.tail('ab');   //=> 'b'\n *      R.tail('a');    //=> ''\n *      R.tail('');     //=> ''\n */\nvar tail = _curry1(_checkForMethod('tail', slice(1, Infinity)));\n\n/**\n * Performs left-to-right function composition. The leftmost function may have\n * any arity; the remaining functions must be unary.\n *\n * In some libraries this function is named `sequence`.\n *\n * **Note:** The result of pipe is not automatically curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)\n * @param {...Function} functions\n * @return {Function}\n * @see R.compose\n * @example\n *\n *      var f = R.pipe(Math.pow, R.negate, R.inc);\n *\n *      f(3, 4); // -(3^4) + 1\n * @symb R.pipe(f, g, h)(a, b) = h(g(f(a, b)))\n */\nfunction pipe() {\n  if (arguments.length === 0) {\n    throw new Error('pipe requires at least one argument');\n  }\n  return _arity(arguments[0].length,\n                reduce(_pipe, arguments[0], tail(arguments)));\n}\n\n/**\n * Returns a new list or string with the elements or characters in reverse\n * order.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {Array|String} list\n * @return {Array|String}\n * @example\n *\n *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]\n *      R.reverse([1, 2]);     //=> [2, 1]\n *      R.reverse([1]);        //=> [1]\n *      R.reverse([]);         //=> []\n *\n *      R.reverse('abc');      //=> 'cba'\n *      R.reverse('ab');       //=> 'ba'\n *      R.reverse('a');        //=> 'a'\n *      R.reverse('');         //=> ''\n */\nvar reverse = _curry1(function reverse(list) {\n  return _isString(list) ? list.split('').reverse().join('') :\n                           Array.prototype.slice.call(list, 0).reverse();\n});\n\n/**\n * Performs right-to-left function composition. The rightmost function may have\n * any arity; the remaining functions must be unary.\n *\n * **Note:** The result of compose is not automatically curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)\n * @param {...Function} ...functions The functions to compose\n * @return {Function}\n * @see R.pipe\n * @example\n *\n *      var classyGreeting = (firstName, lastName) => \"The name's \" + lastName + \", \" + firstName + \" \" + lastName\n *      var yellGreeting = R.compose(R.toUpper, classyGreeting);\n *      yellGreeting('James', 'Bond'); //=> \"THE NAME'S BOND, JAMES BOND\"\n *\n *      R.compose(Math.abs, R.add(1), R.multiply(2))(-4) //=> 7\n *\n * @symb R.compose(f, g, h)(a, b) = f(g(h(a, b)))\n */\nfunction compose() {\n  if (arguments.length === 0) {\n    throw new Error('compose requires at least one argument');\n  }\n  return pipe.apply(this, reverse(arguments));\n}\n\n/**\n * Returns the right-to-left Kleisli composition of the provided functions,\n * each of which must return a value of a type supported by [`chain`](#chain).\n *\n * `R.composeK(h, g, f)` is equivalent to `R.compose(R.chain(h), R.chain(g), f)`.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Function\n * @sig Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (a -> m z)\n * @param {...Function} ...functions The functions to compose\n * @return {Function}\n * @see R.pipeK\n * @example\n *\n *       //  get :: String -> Object -> Maybe *\n *       var get = R.curry((propName, obj) => Maybe(obj[propName]))\n *\n *       //  getStateCode :: Maybe String -> Maybe String\n *       var getStateCode = R.composeK(\n *         R.compose(Maybe.of, R.toUpper),\n *         get('state'),\n *         get('address'),\n *         get('user'),\n *       );\n *       getStateCode({\"user\":{\"address\":{\"state\":\"ny\"}}}); //=> Maybe.Just(\"NY\")\n *       getStateCode({}); //=> Maybe.Nothing()\n * @symb R.composeK(f, g, h)(a) = R.chain(f, R.chain(g, h(a)))\n */\nfunction composeK() {\n  if (arguments.length === 0) {\n    throw new Error('composeK requires at least one argument');\n  }\n  var init = Array.prototype.slice.call(arguments);\n  var last = init.pop();\n  return compose(compose.apply(this, map(chain, init)), last);\n}\n\nfunction _pipeP(f, g) {\n  return function() {\n    var ctx = this;\n    return f.apply(ctx, arguments).then(function(x) {\n      return g.call(ctx, x);\n    });\n  };\n}\n\n/**\n * Performs left-to-right composition of one or more Promise-returning\n * functions. The leftmost function may have any arity; the remaining functions\n * must be unary.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)\n * @param {...Function} functions\n * @return {Function}\n * @see R.composeP\n * @example\n *\n *      //  followersForUser :: String -> Promise [User]\n *      var followersForUser = R.pipeP(db.getUserById, db.getFollowers);\n */\nfunction pipeP() {\n  if (arguments.length === 0) {\n    throw new Error('pipeP requires at least one argument');\n  }\n  return _arity(arguments[0].length,\n                reduce(_pipeP, arguments[0], tail(arguments)));\n}\n\n/**\n * Performs right-to-left composition of one or more Promise-returning\n * functions. The rightmost function may have any arity; the remaining\n * functions must be unary.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)\n * @param {...Function} functions The functions to compose\n * @return {Function}\n * @see R.pipeP\n * @example\n *\n *      var db = {\n *        users: {\n *          JOE: {\n *            name: 'Joe',\n *            followers: ['STEVE', 'SUZY']\n *          }\n *        }\n *      }\n *\n *      // We'll pretend to do a db lookup which returns a promise\n *      var lookupUser = (userId) => Promise.resolve(db.users[userId])\n *      var lookupFollowers = (user) => Promise.resolve(user.followers)\n *      lookupUser('JOE').then(lookupFollowers)\n *\n *      //  followersForUser :: String -> Promise [UserId]\n *      var followersForUser = R.composeP(lookupFollowers, lookupUser);\n *      followersForUser('JOE').then(followers => console.log('Followers:', followers))\n *      // Followers: [\"STEVE\",\"SUZY\"]\n */\nfunction composeP() {\n  if (arguments.length === 0) {\n    throw new Error('composeP requires at least one argument');\n  }\n  return pipeP.apply(this, reverse(arguments));\n}\n\nfunction _arrayFromIterator(iter) {\n  var list = [];\n  var next;\n  while (!(next = iter.next()).done) {\n    list.push(next.value);\n  }\n  return list;\n}\n\nfunction _containsWith(pred, x, list) {\n  var idx = 0;\n  var len = list.length;\n\n  while (idx < len) {\n    if (pred(x, list[idx])) {\n      return true;\n    }\n    idx += 1;\n  }\n  return false;\n}\n\nfunction _functionName(f) {\n  // String(x => x) evaluates to \"x => x\", so the pattern may not match.\n  var match = String(f).match(/^function (\\w*)/);\n  return match == null ? '' : match[1];\n}\n\n/**\n * Returns true if its arguments are identical, false otherwise. Values are\n * identical if they reference the same memory. `NaN` is identical to `NaN`;\n * `0` and `-0` are not identical.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> a -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      var o = {};\n *      R.identical(o, o); //=> true\n *      R.identical(1, 1); //=> true\n *      R.identical(1, '1'); //=> false\n *      R.identical([], []); //=> false\n *      R.identical(0, -0); //=> false\n *      R.identical(NaN, NaN); //=> true\n */\nvar identical = _curry2(function identical(a, b) {\n  // SameValue algorithm\n  if (a === b) { // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    return a !== 0 || 1 / a === 1 / b;\n  } else {\n    // Step 6.a: NaN == NaN\n    return a !== a && b !== b;\n  }\n});\n\n/**\n * private _uniqContentEquals function.\n * That function is checking equality of 2 iterator contents with 2 assumptions\n * - iterators lengths are the same\n * - iterators values are unique\n *\n * false-positive result will be returned for comparision of, e.g.\n * - [1,2,3] and [1,2,3,4]\n * - [1,1,1] and [1,2,3]\n * */\n\nfunction _uniqContentEquals(aIterator, bIterator, stackA, stackB) {\n  var a = _arrayFromIterator(aIterator);\n  var b = _arrayFromIterator(bIterator);\n\n  function eq(_a, _b) {\n    return _equals(_a, _b, stackA.slice(), stackB.slice());\n  }\n\n  // if *a* array contains any element that is not included in *b*\n  return !_containsWith(function(b, aItem) {\n    return !_containsWith(eq, aItem, b);\n  }, b, a);\n}\n\nfunction _equals(a, b, stackA, stackB) {\n  if (identical(a, b)) {\n    return true;\n  }\n\n  var typeA = type(a);\n\n  if (typeA !== type(b)) {\n    return false;\n  }\n\n  if (a == null || b == null) {\n    return false;\n  }\n\n  if (typeof a['fantasy-land/equals'] === 'function' || typeof b['fantasy-land/equals'] === 'function') {\n    return typeof a['fantasy-land/equals'] === 'function' && a['fantasy-land/equals'](b) &&\n      typeof b['fantasy-land/equals'] === 'function' && b['fantasy-land/equals'](a);\n  }\n\n  if (typeof a.equals === 'function' || typeof b.equals === 'function') {\n    return typeof a.equals === 'function' && a.equals(b) &&\n      typeof b.equals === 'function' && b.equals(a);\n  }\n\n  switch (typeA) {\n    case 'Arguments':\n    case 'Array':\n    case 'Object':\n      if (typeof a.constructor === 'function' &&\n        _functionName(a.constructor) === 'Promise') {\n        return a === b;\n      }\n      break;\n    case 'Boolean':\n    case 'Number':\n    case 'String':\n      if (!(typeof a === typeof b && identical(a.valueOf(), b.valueOf()))) {\n        return false;\n      }\n      break;\n    case 'Date':\n      if (!identical(a.valueOf(), b.valueOf())) {\n        return false;\n      }\n      break;\n    case 'Error':\n      return a.name === b.name && a.message === b.message;\n    case 'RegExp':\n      if (!(a.source === b.source &&\n          a.global === b.global &&\n          a.ignoreCase === b.ignoreCase &&\n          a.multiline === b.multiline &&\n          a.sticky === b.sticky &&\n          a.unicode === b.unicode)) {\n        return false;\n      }\n      break;\n  }\n\n  var idx = stackA.length - 1;\n  while (idx >= 0) {\n    if (stackA[idx] === a) {\n      return stackB[idx] === b;\n    }\n    idx -= 1;\n  }\n\n  switch (typeA) {\n    case 'Map':\n      if (a.size !== b.size) {\n        return false;\n      }\n\n      return _uniqContentEquals(a.entries(), b.entries(), stackA.concat([a]), stackB.concat([b]));\n    case 'Set':\n      if (a.size !== b.size) {\n        return false;\n      }\n\n      return _uniqContentEquals(a.values(), b.values(), stackA.concat([a]), stackB.concat([b]));\n    case 'Arguments':\n    case 'Array':\n    case 'Object':\n    case 'Boolean':\n    case 'Number':\n    case 'String':\n    case 'Date':\n    case 'Error':\n    case 'RegExp':\n    case 'Int8Array':\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n    case 'Int16Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n    case 'Uint32Array':\n    case 'Float32Array':\n    case 'Float64Array':\n    case 'ArrayBuffer':\n      break;\n    default:\n      // Values of other types are only equal if identical.\n      return false;\n  }\n\n  var keysA = keys(a);\n  if (keysA.length !== keys(b).length) {\n    return false;\n  }\n\n  var extendedStackA = stackA.concat([a]);\n  var extendedStackB = stackB.concat([b]);\n\n  idx = keysA.length - 1;\n  while (idx >= 0) {\n    var key = keysA[idx];\n    if (!(_has(key, b) && _equals(b[key], a[key], extendedStackA, extendedStackB))) {\n      return false;\n    }\n    idx -= 1;\n  }\n  return true;\n}\n\n/**\n * Returns `true` if its arguments are equivalent, `false` otherwise. Handles\n * cyclical data structures.\n *\n * Dispatches symmetrically to the `equals` methods of both arguments, if\n * present.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> b -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      R.equals(1, 1); //=> true\n *      R.equals(1, '1'); //=> false\n *      R.equals([1, 2, 3], [1, 2, 3]); //=> true\n *\n *      var a = {}; a.v = a;\n *      var b = {}; b.v = b;\n *      R.equals(a, b); //=> true\n */\nvar equals = _curry2(function equals(a, b) {\n  return _equals(a, b, [], []);\n});\n\nfunction _indexOf(list, a, idx) {\n  var inf, item;\n  // Array.prototype.indexOf doesn't exist below IE9\n  if (typeof list.indexOf === 'function') {\n    switch (typeof a) {\n      case 'number':\n        if (a === 0) {\n          // manually crawl the list to distinguish between +0 and -0\n          inf = 1 / a;\n          while (idx < list.length) {\n            item = list[idx];\n            if (item === 0 && 1 / item === inf) {\n              return idx;\n            }\n            idx += 1;\n          }\n          return -1;\n        } else if (a !== a) {\n          // NaN\n          while (idx < list.length) {\n            item = list[idx];\n            if (typeof item === 'number' && item !== item) {\n              return idx;\n            }\n            idx += 1;\n          }\n          return -1;\n        }\n        // non-zero numbers can utilise Set\n        return list.indexOf(a, idx);\n\n      // all these types can utilise Set\n      case 'string':\n      case 'boolean':\n      case 'function':\n      case 'undefined':\n        return list.indexOf(a, idx);\n\n      case 'object':\n        if (a === null) {\n          // null can utilise Set\n          return list.indexOf(a, idx);\n        }\n    }\n  }\n  // anything else not covered above, defer to R.equals\n  while (idx < list.length) {\n    if (equals(list[idx], a)) {\n      return idx;\n    }\n    idx += 1;\n  }\n  return -1;\n}\n\nfunction _contains(a, list) {\n  return _indexOf(list, a, 0) >= 0;\n}\n\nfunction _quote(s) {\n  var escaped = s\n    .replace(/\\\\/g, '\\\\\\\\')\n    .replace(/[\\b]/g, '\\\\b')  // \\b matches word boundary; [\\b] matches backspace\n    .replace(/\\f/g, '\\\\f')\n    .replace(/\\n/g, '\\\\n')\n    .replace(/\\r/g, '\\\\r')\n    .replace(/\\t/g, '\\\\t')\n    .replace(/\\v/g, '\\\\v')\n    .replace(/\\0/g, '\\\\0');\n\n  return '\"' + escaped.replace(/\"/g, '\\\\\"') + '\"';\n}\n\n/**\n * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.\n */\nvar pad = function pad(n) { return (n < 10 ? '0' : '') + n; };\n\nvar _toISOString = typeof Date.prototype.toISOString === 'function' ?\n  function _toISOString(d) {\n    return d.toISOString();\n  } :\n  function _toISOString(d) {\n    return (\n      d.getUTCFullYear() + '-' +\n      pad(d.getUTCMonth() + 1) + '-' +\n      pad(d.getUTCDate()) + 'T' +\n      pad(d.getUTCHours()) + ':' +\n      pad(d.getUTCMinutes()) + ':' +\n      pad(d.getUTCSeconds()) + '.' +\n      (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z'\n    );\n  };\n\nfunction _complement(f) {\n  return function() {\n    return !f.apply(this, arguments);\n  };\n}\n\nfunction _filter(fn, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [];\n\n  while (idx < len) {\n    if (fn(list[idx])) {\n      result[result.length] = list[idx];\n    }\n    idx += 1;\n  }\n  return result;\n}\n\nfunction _isObject(x) {\n  return Object.prototype.toString.call(x) === '[object Object]';\n}\n\nfunction XFilter(f, xf) {\n  this.xf = xf;\n  this.f = f;\n}\nXFilter.prototype['@@transducer/init'] = _xfBase.init;\nXFilter.prototype['@@transducer/result'] = _xfBase.result;\nXFilter.prototype['@@transducer/step'] = function(result, input) {\n  return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;\n};\n\nvar _xfilter = _curry2(function _xfilter(f, xf) { return new XFilter(f, xf); });\n\n/**\n * Takes a predicate and a `Filterable`, and returns a new filterable of the\n * same type containing the members of the given filterable which satisfy the\n * given predicate. Filterable objects include plain objects or any object\n * that has a filter method such as `Array`.\n *\n * Dispatches to the `filter` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> f a\n * @param {Function} pred\n * @param {Array} filterable\n * @return {Array} Filterable\n * @see R.reject, R.transduce, R.addIndex\n * @example\n *\n *      var isEven = n => n % 2 === 0;\n *\n *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]\n *\n *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n */\nvar filter = _curry2(_dispatchable(['filter'], _xfilter, function(pred, filterable) {\n  return (\n    _isObject(filterable) ?\n      _reduce(function(acc, key) {\n        if (pred(filterable[key])) {\n          acc[key] = filterable[key];\n        }\n        return acc;\n      }, {}, keys(filterable)) :\n    // else\n      _filter(pred, filterable)\n  );\n}));\n\n/**\n * The complement of [`filter`](#filter).\n *\n * Acts as a transducer if a transformer is given in list position. Filterable\n * objects include plain objects or any object that has a filter method such\n * as `Array`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> f a\n * @param {Function} pred\n * @param {Array} filterable\n * @return {Array}\n * @see R.filter, R.transduce, R.addIndex\n * @example\n *\n *      var isOdd = (n) => n % 2 === 1;\n *\n *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]\n *\n *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n */\nvar reject = _curry2(function reject(pred, filterable) {\n  return filter(_complement(pred), filterable);\n});\n\nfunction _toString(x, seen) {\n  var recur = function recur(y) {\n    var xs = seen.concat([x]);\n    return _contains(y, xs) ? '<Circular>' : _toString(y, xs);\n  };\n\n  //  mapPairs :: (Object, [String]) -> [String]\n  var mapPairs = function(obj, keys$$1) {\n    return _map(function(k) { return _quote(k) + ': ' + recur(obj[k]); }, keys$$1.slice().sort());\n  };\n\n  switch (Object.prototype.toString.call(x)) {\n    case '[object Arguments]':\n      return '(function() { return arguments; }(' + _map(recur, x).join(', ') + '))';\n    case '[object Array]':\n      return '[' + _map(recur, x).concat(mapPairs(x, reject(function(k) { return /^\\d+$/.test(k); }, keys(x)))).join(', ') + ']';\n    case '[object Boolean]':\n      return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();\n    case '[object Date]':\n      return 'new Date(' + (isNaN(x.valueOf()) ? recur(NaN) : _quote(_toISOString(x))) + ')';\n    case '[object Null]':\n      return 'null';\n    case '[object Number]':\n      return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);\n    case '[object String]':\n      return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : _quote(x);\n    case '[object Undefined]':\n      return 'undefined';\n    default:\n      if (typeof x.toString === 'function') {\n        var repr = x.toString();\n        if (repr !== '[object Object]') {\n          return repr;\n        }\n      }\n      return '{' + mapPairs(x, keys(x)).join(', ') + '}';\n  }\n}\n\n/**\n * Returns the string representation of the given value. `eval`'ing the output\n * should result in a value equivalent to the input value. Many of the built-in\n * `toString` methods do not satisfy this requirement.\n *\n * If the given value is an `[object Object]` with a `toString` method other\n * than `Object.prototype.toString`, this method is invoked with no arguments\n * to produce the return value. This means user-defined constructor functions\n * can provide a suitable `toString` method. For example:\n *\n *     function Point(x, y) {\n *       this.x = x;\n *       this.y = y;\n *     }\n *\n *     Point.prototype.toString = function() {\n *       return 'new Point(' + this.x + ', ' + this.y + ')';\n *     };\n *\n *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category String\n * @sig * -> String\n * @param {*} val\n * @return {String}\n * @example\n *\n *      R.toString(42); //=> '42'\n *      R.toString('abc'); //=> '\"abc\"'\n *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'\n *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{\"bar\": 2, \"baz\": 3, \"foo\": 1}'\n *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date(\"2001-02-03T04:05:06.000Z\")'\n */\nvar toString$1 = _curry1(function toString(val) { return _toString(val, []); });\n\n/**\n * Returns the result of concatenating the given lists or strings.\n *\n * Note: `R.concat` expects both arguments to be of the same type,\n * unlike the native `Array.prototype.concat` method. It will throw\n * an error if you `concat` an Array with a non-Array value.\n *\n * Dispatches to the `concat` method of the first argument, if present.\n * Can also concatenate two members of a [fantasy-land\n * compatible semigroup](https://github.com/fantasyland/fantasy-land#semigroup).\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a] -> [a]\n * @sig String -> String -> String\n * @param {Array|String} firstList The first list\n * @param {Array|String} secondList The second list\n * @return {Array|String} A list consisting of the elements of `firstList` followed by the elements of\n * `secondList`.\n *\n * @example\n *\n *      R.concat('ABC', 'DEF'); // 'ABCDEF'\n *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n *      R.concat([], []); //=> []\n */\nvar concat = _curry2(function concat(a, b) {\n  if (_isArray(a)) {\n    if (_isArray(b)) {\n      return a.concat(b);\n    }\n    throw new TypeError(toString$1(b) + ' is not an array');\n  }\n  if (_isString(a)) {\n    if (_isString(b)) {\n      return a + b;\n    }\n    throw new TypeError(toString$1(b) + ' is not a string');\n  }\n  if (a != null && _isFunction(a['fantasy-land/concat'])) {\n    return a['fantasy-land/concat'](b);\n  }\n  if (a != null && _isFunction(a.concat)) {\n    return a.concat(b);\n  }\n  throw new TypeError(toString$1(a) + ' does not have a method named \"concat\" or \"fantasy-land/concat\"');\n});\n\n/**\n * Returns a function, `fn`, which encapsulates `if/else, if/else, ...` logic.\n * `R.cond` takes a list of [predicate, transformer] pairs. All of the arguments\n * to `fn` are applied to each of the predicates in turn until one returns a\n * \"truthy\" value, at which point `fn` returns the result of applying its\n * arguments to the corresponding transformer. If none of the predicates\n * matches, `fn` returns undefined.\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Logic\n * @sig [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)\n * @param {Array} pairs A list of [predicate, transformer]\n * @return {Function}\n * @example\n *\n *      var fn = R.cond([\n *        [R.equals(0),   R.always('water freezes at 0°C')],\n *        [R.equals(100), R.always('water boils at 100°C')],\n *        [R.T,           temp => 'nothing special happens at ' + temp + '°C']\n *      ]);\n *      fn(0); //=> 'water freezes at 0°C'\n *      fn(50); //=> 'nothing special happens at 50°C'\n *      fn(100); //=> 'water boils at 100°C'\n */\nvar cond = _curry1(function cond(pairs) {\n  var arity = reduce(max,\n                     0,\n                     map(function(pair) { return pair[0].length; }, pairs));\n  return _arity(arity, function() {\n    var idx = 0;\n    while (idx < pairs.length) {\n      if (pairs[idx][0].apply(this, arguments)) {\n        return pairs[idx][1].apply(this, arguments);\n      }\n      idx += 1;\n    }\n  });\n});\n\n/**\n * Wraps a constructor function inside a curried function that can be called\n * with the same arguments and returns the same type. The arity of the function\n * returned is specified to allow using variadic constructor functions.\n *\n * @func\n * @memberOf R\n * @since v0.4.0\n * @category Function\n * @sig Number -> (* -> {*}) -> (* -> {*})\n * @param {Number} n The arity of the constructor function.\n * @param {Function} Fn The constructor function to wrap.\n * @return {Function} A wrapped, curried constructor function.\n * @example\n *\n *      // Variadic Constructor function\n *      function Salad() {\n *        this.ingredients = arguments;\n *      }\n *\n *      Salad.prototype.recipe = function() {\n *        var instructions = R.map(ingredient => 'Add a dollop of ' + ingredient, this.ingredients);\n *        return R.join('\\n', instructions);\n *      };\n *\n *      var ThreeLayerSalad = R.constructN(3, Salad);\n *\n *      // Notice we no longer need the 'new' keyword, and the constructor is curried for 3 arguments.\n *      var salad = ThreeLayerSalad('Mayonnaise')('Potato Chips')('Ketchup');\n *\n *      console.log(salad.recipe());\n *      // Add a dollop of Mayonnaise\n *      // Add a dollop of Potato Chips\n *      // Add a dollop of Ketchup\n */\nvar constructN = _curry2(function constructN(n, Fn) {\n  if (n > 10) {\n    throw new Error('Constructor with greater than ten arguments');\n  }\n  if (n === 0) {\n    return function() { return new Fn(); };\n  }\n  return curry(nAry(n, function($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {\n    switch (arguments.length) {\n      case  1: return new Fn($0);\n      case  2: return new Fn($0, $1);\n      case  3: return new Fn($0, $1, $2);\n      case  4: return new Fn($0, $1, $2, $3);\n      case  5: return new Fn($0, $1, $2, $3, $4);\n      case  6: return new Fn($0, $1, $2, $3, $4, $5);\n      case  7: return new Fn($0, $1, $2, $3, $4, $5, $6);\n      case  8: return new Fn($0, $1, $2, $3, $4, $5, $6, $7);\n      case  9: return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8);\n      case 10: return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8, $9);\n    }\n  }));\n});\n\n/**\n * Wraps a constructor function inside a curried function that can be called\n * with the same arguments and returns the same type.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (* -> {*}) -> (* -> {*})\n * @param {Function} fn The constructor function to wrap.\n * @return {Function} A wrapped, curried constructor function.\n * @see R.invoker\n * @example\n *\n *      // Constructor function\n *      function Animal(kind) {\n *        this.kind = kind;\n *      };\n *      Animal.prototype.sighting = function() {\n *        return \"It's a \" + this.kind + \"!\";\n *      }\n *\n *      var AnimalConstructor = R.construct(Animal)\n *\n *      // Notice we no longer need the 'new' keyword:\n *      AnimalConstructor('Pig'); //=> {\"kind\": \"Pig\", \"sighting\": function (){...}};\n *\n *      var animalTypes = [\"Lion\", \"Tiger\", \"Bear\"];\n *      var animalSighting = R.invoker(0, 'sighting');\n *      var sightNewAnimal = R.compose(animalSighting, AnimalConstructor);\n *      R.map(sightNewAnimal, animalTypes); //=> [\"It's a Lion!\", \"It's a Tiger!\", \"It's a Bear!\"]\n */\nvar construct = _curry1(function construct(Fn) {\n  return constructN(Fn.length, Fn);\n});\n\n/**\n * Returns `true` if the specified value is equal, in [`R.equals`](#equals)\n * terms, to at least one element of the given list; `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> Boolean\n * @param {Object} a The item to compare against.\n * @param {Array} list The array to consider.\n * @return {Boolean} `true` if an equivalent item is in the list, `false` otherwise.\n * @see R.any\n * @example\n *\n *      R.contains(3, [1, 2, 3]); //=> true\n *      R.contains(4, [1, 2, 3]); //=> false\n *      R.contains({ name: 'Fred' }, [{ name: 'Fred' }]); //=> true\n *      R.contains([42], [[42]]); //=> true\n */\nvar contains$1 = _curry2(_contains);\n\n/**\n * Accepts a converging function and a list of branching functions and returns\n * a new function. When invoked, this new function is applied to some\n * arguments, each branching function is applied to those same arguments. The\n * results of each branching function are passed as arguments to the converging\n * function to produce the return value.\n *\n * @func\n * @memberOf R\n * @since v0.4.2\n * @category Function\n * @sig ((x1, x2, ...) -> z) -> [((a, b, ...) -> x1), ((a, b, ...) -> x2), ...] -> (a -> b -> ... -> z)\n * @param {Function} after A function. `after` will be invoked with the return values of\n *        `fn1` and `fn2` as its arguments.\n * @param {Array} functions A list of functions.\n * @return {Function} A new function.\n * @see R.useWith\n * @example\n *\n *      var average = R.converge(R.divide, [R.sum, R.length])\n *      average([1, 2, 3, 4, 5, 6, 7]) //=> 4\n *\n *      var strangeConcat = R.converge(R.concat, [R.toUpper, R.toLower])\n *      strangeConcat(\"Yodel\") //=> \"YODELyodel\"\n *\n * @symb R.converge(f, [g, h])(a, b) = f(g(a, b), h(a, b))\n */\nvar converge = _curry2(function converge(after, fns) {\n  return curryN(reduce(max, 0, pluck('length', fns)), function() {\n    var args = arguments;\n    var context = this;\n    return after.apply(context, _map(function(fn) {\n      return fn.apply(context, args);\n    }, fns));\n  });\n});\n\nfunction XReduceBy(valueFn, valueAcc, keyFn, xf) {\n  this.valueFn = valueFn;\n  this.valueAcc = valueAcc;\n  this.keyFn = keyFn;\n  this.xf = xf;\n  this.inputs = {};\n}\nXReduceBy.prototype['@@transducer/init'] = _xfBase.init;\nXReduceBy.prototype['@@transducer/result'] = function(result) {\n  var key;\n  for (key in this.inputs) {\n    if (_has(key, this.inputs)) {\n      result = this.xf['@@transducer/step'](result, this.inputs[key]);\n      if (result['@@transducer/reduced']) {\n        result = result['@@transducer/value'];\n        break;\n      }\n    }\n  }\n  this.inputs = null;\n  return this.xf['@@transducer/result'](result);\n};\nXReduceBy.prototype['@@transducer/step'] = function(result, input) {\n  var key = this.keyFn(input);\n  this.inputs[key] = this.inputs[key] || [key, this.valueAcc];\n  this.inputs[key][1] = this.valueFn(this.inputs[key][1], input);\n  return result;\n};\n\nvar _xreduceBy = _curryN(4, [],\n               function _xreduceBy(valueFn, valueAcc, keyFn, xf) {\n                 return new XReduceBy(valueFn, valueAcc, keyFn, xf);\n               });\n\n/**\n * Groups the elements of the list according to the result of calling\n * the String-returning function `keyFn` on each element and reduces the elements\n * of each group to a single value via the reducer function `valueFn`.\n *\n * This function is basically a more general [`groupBy`](#groupBy) function.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category List\n * @sig ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}\n * @param {Function} valueFn The function that reduces the elements of each group to a single\n *        value. Receives two values, accumulator for a particular group and the current element.\n * @param {*} acc The (initial) accumulator value for each group.\n * @param {Function} keyFn The function that maps the list's element into a key.\n * @param {Array} list The array to group.\n * @return {Object} An object with the output of `keyFn` for keys, mapped to the output of\n *         `valueFn` for elements which produced that key when passed to `keyFn`.\n * @see R.groupBy, R.reduce\n * @example\n *\n *      var reduceToNamesBy = R.reduceBy((acc, student) => acc.concat(student.name), []);\n *      var namesByGrade = reduceToNamesBy(function(student) {\n *        var score = student.score;\n *        return score < 65 ? 'F' :\n *               score < 70 ? 'D' :\n *               score < 80 ? 'C' :\n *               score < 90 ? 'B' : 'A';\n *      });\n *      var students = [{name: 'Lucy', score: 92},\n *                      {name: 'Drew', score: 85},\n *                      // ...\n *                      {name: 'Bart', score: 62}];\n *      namesByGrade(students);\n *      // {\n *      //   'A': ['Lucy'],\n *      //   'B': ['Drew']\n *      //   // ...,\n *      //   'F': ['Bart']\n *      // }\n */\nvar reduceBy = _curryN(4, [], _dispatchable([], _xreduceBy,\n  function reduceBy(valueFn, valueAcc, keyFn, list) {\n    return _reduce(function(acc, elt) {\n      var key = keyFn(elt);\n      acc[key] = valueFn(_has(key, acc) ? acc[key] : valueAcc, elt);\n      return acc;\n    }, {}, list);\n  }));\n\n/**\n * Counts the elements of a list according to how many match each value of a\n * key generated by the supplied function. Returns an object mapping the keys\n * produced by `fn` to the number of occurrences in the list. Note that all\n * keys are coerced to strings because of how JavaScript objects work.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig (a -> String) -> [a] -> {*}\n * @param {Function} fn The function used to map values to keys.\n * @param {Array} list The list to count elements from.\n * @return {Object} An object mapping keys to number of occurrences in the list.\n * @example\n *\n *      var numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];\n *      R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}\n *\n *      var letters = ['a', 'b', 'A', 'a', 'B', 'c'];\n *      R.countBy(R.toLower)(letters);   //=> {'a': 3, 'b': 2, 'c': 1}\n */\nvar countBy = reduceBy(function(acc, elem) { return acc + 1; }, 0);\n\n/**\n * Decrements its argument.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Math\n * @sig Number -> Number\n * @param {Number} n\n * @return {Number} n - 1\n * @see R.inc\n * @example\n *\n *      R.dec(42); //=> 41\n */\nvar dec = add(-1);\n\n/**\n * Returns the second argument if it is not `null`, `undefined` or `NaN`;\n * otherwise the first argument is returned.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Logic\n * @sig a -> b -> a | b\n * @param {a} default The default value.\n * @param {b} val `val` will be returned instead of `default` unless `val` is `null`, `undefined` or `NaN`.\n * @return {*} The second value if it is not `null`, `undefined` or `NaN`, otherwise the default value\n * @example\n *\n *      var defaultTo42 = R.defaultTo(42);\n *\n *      defaultTo42(null);  //=> 42\n *      defaultTo42(undefined);  //=> 42\n *      defaultTo42('Ramda');  //=> 'Ramda'\n *      // parseInt('string') results in NaN\n *      defaultTo42(parseInt('string')); //=> 42\n */\nvar defaultTo = _curry2(function defaultTo(d, v) {\n  return v == null || v !== v ? d : v;\n});\n\n/**\n * Makes a descending comparator function out of a function that returns a value\n * that can be compared with `<` and `>`.\n *\n * @func\n * @memberOf R\n * @since v0.23.0\n * @category Function\n * @sig Ord b => (a -> b) -> a -> a -> Number\n * @param {Function} fn A function of arity one that returns a value that can be compared\n * @param {*} a The first item to be compared.\n * @param {*} b The second item to be compared.\n * @return {Number} `-1` if fn(a) > fn(b), `1` if fn(b) > fn(a), otherwise `0`\n * @see R.ascend\n * @example\n *\n *      var byAge = R.descend(R.prop('age'));\n *      var people = [\n *        // ...\n *      ];\n *      var peopleByOldestFirst = R.sort(byAge, people);\n */\nvar descend = _curry3(function descend(fn, a, b) {\n  var aa = fn(a);\n  var bb = fn(b);\n  return aa > bb ? -1 : aa < bb ? 1 : 0;\n});\n\n/**\n * Finds the set (i.e. no duplicates) of all elements in the first list not\n * contained in the second list. Objects and Arrays are compared in terms of\n * value equality, not reference equality.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` that are not in `list2`.\n * @see R.differenceWith, R.symmetricDifference, R.symmetricDifferenceWith, R.without\n * @example\n *\n *      R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]\n *      R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]\n *      R.difference([{a: 1}, {b: 2}], [{a: 1}, {c: 3}]) //=> [{b: 2}]\n */\nvar difference = _curry2(function difference(first, second) {\n  var out = [];\n  var idx = 0;\n  var firstLen = first.length;\n  while (idx < firstLen) {\n    if (!_contains(first[idx], second) && !_contains(first[idx], out)) {\n      out[out.length] = first[idx];\n    }\n    idx += 1;\n  }\n  return out;\n});\n\n/**\n * Finds the set (i.e. no duplicates) of all elements in the first list not\n * contained in the second list. Duplication is determined according to the\n * value returned by applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` that are not in `list2`.\n * @see R.difference, R.symmetricDifference, R.symmetricDifferenceWith\n * @example\n *\n *      var cmp = (x, y) => x.a === y.a;\n *      var l1 = [{a: 1}, {a: 2}, {a: 3}];\n *      var l2 = [{a: 3}, {a: 4}];\n *      R.differenceWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}]\n */\nvar differenceWith = _curry3(function differenceWith(pred, first, second) {\n  var out = [];\n  var idx = 0;\n  var firstLen = first.length;\n  while (idx < firstLen) {\n    if (!_containsWith(pred, first[idx], second) &&\n        !_containsWith(pred, first[idx], out)) {\n      out.push(first[idx]);\n    }\n    idx += 1;\n  }\n  return out;\n});\n\n/**\n * Returns a new object that does not contain a `prop` property.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Object\n * @sig String -> {k: v} -> {k: v}\n * @param {String} prop The name of the property to dissociate\n * @param {Object} obj The object to clone\n * @return {Object} A new object equivalent to the original but without the specified property\n * @see R.assoc\n * @example\n *\n *      R.dissoc('b', {a: 1, b: 2, c: 3}); //=> {a: 1, c: 3}\n */\nvar dissoc = _curry2(function dissoc(prop, obj) {\n  var result = {};\n  for (var p in obj) {\n    result[p] = obj[p];\n  }\n  delete result[prop];\n  return result;\n});\n\n/**\n * Removes the sub-list of `list` starting at index `start` and containing\n * `count` elements. _Note that this is not destructive_: it returns a copy of\n * the list with the changes.\n * <small>No lists have been harmed in the application of this function.</small>\n *\n * @func\n * @memberOf R\n * @since v0.2.2\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @param {Number} start The position to start removing elements\n * @param {Number} count The number of elements to remove\n * @param {Array} list The list to remove from\n * @return {Array} A new Array with `count` elements from `start` removed.\n * @example\n *\n *      R.remove(2, 3, [1,2,3,4,5,6,7,8]); //=> [1,2,6,7,8]\n */\nvar remove = _curry3(function remove(start, count, list) {\n  var result = Array.prototype.slice.call(list, 0);\n  result.splice(start, count);\n  return result;\n});\n\n/**\n * Returns a new copy of the array with the element at the provided index\n * replaced with the given value.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig Number -> a -> [a] -> [a]\n * @param {Number} idx The index to update.\n * @param {*} x The value to exist at the given index of the returned array.\n * @param {Array|Arguments} list The source array-like object to be updated.\n * @return {Array} A copy of `list` with the value at index `idx` replaced with `x`.\n * @see R.adjust\n * @example\n *\n *      R.update(1, 11, [0, 1, 2]);     //=> [0, 11, 2]\n *      R.update(1)(11)([0, 1, 2]);     //=> [0, 11, 2]\n * @symb R.update(-1, a, [b, c]) = [b, a]\n * @symb R.update(0, a, [b, c]) = [a, c]\n * @symb R.update(1, a, [b, c]) = [b, a]\n */\nvar update = _curry3(function update(idx, x, list) {\n  return adjust(always(x), idx, list);\n});\n\n/**\n * Makes a shallow clone of an object, omitting the property at the given path.\n * Note that this copies and flattens prototype properties onto the new object\n * as well. All non-primitive properties are copied by reference.\n *\n * @func\n * @memberOf R\n * @since v0.11.0\n * @category Object\n * @typedefn Idx = String | Int\n * @sig [Idx] -> {k: v} -> {k: v}\n * @param {Array} path The path to the value to omit\n * @param {Object} obj The object to clone\n * @return {Object} A new object without the property at path\n * @see R.assocPath\n * @example\n *\n *      R.dissocPath(['a', 'b', 'c'], {a: {b: {c: 42}}}); //=> {a: {b: {}}}\n */\nvar dissocPath = _curry2(function dissocPath(path, obj) {\n  switch (path.length) {\n    case 0:\n      return obj;\n    case 1:\n      return _isInteger(path[0]) ? remove(path[0], 1, obj) : dissoc(path[0], obj);\n    default:\n      var head = path[0];\n      var tail = Array.prototype.slice.call(path, 1);\n      if (obj[head] == null) {\n        return obj;\n      } else if (_isInteger(path[0])) {\n        return update(head, dissocPath(tail, obj[head]), obj);\n      } else {\n        return assoc(head, dissocPath(tail, obj[head]), obj);\n      }\n  }\n});\n\n/**\n * Divides two numbers. Equivalent to `a / b`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a The first value.\n * @param {Number} b The second value.\n * @return {Number} The result of `a / b`.\n * @see R.multiply\n * @example\n *\n *      R.divide(71, 100); //=> 0.71\n *\n *      var half = R.divide(R.__, 2);\n *      half(42); //=> 21\n *\n *      var reciprocal = R.divide(1);\n *      reciprocal(4);   //=> 0.25\n */\nvar divide = _curry2(function divide(a, b) { return a / b; });\n\nfunction XDrop(n, xf) {\n  this.xf = xf;\n  this.n = n;\n}\nXDrop.prototype['@@transducer/init'] = _xfBase.init;\nXDrop.prototype['@@transducer/result'] = _xfBase.result;\nXDrop.prototype['@@transducer/step'] = function(result, input) {\n  if (this.n > 0) {\n    this.n -= 1;\n    return result;\n  }\n  return this.xf['@@transducer/step'](result, input);\n};\n\nvar _xdrop = _curry2(function _xdrop(n, xf) { return new XDrop(n, xf); });\n\n/**\n * Returns all but the first `n` elements of the given list, string, or\n * transducer/transformer (or object with a `drop` method).\n *\n * Dispatches to the `drop` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n\n * @param {*} list\n * @return {*} A copy of list without the first `n` elements\n * @see R.take, R.transduce, R.dropLast, R.dropWhile\n * @example\n *\n *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']\n *      R.drop(3, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(4, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(3, 'ramda');               //=> 'da'\n */\nvar drop = _curry2(_dispatchable(['drop'], _xdrop, function drop(n, xs) {\n  return slice(Math.max(0, n), Infinity, xs);\n}));\n\nfunction XTake(n, xf) {\n  this.xf = xf;\n  this.n = n;\n  this.i = 0;\n}\nXTake.prototype['@@transducer/init'] = _xfBase.init;\nXTake.prototype['@@transducer/result'] = _xfBase.result;\nXTake.prototype['@@transducer/step'] = function(result, input) {\n  this.i += 1;\n  var ret = this.n === 0 ? result : this.xf['@@transducer/step'](result, input);\n  return this.n >= 0 && this.i >= this.n ? _reduced(ret) : ret;\n};\n\nvar _xtake = _curry2(function _xtake(n, xf) { return new XTake(n, xf); });\n\n/**\n * Returns the first `n` elements of the given list, string, or\n * transducer/transformer (or object with a `take` method).\n *\n * Dispatches to the `take` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n\n * @param {*} list\n * @return {*}\n * @see R.drop\n * @example\n *\n *      R.take(1, ['foo', 'bar', 'baz']); //=> ['foo']\n *      R.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n *      R.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.take(3, 'ramda');               //=> 'ram'\n *\n *      var personnel = [\n *        'Dave Brubeck',\n *        'Paul Desmond',\n *        'Eugene Wright',\n *        'Joe Morello',\n *        'Gerry Mulligan',\n *        'Bob Bates',\n *        'Joe Dodge',\n *        'Ron Crotty'\n *      ];\n *\n *      var takeFive = R.take(5);\n *      takeFive(personnel);\n *      //=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']\n * @symb R.take(-1, [a, b]) = [a, b]\n * @symb R.take(0, [a, b]) = []\n * @symb R.take(1, [a, b]) = [a]\n * @symb R.take(2, [a, b]) = [a, b]\n */\nvar take = _curry2(_dispatchable(['take'], _xtake, function take(n, xs) {\n  return slice(0, n < 0 ? Infinity : n, xs);\n}));\n\nfunction dropLast$2(n, xs) {\n  return take(n < xs.length ? xs.length - n : 0, xs);\n}\n\nfunction XDropLast(n, xf) {\n  this.xf = xf;\n  this.pos = 0;\n  this.full = false;\n  this.acc = new Array(n);\n}\nXDropLast.prototype['@@transducer/init'] = _xfBase.init;\nXDropLast.prototype['@@transducer/result'] =  function(result) {\n  this.acc = null;\n  return this.xf['@@transducer/result'](result);\n};\nXDropLast.prototype['@@transducer/step'] = function(result, input) {\n  if (this.full) {\n    result = this.xf['@@transducer/step'](result, this.acc[this.pos]);\n  }\n  this.store(input);\n  return result;\n};\nXDropLast.prototype.store = function(input) {\n  this.acc[this.pos] = input;\n  this.pos += 1;\n  if (this.pos === this.acc.length) {\n    this.pos = 0;\n    this.full = true;\n  }\n};\n\nvar _xdropLast = _curry2(function _xdropLast(n, xf) { return new XDropLast(n, xf); });\n\n/**\n * Returns a list containing all but the last `n` elements of the given `list`.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n The number of elements of `list` to skip.\n * @param {Array} list The list of elements to consider.\n * @return {Array} A copy of the list with only the first `list.length - n` elements\n * @see R.takeLast, R.drop, R.dropWhile, R.dropLastWhile\n * @example\n *\n *      R.dropLast(1, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n *      R.dropLast(2, ['foo', 'bar', 'baz']); //=> ['foo']\n *      R.dropLast(3, ['foo', 'bar', 'baz']); //=> []\n *      R.dropLast(4, ['foo', 'bar', 'baz']); //=> []\n *      R.dropLast(3, 'ramda');               //=> 'ra'\n */\nvar dropLast = _curry2(_dispatchable([], _xdropLast, dropLast$2));\n\nfunction dropLastWhile$2(pred, xs) {\n  var idx = xs.length - 1;\n  while (idx >= 0 && pred(xs[idx])) {\n    idx -= 1;\n  }\n  return slice(0, idx + 1, xs);\n}\n\nfunction XDropLastWhile(fn, xf) {\n  this.f = fn;\n  this.retained = [];\n  this.xf = xf;\n}\nXDropLastWhile.prototype['@@transducer/init'] = _xfBase.init;\nXDropLastWhile.prototype['@@transducer/result'] = function(result) {\n  this.retained = null;\n  return this.xf['@@transducer/result'](result);\n};\nXDropLastWhile.prototype['@@transducer/step'] = function(result, input) {\n  return this.f(input) ? this.retain(result, input)\n                       : this.flush(result, input);\n};\nXDropLastWhile.prototype.flush = function(result, input) {\n  result = _reduce(\n    this.xf['@@transducer/step'],\n    result,\n    this.retained\n  );\n  this.retained = [];\n  return this.xf['@@transducer/step'](result, input);\n};\nXDropLastWhile.prototype.retain = function(result, input) {\n  this.retained.push(input);\n  return result;\n};\n\nvar _xdropLastWhile = _curry2(function _xdropLastWhile(fn, xf) { return new XDropLastWhile(fn, xf); });\n\n/**\n * Returns a new list excluding all the tailing elements of a given list which\n * satisfy the supplied predicate function. It passes each value from the right\n * to the supplied predicate function, skipping elements until the predicate\n * function returns a `falsy` value. The predicate function is applied to one argument:\n * *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} predicate The function to be called on each element\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array without any trailing elements that return `falsy` values from the `predicate`.\n * @see R.takeLastWhile, R.addIndex, R.drop, R.dropWhile\n * @example\n *\n *      var lteThree = x => x <= 3;\n *\n *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]\n *\n *      R.dropLastWhile(x => x !== 'd' , 'Ramda'); //=> 'Ramd'\n */\nvar dropLastWhile = _curry2(_dispatchable([], _xdropLastWhile, dropLastWhile$2));\n\nfunction XDropRepeatsWith(pred, xf) {\n  this.xf = xf;\n  this.pred = pred;\n  this.lastValue = undefined;\n  this.seenFirstValue = false;\n}\n\nXDropRepeatsWith.prototype['@@transducer/init'] = _xfBase.init;\nXDropRepeatsWith.prototype['@@transducer/result'] = _xfBase.result;\nXDropRepeatsWith.prototype['@@transducer/step'] = function(result, input) {\n  var sameAsLast = false;\n  if (!this.seenFirstValue) {\n    this.seenFirstValue = true;\n  } else if (this.pred(this.lastValue, input)) {\n    sameAsLast = true;\n  }\n  this.lastValue = input;\n  return sameAsLast ? result : this.xf['@@transducer/step'](result, input);\n};\n\nvar _xdropRepeatsWith = _curry2(function _xdropRepeatsWith(pred, xf) { return new XDropRepeatsWith(pred, xf); });\n\n/**\n * Returns the nth element of the given list or string. If n is negative the\n * element at index length + n is returned.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> [a] -> a | Undefined\n * @sig Number -> String -> String\n * @param {Number} offset\n * @param {*} list\n * @return {*}\n * @example\n *\n *      var list = ['foo', 'bar', 'baz', 'quux'];\n *      R.nth(1, list); //=> 'bar'\n *      R.nth(-1, list); //=> 'quux'\n *      R.nth(-99, list); //=> undefined\n *\n *      R.nth(2, 'abc'); //=> 'c'\n *      R.nth(3, 'abc'); //=> ''\n * @symb R.nth(-1, [a, b, c]) = c\n * @symb R.nth(0, [a, b, c]) = a\n * @symb R.nth(1, [a, b, c]) = b\n */\nvar nth = _curry2(function nth(offset, list) {\n  var idx = offset < 0 ? list.length + offset : offset;\n  return _isString(list) ? list.charAt(idx) : list[idx];\n});\n\n/**\n * Returns the last element of the given list or string.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig [a] -> a | Undefined\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.init, R.head, R.tail\n * @example\n *\n *      R.last(['fi', 'fo', 'fum']); //=> 'fum'\n *      R.last([]); //=> undefined\n *\n *      R.last('abc'); //=> 'c'\n *      R.last(''); //=> ''\n */\nvar last = nth(-1);\n\n/**\n * Returns a new list without any consecutively repeating elements. Equality is\n * determined by applying the supplied predicate to each pair of consecutive elements. The\n * first element in a series of equal elements will be preserved.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig ((a, a) -> Boolean) -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list The array to consider.\n * @return {Array} `list` without repeating elements.\n * @see R.transduce\n * @example\n *\n *      var l = [1, -1, 1, 3, 4, -4, -4, -5, 5, 3, 3];\n *      R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 4, -5, 3]\n */\nvar dropRepeatsWith = _curry2(_dispatchable([], _xdropRepeatsWith, function dropRepeatsWith(pred, list) {\n  var result = [];\n  var idx = 1;\n  var len = list.length;\n  if (len !== 0) {\n    result[0] = list[0];\n    while (idx < len) {\n      if (!pred(last(result), list[idx])) {\n        result[result.length] = list[idx];\n      }\n      idx += 1;\n    }\n  }\n  return result;\n}));\n\n/**\n * Returns a new list without any consecutively repeating elements.\n * [`R.equals`](#equals) is used to determine equality.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig [a] -> [a]\n * @param {Array} list The array to consider.\n * @return {Array} `list` without repeating elements.\n * @see R.transduce\n * @example\n *\n *     R.dropRepeats([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]\n */\nvar dropRepeats = _curry1(_dispatchable([],\n                                                      _xdropRepeatsWith(equals),\n                                                      dropRepeatsWith(equals)));\n\nfunction XDropWhile(f, xf) {\n  this.xf = xf;\n  this.f = f;\n}\nXDropWhile.prototype['@@transducer/init'] = _xfBase.init;\nXDropWhile.prototype['@@transducer/result'] = _xfBase.result;\nXDropWhile.prototype['@@transducer/step'] = function(result, input) {\n  if (this.f) {\n    if (this.f(input)) {\n      return result;\n    }\n    this.f = null;\n  }\n  return this.xf['@@transducer/step'](result, input);\n};\n\nvar _xdropWhile = _curry2(function _xdropWhile(f, xf) { return new XDropWhile(f, xf); });\n\n/**\n * Returns a new list excluding the leading elements of a given list which\n * satisfy the supplied predicate function. It passes each value to the supplied\n * predicate function, skipping elements while the predicate function returns\n * `true`. The predicate function is applied to one argument: *(value)*.\n *\n * Dispatches to the `dropWhile` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.takeWhile, R.transduce, R.addIndex\n * @example\n *\n *      var lteTwo = x => x <= 2;\n *\n *      R.dropWhile(lteTwo, [1, 2, 3, 4, 3, 2, 1]); //=> [3, 4, 3, 2, 1]\n *\n *      R.dropWhile(x => x !== 'd' , 'Ramda'); //=> 'da'\n */\nvar dropWhile = _curry2(_dispatchable(['dropWhile'], _xdropWhile, function dropWhile(pred, xs) {\n  var idx = 0;\n  var len = xs.length;\n  while (idx < len && pred(xs[idx])) {\n    idx += 1;\n  }\n  return slice(idx, Infinity, xs);\n}));\n\n/**\n * Returns `true` if one or both of its arguments are `true`. Returns `false`\n * if both arguments are `false`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig a -> b -> a | b\n * @param {Any} a\n * @param {Any} b\n * @return {Any} the first argument if truthy, otherwise the second argument.\n * @see R.either\n * @example\n *\n *      R.or(true, true); //=> true\n *      R.or(true, false); //=> true\n *      R.or(false, true); //=> true\n *      R.or(false, false); //=> false\n */\nvar or = _curry2(function or(a, b) {\n  return a || b;\n});\n\n/**\n * A function wrapping calls to the two functions in an `||` operation,\n * returning the result of the first function if it is truth-y and the result\n * of the second function otherwise. Note that this is short-circuited,\n * meaning that the second function will not be invoked if the first returns a\n * truth-y value.\n *\n * In addition to functions, `R.either` also accepts any fantasy-land compatible\n * applicative functor.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category Logic\n * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n * @param {Function} f a predicate\n * @param {Function} g another predicate\n * @return {Function} a function that applies its arguments to `f` and `g` and `||`s their outputs together.\n * @see R.or\n * @example\n *\n *      var gt10 = x => x > 10;\n *      var even = x => x % 2 === 0;\n *      var f = R.either(gt10, even);\n *      f(101); //=> true\n *      f(8); //=> true\n */\nvar either = _curry2(function either(f, g) {\n  return _isFunction(f) ?\n    function _either() {\n      return f.apply(this, arguments) || g.apply(this, arguments);\n    } :\n    lift(or)(f, g);\n});\n\n/**\n * Returns the empty value of its argument's type. Ramda defines the empty\n * value of Array (`[]`), Object (`{}`), String (`''`), and Arguments. Other\n * types are supported if they define `<Type>.empty`,\n * `<Type>.prototype.empty` or implement the\n * [FantasyLand Monoid spec](https://github.com/fantasyland/fantasy-land#monoid).\n *\n * Dispatches to the `empty` method of the first argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Function\n * @sig a -> a\n * @param {*} x\n * @return {*}\n * @example\n *\n *      R.empty(Just(42));      //=> Nothing()\n *      R.empty([1, 2, 3]);     //=> []\n *      R.empty('unicorns');    //=> ''\n *      R.empty({x: 1, y: 2});  //=> {}\n */\nvar empty = _curry1(function empty(x) {\n  return (\n    (x != null && typeof x['fantasy-land/empty'] === 'function') ?\n      x['fantasy-land/empty']() :\n    (x != null && x.constructor != null && typeof x.constructor['fantasy-land/empty'] === 'function') ?\n      x.constructor['fantasy-land/empty']() :\n    (x != null && typeof x.empty === 'function') ?\n      x.empty() :\n    (x != null && x.constructor != null && typeof x.constructor.empty === 'function') ?\n      x.constructor.empty() :\n    _isArray(x) ?\n      [] :\n    _isString(x) ?\n      '' :\n    _isObject(x) ?\n      {} :\n    _isArguments(x) ?\n      (function() { return arguments; }()) :\n    // else\n      void 0\n  );\n});\n\n/**\n * Returns a new list containing the last `n` elements of the given list.\n * If `n > list.length`, returns a list of `list.length` elements.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n The number of elements to return.\n * @param {Array} xs The collection to consider.\n * @return {Array}\n * @see R.dropLast\n * @example\n *\n *      R.takeLast(1, ['foo', 'bar', 'baz']); //=> ['baz']\n *      R.takeLast(2, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n *      R.takeLast(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.takeLast(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.takeLast(3, 'ramda');               //=> 'mda'\n */\nvar takeLast = _curry2(function takeLast(n, xs) {\n  return drop(n >= 0 ? xs.length - n : 0, xs);\n});\n\n/**\n * Checks if a list ends with the provided values\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category List\n * @sig [a] -> Boolean\n * @sig String -> Boolean\n * @param {*} suffix\n * @param {*} list\n * @return {Boolean}\n * @example\n *\n *      R.endsWith('c', 'abc')                //=> true\n *      R.endsWith('b', 'abc')                //=> false\n *      R.endsWith(['c'], ['a', 'b', 'c'])    //=> true\n *      R.endsWith(['b'], ['a', 'b', 'c'])    //=> false\n */\nvar endsWith = _curry2(function(suffix, list) {\n  return equals(takeLast(suffix.length, list), suffix);\n});\n\n/**\n * Takes a function and two values in its domain and returns `true` if the\n * values map to the same value in the codomain; `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Relation\n * @sig (a -> b) -> a -> a -> Boolean\n * @param {Function} f\n * @param {*} x\n * @param {*} y\n * @return {Boolean}\n * @example\n *\n *      R.eqBy(Math.abs, 5, -5); //=> true\n */\nvar eqBy = _curry3(function eqBy(f, x, y) {\n  return equals(f(x), f(y));\n});\n\n/**\n * Reports whether two objects have the same value, in [`R.equals`](#equals)\n * terms, for the specified property. Useful as a curried predicate.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig k -> {k: v} -> {k: v} -> Boolean\n * @param {String} prop The name of the property to compare\n * @param {Object} obj1\n * @param {Object} obj2\n * @return {Boolean}\n *\n * @example\n *\n *      var o1 = { a: 1, b: 2, c: 3, d: 4 };\n *      var o2 = { a: 10, b: 20, c: 3, d: 40 };\n *      R.eqProps('a', o1, o2); //=> false\n *      R.eqProps('c', o1, o2); //=> true\n */\nvar eqProps = _curry3(function eqProps(prop, obj1, obj2) {\n  return equals(obj1[prop], obj2[prop]);\n});\n\n/**\n * Creates a new object by recursively evolving a shallow copy of `object`,\n * according to the `transformation` functions. All non-primitive properties\n * are copied by reference.\n *\n * A `transformation` function will not be invoked if its corresponding key\n * does not exist in the evolved object.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Object\n * @sig {k: (v -> v)} -> {k: v} -> {k: v}\n * @param {Object} transformations The object specifying transformation functions to apply\n *        to the object.\n * @param {Object} object The object to be transformed.\n * @return {Object} The transformed object.\n * @example\n *\n *      var tomato  = {firstName: '  Tomato ', data: {elapsed: 100, remaining: 1400}, id:123};\n *      var transformations = {\n *        firstName: R.trim,\n *        lastName: R.trim, // Will not get invoked.\n *        data: {elapsed: R.add(1), remaining: R.add(-1)}\n *      };\n *      R.evolve(transformations, tomato); //=> {firstName: 'Tomato', data: {elapsed: 101, remaining: 1399}, id:123}\n */\nvar evolve = _curry2(function evolve(transformations, object) {\n  var result = {};\n  var transformation, key, type;\n  for (key in object) {\n    transformation = transformations[key];\n    type = typeof transformation;\n    result[key] = type === 'function'                 ? transformation(object[key])\n                : transformation && type === 'object' ? evolve(transformation, object[key])\n                                                      : object[key];\n  }\n  return result;\n});\n\nfunction XFind(f, xf) {\n  this.xf = xf;\n  this.f = f;\n  this.found = false;\n}\nXFind.prototype['@@transducer/init'] = _xfBase.init;\nXFind.prototype['@@transducer/result'] = function(result) {\n  if (!this.found) {\n    result = this.xf['@@transducer/step'](result, void 0);\n  }\n  return this.xf['@@transducer/result'](result);\n};\nXFind.prototype['@@transducer/step'] = function(result, input) {\n  if (this.f(input)) {\n    this.found = true;\n    result = _reduced(this.xf['@@transducer/step'](result, input));\n  }\n  return result;\n};\n\nvar _xfind = _curry2(function _xfind(f, xf) { return new XFind(f, xf); });\n\n/**\n * Returns the first element of the list which matches the predicate, or\n * `undefined` if no element matches.\n *\n * Dispatches to the `find` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> a | undefined\n * @param {Function} fn The predicate function used to determine if the element is the\n *        desired one.\n * @param {Array} list The array to consider.\n * @return {Object} The element found, or `undefined`.\n * @see R.transduce\n * @example\n *\n *      var xs = [{a: 1}, {a: 2}, {a: 3}];\n *      R.find(R.propEq('a', 2))(xs); //=> {a: 2}\n *      R.find(R.propEq('a', 4))(xs); //=> undefined\n */\nvar find = _curry2(_dispatchable(['find'], _xfind, function find(fn, list) {\n  var idx = 0;\n  var len = list.length;\n  while (idx < len) {\n    if (fn(list[idx])) {\n      return list[idx];\n    }\n    idx += 1;\n  }\n}));\n\nfunction XFindIndex(f, xf) {\n  this.xf = xf;\n  this.f = f;\n  this.idx = -1;\n  this.found = false;\n}\nXFindIndex.prototype['@@transducer/init'] = _xfBase.init;\nXFindIndex.prototype['@@transducer/result'] = function(result) {\n  if (!this.found) {\n    result = this.xf['@@transducer/step'](result, -1);\n  }\n  return this.xf['@@transducer/result'](result);\n};\nXFindIndex.prototype['@@transducer/step'] = function(result, input) {\n  this.idx += 1;\n  if (this.f(input)) {\n    this.found = true;\n    result = _reduced(this.xf['@@transducer/step'](result, this.idx));\n  }\n  return result;\n};\n\nvar _xfindIndex = _curry2(function _xfindIndex(f, xf) { return new XFindIndex(f, xf); });\n\n/**\n * Returns the index of the first element of the list which matches the\n * predicate, or `-1` if no element matches.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> Boolean) -> [a] -> Number\n * @param {Function} fn The predicate function used to determine if the element is the\n * desired one.\n * @param {Array} list The array to consider.\n * @return {Number} The index of the element found, or `-1`.\n * @see R.transduce\n * @example\n *\n *      var xs = [{a: 1}, {a: 2}, {a: 3}];\n *      R.findIndex(R.propEq('a', 2))(xs); //=> 1\n *      R.findIndex(R.propEq('a', 4))(xs); //=> -1\n */\nvar findIndex = _curry2(_dispatchable([], _xfindIndex, function findIndex(fn, list) {\n  var idx = 0;\n  var len = list.length;\n  while (idx < len) {\n    if (fn(list[idx])) {\n      return idx;\n    }\n    idx += 1;\n  }\n  return -1;\n}));\n\nfunction XFindLast(f, xf) {\n  this.xf = xf;\n  this.f = f;\n}\nXFindLast.prototype['@@transducer/init'] = _xfBase.init;\nXFindLast.prototype['@@transducer/result'] = function(result) {\n  return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.last));\n};\nXFindLast.prototype['@@transducer/step'] = function(result, input) {\n  if (this.f(input)) {\n    this.last = input;\n  }\n  return result;\n};\n\nvar _xfindLast = _curry2(function _xfindLast(f, xf) { return new XFindLast(f, xf); });\n\n/**\n * Returns the last element of the list which matches the predicate, or\n * `undefined` if no element matches.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> Boolean) -> [a] -> a | undefined\n * @param {Function} fn The predicate function used to determine if the element is the\n * desired one.\n * @param {Array} list The array to consider.\n * @return {Object} The element found, or `undefined`.\n * @see R.transduce\n * @example\n *\n *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];\n *      R.findLast(R.propEq('a', 1))(xs); //=> {a: 1, b: 1}\n *      R.findLast(R.propEq('a', 4))(xs); //=> undefined\n */\nvar findLast = _curry2(_dispatchable([], _xfindLast, function findLast(fn, list) {\n  var idx = list.length - 1;\n  while (idx >= 0) {\n    if (fn(list[idx])) {\n      return list[idx];\n    }\n    idx -= 1;\n  }\n}));\n\nfunction XFindLastIndex(f, xf) {\n  this.xf = xf;\n  this.f = f;\n  this.idx = -1;\n  this.lastIdx = -1;\n}\nXFindLastIndex.prototype['@@transducer/init'] = _xfBase.init;\nXFindLastIndex.prototype['@@transducer/result'] = function(result) {\n  return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.lastIdx));\n};\nXFindLastIndex.prototype['@@transducer/step'] = function(result, input) {\n  this.idx += 1;\n  if (this.f(input)) {\n    this.lastIdx = this.idx;\n  }\n  return result;\n};\n\nvar _xfindLastIndex = _curry2(function _xfindLastIndex(f, xf) { return new XFindLastIndex(f, xf); });\n\n/**\n * Returns the index of the last element of the list which matches the\n * predicate, or `-1` if no element matches.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> Boolean) -> [a] -> Number\n * @param {Function} fn The predicate function used to determine if the element is the\n * desired one.\n * @param {Array} list The array to consider.\n * @return {Number} The index of the element found, or `-1`.\n * @see R.transduce\n * @example\n *\n *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];\n *      R.findLastIndex(R.propEq('a', 1))(xs); //=> 1\n *      R.findLastIndex(R.propEq('a', 4))(xs); //=> -1\n */\nvar findLastIndex = _curry2(_dispatchable([], _xfindLastIndex, function findLastIndex(fn, list) {\n  var idx = list.length - 1;\n  while (idx >= 0) {\n    if (fn(list[idx])) {\n      return idx;\n    }\n    idx -= 1;\n  }\n  return -1;\n}));\n\n/**\n * Returns a new list by pulling every item out of it (and all its sub-arrays)\n * and putting them in a new array, depth-first.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [b]\n * @param {Array} list The array to consider.\n * @return {Array} The flattened list.\n * @see R.unnest\n * @example\n *\n *      R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);\n *      //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n */\nvar flatten = _curry1(_makeFlat(true));\n\n/**\n * Returns a new function much like the supplied one, except that the first two\n * arguments' order is reversed.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig ((a, b, c, ...) -> z) -> (b -> a -> c -> ... -> z)\n * @param {Function} fn The function to invoke with its first two parameters reversed.\n * @return {*} The result of invoking `fn` with its first two parameters' order reversed.\n * @example\n *\n *      var mergeThree = (a, b, c) => [].concat(a, b, c);\n *\n *      mergeThree(1, 2, 3); //=> [1, 2, 3]\n *\n *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]\n * @symb R.flip(f)(a, b, c) = f(b, a, c)\n */\nvar flip = _curry1(function flip(fn) {\n  return curryN(fn.length, function(a, b) {\n    var args = Array.prototype.slice.call(arguments, 0);\n    args[0] = b;\n    args[1] = a;\n    return fn.apply(this, args);\n  });\n});\n\n/**\n * Iterate over an input `list`, calling a provided function `fn` for each\n * element in the list.\n *\n * `fn` receives one argument: *(value)*.\n *\n * Note: `R.forEach` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.forEach` method. For more\n * details on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description\n *\n * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns\n * the original array. In some libraries this function is named `each`.\n *\n * Dispatches to the `forEach` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> *) -> [a] -> [a]\n * @param {Function} fn The function to invoke. Receives one argument, `value`.\n * @param {Array} list The list to iterate over.\n * @return {Array} The original list.\n * @see R.addIndex\n * @example\n *\n *      var printXPlusFive = x => console.log(x + 5);\n *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]\n *      // logs 6\n *      // logs 7\n *      // logs 8\n * @symb R.forEach(f, [a, b, c]) = [a, b, c]\n */\nvar forEach = _curry2(_checkForMethod('forEach', function forEach(fn, list) {\n  var len = list.length;\n  var idx = 0;\n  while (idx < len) {\n    fn(list[idx]);\n    idx += 1;\n  }\n  return list;\n}));\n\n/**\n * Iterate over an input `object`, calling a provided function `fn` for each\n * key and value in the object.\n *\n * `fn` receives three argument: *(value, key, obj)*.\n *\n * @func\n * @memberOf R\n * @since v0.23.0\n * @category Object\n * @sig ((a, String, StrMap a) -> Any) -> StrMap a -> StrMap a\n * @param {Function} fn The function to invoke. Receives three argument, `value`, `key`, `obj`.\n * @param {Object} obj The object to iterate over.\n * @return {Object} The original object.\n * @example\n *\n *      var printKeyConcatValue = (value, key) => console.log(key + ':' + value);\n *      R.forEachObjIndexed(printKeyConcatValue, {x: 1, y: 2}); //=> {x: 1, y: 2}\n *      // logs x:1\n *      // logs y:2\n * @symb R.forEachObjIndexed(f, {x: a, y: b}) = {x: a, y: b}\n */\nvar forEachObjIndexed = _curry2(function forEachObjIndexed(fn, obj) {\n  var keyList = keys(obj);\n  var idx = 0;\n  while (idx < keyList.length) {\n    var key = keyList[idx];\n    fn(obj[key], key, obj);\n    idx += 1;\n  }\n  return obj;\n});\n\n/**\n * Creates a new object from a list key-value pairs. If a key appears in\n * multiple pairs, the rightmost pair is included in the object.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig [[k,v]] -> {k: v}\n * @param {Array} pairs An array of two-element arrays that will be the keys and values of the output object.\n * @return {Object} The object made by pairing up `keys` and `values`.\n * @see R.toPairs, R.pair\n * @example\n *\n *      R.fromPairs([['a', 1], ['b', 2], ['c', 3]]); //=> {a: 1, b: 2, c: 3}\n */\nvar fromPairs = _curry1(function fromPairs(pairs) {\n  var result = {};\n  var idx = 0;\n  while (idx < pairs.length) {\n    result[pairs[idx][0]] = pairs[idx][1];\n    idx += 1;\n  }\n  return result;\n});\n\n/**\n * Splits a list into sub-lists stored in an object, based on the result of\n * calling a String-returning function on each element, and grouping the\n * results according to values returned.\n *\n * Dispatches to the `groupBy` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> String) -> [a] -> {String: [a]}\n * @param {Function} fn Function :: a -> String\n * @param {Array} list The array to group\n * @return {Object} An object with the output of `fn` for keys, mapped to arrays of elements\n *         that produced that key when passed to `fn`.\n * @see R.transduce\n * @example\n *\n *      var byGrade = R.groupBy(function(student) {\n *        var score = student.score;\n *        return score < 65 ? 'F' :\n *               score < 70 ? 'D' :\n *               score < 80 ? 'C' :\n *               score < 90 ? 'B' : 'A';\n *      });\n *      var students = [{name: 'Abby', score: 84},\n *                      {name: 'Eddy', score: 58},\n *                      // ...\n *                      {name: 'Jack', score: 69}];\n *      byGrade(students);\n *      // {\n *      //   'A': [{name: 'Dianne', score: 99}],\n *      //   'B': [{name: 'Abby', score: 84}]\n *      //   // ...,\n *      //   'F': [{name: 'Eddy', score: 58}]\n *      // }\n */\nvar groupBy = _curry2(_checkForMethod('groupBy', reduceBy(function(acc, item) {\n  if (acc == null) {\n    acc = [];\n  }\n  acc.push(item);\n  return acc;\n}, null)));\n\n/**\n * Takes a list and returns a list of lists where each sublist's elements are\n * all satisfied pairwise comparison according to the provided function.\n * Only adjacent elements are passed to the comparison function.\n *\n * @func\n * @memberOf R\n * @since v0.21.0\n * @category List\n * @sig ((a, a) → Boolean) → [a] → [[a]]\n * @param {Function} fn Function for determining whether two given (adjacent)\n *        elements should be in the same group\n * @param {Array} list The array to group. Also accepts a string, which will be\n *        treated as a list of characters.\n * @return {List} A list that contains sublists of elements,\n *         whose concatenations are equal to the original list.\n * @example\n *\n * R.groupWith(R.equals, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n * //=> [[0], [1, 1], [2], [3], [5], [8], [13], [21]]\n *\n * R.groupWith((a, b) => a + 1 === b, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n * //=> [[0, 1], [1, 2, 3], [5], [8], [13], [21]]\n *\n * R.groupWith((a, b) => a % 2 === b % 2, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n * //=> [[0], [1, 1], [2], [3, 5], [8], [13, 21]]\n *\n * R.groupWith(R.eqBy(isVowel), 'aestiou')\n * //=> ['ae', 'st', 'iou']\n */\nvar groupWith = _curry2(function(fn, list) {\n  var res = [];\n  var idx = 0;\n  var len = list.length;\n  while (idx < len) {\n    var nextidx = idx + 1;\n    while (nextidx < len && fn(list[nextidx - 1], list[nextidx])) {\n      nextidx += 1;\n    }\n    res.push(list.slice(idx, nextidx));\n    idx = nextidx;\n  }\n  return res;\n});\n\n/**\n * Returns `true` if the first argument is greater than the second; `false`\n * otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @see R.lt\n * @example\n *\n *      R.gt(2, 1); //=> true\n *      R.gt(2, 2); //=> false\n *      R.gt(2, 3); //=> false\n *      R.gt('a', 'z'); //=> false\n *      R.gt('z', 'a'); //=> true\n */\nvar gt = _curry2(function gt(a, b) { return a > b; });\n\n/**\n * Returns `true` if the first argument is greater than or equal to the second;\n * `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> Boolean\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n * @see R.lte\n * @example\n *\n *      R.gte(2, 1); //=> true\n *      R.gte(2, 2); //=> true\n *      R.gte(2, 3); //=> false\n *      R.gte('a', 'z'); //=> false\n *      R.gte('z', 'a'); //=> true\n */\nvar gte = _curry2(function gte(a, b) { return a >= b; });\n\n/**\n * Returns whether or not an object has an own property with the specified name\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Object\n * @sig s -> {s: x} -> Boolean\n * @param {String} prop The name of the property to check for.\n * @param {Object} obj The object to query.\n * @return {Boolean} Whether the property exists.\n * @example\n *\n *      var hasName = R.has('name');\n *      hasName({name: 'alice'});   //=> true\n *      hasName({name: 'bob'});     //=> true\n *      hasName({});                //=> false\n *\n *      var point = {x: 0, y: 0};\n *      var pointHas = R.has(R.__, point);\n *      pointHas('x');  //=> true\n *      pointHas('y');  //=> true\n *      pointHas('z');  //=> false\n */\nvar has = _curry2(_has);\n\n/**\n * Returns whether or not an object or its prototype chain has a property with\n * the specified name\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Object\n * @sig s -> {s: x} -> Boolean\n * @param {String} prop The name of the property to check for.\n * @param {Object} obj The object to query.\n * @return {Boolean} Whether the property exists.\n * @example\n *\n *      function Rectangle(width, height) {\n *        this.width = width;\n *        this.height = height;\n *      }\n *      Rectangle.prototype.area = function() {\n *        return this.width * this.height;\n *      };\n *\n *      var square = new Rectangle(2, 2);\n *      R.hasIn('width', square);  //=> true\n *      R.hasIn('area', square);  //=> true\n */\nvar hasIn = _curry2(function hasIn(prop, obj) {\n  return prop in obj;\n});\n\n/**\n * Returns the first element of the given list or string. In some libraries\n * this function is named `first`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> a | Undefined\n * @sig String -> String\n * @param {Array|String} list\n * @return {*}\n * @see R.tail, R.init, R.last\n * @example\n *\n *      R.head(['fi', 'fo', 'fum']); //=> 'fi'\n *      R.head([]); //=> undefined\n *\n *      R.head('abc'); //=> 'a'\n *      R.head(''); //=> ''\n */\nvar head = nth(0);\n\nfunction _identity(x) { return x; }\n\n/**\n * A function that does nothing but return the parameter supplied to it. Good\n * as a default or placeholder function.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig a -> a\n * @param {*} x The value to return.\n * @return {*} The input value, `x`.\n * @example\n *\n *      R.identity(1); //=> 1\n *\n *      var obj = {};\n *      R.identity(obj) === obj; //=> true\n * @symb R.identity(a) = a\n */\nvar identity = _curry1(_identity);\n\n/**\n * Creates a function that will process either the `onTrue` or the `onFalse`\n * function depending upon the result of the `condition` predicate.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Logic\n * @sig (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)\n * @param {Function} condition A predicate function\n * @param {Function} onTrue A function to invoke when the `condition` evaluates to a truthy value.\n * @param {Function} onFalse A function to invoke when the `condition` evaluates to a falsy value.\n * @return {Function} A new unary function that will process either the `onTrue` or the `onFalse`\n *                    function depending upon the result of the `condition` predicate.\n * @see R.unless, R.when\n * @example\n *\n *      var incCount = R.ifElse(\n *        R.has('count'),\n *        R.over(R.lensProp('count'), R.inc),\n *        R.assoc('count', 1)\n *      );\n *      incCount({});           //=> { count: 1 }\n *      incCount({ count: 1 }); //=> { count: 2 }\n */\nvar ifElse = _curry3(function ifElse(condition, onTrue, onFalse) {\n  return curryN(Math.max(condition.length, onTrue.length, onFalse.length),\n    function _ifElse() {\n      return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);\n    }\n  );\n});\n\n/**\n * Increments its argument.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Math\n * @sig Number -> Number\n * @param {Number} n\n * @return {Number} n + 1\n * @see R.dec\n * @example\n *\n *      R.inc(42); //=> 43\n */\nvar inc = add(1);\n\n/**\n * Given a function that generates a key, turns a list of objects into an\n * object indexing the objects by the given key. Note that if multiple\n * objects generate the same value for the indexing key only the last value\n * will be included in the generated object.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig (a -> String) -> [{k: v}] -> {k: {k: v}}\n * @param {Function} fn Function :: a -> String\n * @param {Array} array The array of objects to index\n * @return {Object} An object indexing each array element by the given property.\n * @example\n *\n *      var list = [{id: 'xyz', title: 'A'}, {id: 'abc', title: 'B'}];\n *      R.indexBy(R.prop('id'), list);\n *      //=> {abc: {id: 'abc', title: 'B'}, xyz: {id: 'xyz', title: 'A'}}\n */\nvar indexBy = reduceBy(function(acc, elem) { return elem; }, null);\n\n/**\n * Returns the position of the first occurrence of an item in an array, or -1\n * if the item is not included in the array. [`R.equals`](#equals) is used to\n * determine equality.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> Number\n * @param {*} target The item to find.\n * @param {Array} xs The array to search in.\n * @return {Number} the index of the target, or -1 if the target is not found.\n * @see R.lastIndexOf\n * @example\n *\n *      R.indexOf(3, [1,2,3,4]); //=> 2\n *      R.indexOf(10, [1,2,3,4]); //=> -1\n */\nvar indexOf = _curry2(function indexOf(target, xs) {\n  return typeof xs.indexOf === 'function' && !_isArray(xs) ?\n    xs.indexOf(target) :\n    _indexOf(xs, target, 0);\n});\n\n/**\n * Returns all but the last element of the given list or string.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.last, R.head, R.tail\n * @example\n *\n *      R.init([1, 2, 3]);  //=> [1, 2]\n *      R.init([1, 2]);     //=> [1]\n *      R.init([1]);        //=> []\n *      R.init([]);         //=> []\n *\n *      R.init('abc');  //=> 'ab'\n *      R.init('ab');   //=> 'a'\n *      R.init('a');    //=> ''\n *      R.init('');     //=> ''\n */\nvar init = slice(0, -1);\n\n/**\n * Takes a predicate `pred`, a list `xs`, and a list `ys`, and returns a list\n * `xs'` comprising each of the elements of `xs` which is equal to one or more\n * elements of `ys` according to `pred`.\n *\n * `pred` must be a binary function expecting an element from each list.\n *\n * `xs`, `ys`, and `xs'` are treated as sets, semantically, so ordering should\n * not be significant, but since `xs'` is ordered the implementation guarantees\n * that its values are in the same order as they appear in `xs`. Duplicates are\n * not removed, so `xs'` may contain duplicates if `xs` contains duplicates.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Relation\n * @sig ((a, b) -> Boolean) -> [a] -> [b] -> [a]\n * @param {Function} pred\n * @param {Array} xs\n * @param {Array} ys\n * @return {Array}\n * @see R.intersection\n * @example\n *\n *      R.innerJoin(\n *        (record, id) => record.id === id,\n *        [{id: 824, name: 'Richie Furay'},\n *         {id: 956, name: 'Dewey Martin'},\n *         {id: 313, name: 'Bruce Palmer'},\n *         {id: 456, name: 'Stephen Stills'},\n *         {id: 177, name: 'Neil Young'}],\n *        [177, 456, 999]\n *      );\n *      //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]\n */\nvar innerJoin = _curry3(function innerJoin(pred, xs, ys) {\n  return _filter(function(x) { return _containsWith(pred, x, ys); }, xs);\n});\n\n/**\n * Inserts the supplied element into the list, at the specified `index`. _Note that\n\n * this is not destructive_: it returns a copy of the list with the changes.\n * <small>No lists have been harmed in the application of this function.</small>\n *\n * @func\n * @memberOf R\n * @since v0.2.2\n * @category List\n * @sig Number -> a -> [a] -> [a]\n * @param {Number} index The position to insert the element\n * @param {*} elt The element to insert into the Array\n * @param {Array} list The list to insert into\n * @return {Array} A new Array with `elt` inserted at `index`.\n * @example\n *\n *      R.insert(2, 'x', [1,2,3,4]); //=> [1,2,'x',3,4]\n */\nvar insert = _curry3(function insert(idx, elt, list) {\n  idx = idx < list.length && idx >= 0 ? idx : list.length;\n  var result = Array.prototype.slice.call(list, 0);\n  result.splice(idx, 0, elt);\n  return result;\n});\n\n/**\n * Inserts the sub-list into the list, at the specified `index`. _Note that this is not\n * destructive_: it returns a copy of the list with the changes.\n * <small>No lists have been harmed in the application of this function.</small>\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig Number -> [a] -> [a] -> [a]\n * @param {Number} index The position to insert the sub-list\n * @param {Array} elts The sub-list to insert into the Array\n * @param {Array} list The list to insert the sub-list into\n * @return {Array} A new Array with `elts` inserted starting at `index`.\n * @example\n *\n *      R.insertAll(2, ['x','y','z'], [1,2,3,4]); //=> [1,2,'x','y','z',3,4]\n */\nvar insertAll = _curry3(function insertAll(idx, elts, list) {\n  idx = idx < list.length && idx >= 0 ? idx : list.length;\n  return [].concat(Array.prototype.slice.call(list, 0, idx),\n                   elts,\n                   Array.prototype.slice.call(list, idx));\n});\n\nfunction _Set() {\n  /* globals Set */\n  this._nativeSet = typeof Set === 'function' ? new Set() : null;\n  this._items = {};\n}\n\n// until we figure out why jsdoc chokes on this\n// @param item The item to add to the Set\n// @returns {boolean} true if the item did not exist prior, otherwise false\n//\n_Set.prototype.add = function(item) {\n  return !hasOrAdd(item, true, this);\n};\n\n//\n// @param item The item to check for existence in the Set\n// @returns {boolean} true if the item exists in the Set, otherwise false\n//\n_Set.prototype.has = function(item) {\n  return hasOrAdd(item, false, this);\n};\n\n//\n// Combines the logic for checking whether an item is a member of the set and\n// for adding a new item to the set.\n//\n// @param item       The item to check or add to the Set instance.\n// @param shouldAdd  If true, the item will be added to the set if it doesn't\n//                   already exist.\n// @param set        The set instance to check or add to.\n// @return {boolean} true if the item already existed, otherwise false.\n//\nfunction hasOrAdd(item, shouldAdd, set) {\n  var type = typeof item;\n  var prevSize, newSize;\n  switch (type) {\n    case 'string':\n    case 'number':\n      // distinguish between +0 and -0\n      if (item === 0 && 1 / item === -Infinity) {\n        if (set._items['-0']) {\n          return true;\n        } else {\n          if (shouldAdd) {\n            set._items['-0'] = true;\n          }\n          return false;\n        }\n      }\n      // these types can all utilise the native Set\n      if (set._nativeSet !== null) {\n        if (shouldAdd) {\n          prevSize = set._nativeSet.size;\n          set._nativeSet.add(item);\n          newSize = set._nativeSet.size;\n          return newSize === prevSize;\n        } else {\n          return set._nativeSet.has(item);\n        }\n      } else {\n        if (!(type in set._items)) {\n          if (shouldAdd) {\n            set._items[type] = {};\n            set._items[type][item] = true;\n          }\n          return false;\n        } else if (item in set._items[type]) {\n          return true;\n        } else {\n          if (shouldAdd) {\n            set._items[type][item] = true;\n          }\n          return false;\n        }\n      }\n\n    case 'boolean':\n      // set._items['boolean'] holds a two element array\n      // representing [ falseExists, trueExists ]\n      if (type in set._items) {\n        var bIdx = item ? 1 : 0;\n        if (set._items[type][bIdx]) {\n          return true;\n        } else {\n          if (shouldAdd) {\n            set._items[type][bIdx] = true;\n          }\n          return false;\n        }\n      } else {\n        if (shouldAdd) {\n          set._items[type] = item ? [false, true] : [true, false];\n        }\n        return false;\n      }\n\n    case 'function':\n      // compare functions for reference equality\n      if (set._nativeSet !== null) {\n        if (shouldAdd) {\n          prevSize = set._nativeSet.size;\n          set._nativeSet.add(item);\n          newSize = set._nativeSet.size;\n          return newSize === prevSize;\n        } else {\n          return set._nativeSet.has(item);\n        }\n      } else {\n        if (!(type in set._items)) {\n          if (shouldAdd) {\n            set._items[type] = [item];\n          }\n          return false;\n        }\n        if (!_contains(item, set._items[type])) {\n          if (shouldAdd) {\n            set._items[type].push(item);\n          }\n          return false;\n        }\n        return true;\n      }\n\n    case 'undefined':\n      if (set._items[type]) {\n        return true;\n      } else {\n        if (shouldAdd) {\n          set._items[type] = true;\n        }\n        return false;\n      }\n\n    case 'object':\n      if (item === null) {\n        if (!set._items['null']) {\n          if (shouldAdd) {\n            set._items['null'] = true;\n          }\n          return false;\n        }\n        return true;\n      }\n    /* falls through */\n    default:\n      // reduce the search size of heterogeneous sets by creating buckets\n      // for each type.\n      type = Object.prototype.toString.call(item);\n      if (!(type in set._items)) {\n        if (shouldAdd) {\n          set._items[type] = [item];\n        }\n        return false;\n      }\n      // scan through all previously applied items\n      if (!_contains(item, set._items[type])) {\n        if (shouldAdd) {\n          set._items[type].push(item);\n        }\n        return false;\n      }\n      return true;\n  }\n}\n\n/**\n * Returns a new list containing only one copy of each element in the original\n * list, based upon the value returned by applying the supplied function to\n * each list element. Prefers the first item if the supplied function produces\n * the same value on two items. [`R.equals`](#equals) is used for comparison.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> b) -> [a] -> [a]\n * @param {Function} fn A function used to produce a value to use during comparisons.\n * @param {Array} list The array to consider.\n * @return {Array} The list of unique items.\n * @example\n *\n *      R.uniqBy(Math.abs, [-1, -5, 2, 10, 1, 2]); //=> [-1, -5, 2, 10]\n */\nvar uniqBy = _curry2(function uniqBy(fn, list) {\n  var set = new _Set();\n  var result = [];\n  var idx = 0;\n  var appliedItem, item;\n\n  while (idx < list.length) {\n    item = list[idx];\n    appliedItem = fn(item);\n    if (set.add(appliedItem)) {\n      result.push(item);\n    }\n    idx += 1;\n  }\n  return result;\n});\n\n/**\n * Returns a new list containing only one copy of each element in the original\n * list. [`R.equals`](#equals) is used to determine equality.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @param {Array} list The array to consider.\n * @return {Array} The list of unique items.\n * @example\n *\n *      R.uniq([1, 1, 2, 1]); //=> [1, 2]\n *      R.uniq([1, '1']);     //=> [1, '1']\n *      R.uniq([[42], [42]]); //=> [[42]]\n */\nvar uniq = uniqBy(identity);\n\n/**\n * Combines two lists into a set (i.e. no duplicates) composed of those\n * elements common to both lists.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The list of elements found in both `list1` and `list2`.\n * @see R.innerJoin\n * @example\n *\n *      R.intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]\n */\nvar intersection = _curry2(function intersection(list1, list2) {\n  var lookupList, filteredList;\n  if (list1.length > list2.length) {\n    lookupList = list1;\n    filteredList = list2;\n  } else {\n    lookupList = list2;\n    filteredList = list1;\n  }\n  return uniq(_filter(flip(_contains)(lookupList), filteredList));\n});\n\n/**\n * Creates a new list with the separator interposed between elements.\n *\n * Dispatches to the `intersperse` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig a -> [a] -> [a]\n * @param {*} separator The element to add to the list.\n * @param {Array} list The list to be interposed.\n * @return {Array} The new list.\n * @example\n *\n *      R.intersperse('n', ['ba', 'a', 'a']); //=> ['ba', 'n', 'a', 'n', 'a']\n */\nvar intersperse = _curry2(_checkForMethod('intersperse', function intersperse(separator, list) {\n  var out = [];\n  var idx = 0;\n  var length = list.length;\n  while (idx < length) {\n    if (idx === length - 1) {\n      out.push(list[idx]);\n    } else {\n      out.push(list[idx], separator);\n    }\n    idx += 1;\n  }\n  return out;\n}));\n\n// Based on https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\nfunction _objectAssign(target) {\n  if (target == null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n\n  var output = Object(target);\n  var idx = 1;\n  var length = arguments.length;\n  while (idx < length) {\n    var source = arguments[idx];\n    if (source != null) {\n      for (var nextKey in source) {\n        if (_has(nextKey, source)) {\n          output[nextKey] = source[nextKey];\n        }\n      }\n    }\n    idx += 1;\n  }\n  return output;\n}\n\nvar _assign = typeof Object.assign === 'function' ? Object.assign : _objectAssign;\n\n/**\n * Creates an object containing a single key:value pair.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Object\n * @sig String -> a -> {String:a}\n * @param {String} key\n * @param {*} val\n * @return {Object}\n * @see R.pair\n * @example\n *\n *      var matchPhrases = R.compose(\n *        R.objOf('must'),\n *        R.map(R.objOf('match_phrase'))\n *      );\n *      matchPhrases(['foo', 'bar', 'baz']); //=> {must: [{match_phrase: 'foo'}, {match_phrase: 'bar'}, {match_phrase: 'baz'}]}\n */\nvar objOf = _curry2(function objOf(key, val) {\n  var obj = {};\n  obj[key] = val;\n  return obj;\n});\n\nvar _stepCatArray = {\n  '@@transducer/init': Array,\n  '@@transducer/step': function(xs, x) {\n    xs.push(x);\n    return xs;\n  },\n  '@@transducer/result': _identity\n};\nvar _stepCatString = {\n  '@@transducer/init': String,\n  '@@transducer/step': function(a, b) { return a + b; },\n  '@@transducer/result': _identity\n};\nvar _stepCatObject = {\n  '@@transducer/init': Object,\n  '@@transducer/step': function(result, input) {\n    return _assign(\n      result,\n      _isArrayLike(input) ? objOf(input[0], input[1]) : input\n    );\n  },\n  '@@transducer/result': _identity\n};\n\nfunction _stepCat(obj) {\n  if (_isTransformer(obj)) {\n    return obj;\n  }\n  if (_isArrayLike(obj)) {\n    return _stepCatArray;\n  }\n  if (typeof obj === 'string') {\n    return _stepCatString;\n  }\n  if (typeof obj === 'object') {\n    return _stepCatObject;\n  }\n  throw new Error('Cannot create transformer for ' + obj);\n}\n\n/**\n * Transforms the items of the list with the transducer and appends the\n * transformed items to the accumulator using an appropriate iterator function\n * based on the accumulator type.\n *\n * The accumulator can be an array, string, object or a transformer. Iterated\n * items will be appended to arrays and concatenated to strings. Objects will\n * be merged directly or 2-item arrays will be merged as key, value pairs.\n *\n * The accumulator can also be a transformer object that provides a 2-arity\n * reducing iterator function, step, 0-arity initial value function, init, and\n * 1-arity result extraction function result. The step function is used as the\n * iterator function in reduce. The result function is used to convert the\n * final accumulator into the return type and in most cases is R.identity. The\n * init function is used to provide the initial accumulator.\n *\n * The iteration is performed with [`R.reduce`](#reduce) after initializing the\n * transducer.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig a -> (b -> b) -> [c] -> a\n * @param {*} acc The initial accumulator value.\n * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @example\n *\n *      var numbers = [1, 2, 3, 4];\n *      var transducer = R.compose(R.map(R.add(1)), R.take(2));\n *\n *      R.into([], transducer, numbers); //=> [2, 3]\n *\n *      var intoArray = R.into([]);\n *      intoArray(transducer, numbers); //=> [2, 3]\n */\nvar into = _curry3(function into(acc, xf, list) {\n  return _isTransformer(acc) ?\n    _reduce(xf(acc), acc['@@transducer/init'](), list) :\n    _reduce(xf(_stepCat(acc)), _clone(acc, [], [], false), list);\n});\n\n/**\n * Same as [`R.invertObj`](#invertObj), however this accounts for objects with\n * duplicate values by putting the values into an array.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Object\n * @sig {s: x} -> {x: [ s, ... ]}\n * @param {Object} obj The object or array to invert\n * @return {Object} out A new object with keys in an array.\n * @see R.invertObj\n * @example\n *\n *      var raceResultsByFirstName = {\n *        first: 'alice',\n *        second: 'jake',\n *        third: 'alice',\n *      };\n *      R.invert(raceResultsByFirstName);\n *      //=> { 'alice': ['first', 'third'], 'jake':['second'] }\n */\nvar invert = _curry1(function invert(obj) {\n  var props = keys(obj);\n  var len = props.length;\n  var idx = 0;\n  var out = {};\n\n  while (idx < len) {\n    var key = props[idx];\n    var val = obj[key];\n    var list = _has(val, out) ? out[val] : (out[val] = []);\n    list[list.length] = key;\n    idx += 1;\n  }\n  return out;\n});\n\n/**\n * Returns a new object with the keys of the given object as values, and the\n * values of the given object, which are coerced to strings, as keys. Note\n * that the last key found is preferred when handling the same value.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Object\n * @sig {s: x} -> {x: s}\n * @param {Object} obj The object or array to invert\n * @return {Object} out A new object\n * @see R.invert\n * @example\n *\n *      var raceResults = {\n *        first: 'alice',\n *        second: 'jake'\n *      };\n *      R.invertObj(raceResults);\n *      //=> { 'alice': 'first', 'jake':'second' }\n *\n *      // Alternatively:\n *      var raceResults = ['alice', 'jake'];\n *      R.invertObj(raceResults);\n *      //=> { 'alice': '0', 'jake':'1' }\n */\nvar invertObj = _curry1(function invertObj(obj) {\n  var props = keys(obj);\n  var len = props.length;\n  var idx = 0;\n  var out = {};\n\n  while (idx < len) {\n    var key = props[idx];\n    out[obj[key]] = key;\n    idx += 1;\n  }\n  return out;\n});\n\n/**\n * Turns a named method with a specified arity into a function that can be\n * called directly supplied with arguments and a target object.\n *\n * The returned function is curried and accepts `arity + 1` parameters where\n * the final parameter is the target object.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)\n * @param {Number} arity Number of arguments the returned function should take\n *        before the target object.\n * @param {String} method Name of the method to call.\n * @return {Function} A new curried function.\n * @see R.construct\n * @example\n *\n *      var sliceFrom = R.invoker(1, 'slice');\n *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'\n *      var sliceFrom6 = R.invoker(2, 'slice')(6);\n *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'\n * @symb R.invoker(0, 'method')(o) = o['method']()\n * @symb R.invoker(1, 'method')(a, o) = o['method'](a)\n * @symb R.invoker(2, 'method')(a, b, o) = o['method'](a, b)\n */\nvar invoker = _curry2(function invoker(arity, method) {\n  return curryN(arity + 1, function() {\n    var target = arguments[arity];\n    if (target != null && _isFunction(target[method])) {\n      return target[method].apply(target, Array.prototype.slice.call(arguments, 0, arity));\n    }\n    throw new TypeError(toString$1(target) + ' does not have a method named \"' + method + '\"');\n  });\n});\n\n/**\n * See if an object (`val`) is an instance of the supplied constructor. This\n * function will check up the inheritance chain, if any.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Type\n * @sig (* -> {*}) -> a -> Boolean\n * @param {Object} ctor A constructor\n * @param {*} val The value to test\n * @return {Boolean}\n * @example\n *\n *      R.is(Object, {}); //=> true\n *      R.is(Number, 1); //=> true\n *      R.is(Object, 1); //=> false\n *      R.is(String, 's'); //=> true\n *      R.is(String, new String('')); //=> true\n *      R.is(Object, new String('')); //=> true\n *      R.is(Object, 's'); //=> false\n *      R.is(Number, {}); //=> false\n */\nvar is = _curry2(function is(Ctor, val) {\n  return val != null && val.constructor === Ctor || val instanceof Ctor;\n});\n\n/**\n * Returns `true` if the given value is its type's empty value; `false`\n * otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig a -> Boolean\n * @param {*} x\n * @return {Boolean}\n * @see R.empty\n * @example\n *\n *      R.isEmpty([1, 2, 3]);   //=> false\n *      R.isEmpty([]);          //=> true\n *      R.isEmpty('');          //=> true\n *      R.isEmpty(null);        //=> false\n *      R.isEmpty({});          //=> true\n *      R.isEmpty({length: 0}); //=> false\n */\nvar isEmpty = _curry1(function isEmpty(x) {\n  return x != null && equals(x, empty(x));\n});\n\n/**\n * Returns a string made by inserting the `separator` between each element and\n * concatenating all the elements into a single string.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig String -> [a] -> String\n * @param {Number|String} separator The string used to separate the elements.\n * @param {Array} xs The elements to join into a string.\n * @return {String} str The string made by concatenating `xs` with `separator`.\n * @see R.split\n * @example\n *\n *      var spacer = R.join(' ');\n *      spacer(['a', 2, 3.4]);   //=> 'a 2 3.4'\n *      R.join('|', [1, 2, 3]);    //=> '1|2|3'\n */\nvar join = invoker(1, 'join');\n\n/**\n * juxt applies a list of functions to a list of values.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Function\n * @sig [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])\n * @param {Array} fns An array of functions\n * @return {Function} A function that returns a list of values after applying each of the original `fns` to its parameters.\n * @see R.applySpec\n * @example\n *\n *      var getRange = R.juxt([Math.min, Math.max]);\n *      getRange(3, 4, 9, -3); //=> [-3, 9]\n * @symb R.juxt([f, g, h])(a, b) = [f(a, b), g(a, b), h(a, b)]\n */\nvar juxt = _curry1(function juxt(fns) {\n  return converge(function() { return Array.prototype.slice.call(arguments, 0); }, fns);\n});\n\n/**\n * Returns a list containing the names of all the properties of the supplied\n * object, including prototype properties.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Object\n * @sig {k: v} -> [k]\n * @param {Object} obj The object to extract properties from\n * @return {Array} An array of the object's own and prototype properties.\n * @see R.keys, R.valuesIn\n * @example\n *\n *      var F = function() { this.x = 'X'; };\n *      F.prototype.y = 'Y';\n *      var f = new F();\n *      R.keysIn(f); //=> ['x', 'y']\n */\nvar keysIn = _curry1(function keysIn(obj) {\n  var prop;\n  var ks = [];\n  for (prop in obj) {\n    ks[ks.length] = prop;\n  }\n  return ks;\n});\n\n/**\n * Returns the position of the last occurrence of an item in an array, or -1 if\n * the item is not included in the array. [`R.equals`](#equals) is used to\n * determine equality.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> Number\n * @param {*} target The item to find.\n * @param {Array} xs The array to search in.\n * @return {Number} the index of the target, or -1 if the target is not found.\n * @see R.indexOf\n * @example\n *\n *      R.lastIndexOf(3, [-1,3,3,0,1,2,3,4]); //=> 6\n *      R.lastIndexOf(10, [1,2,3,4]); //=> -1\n */\nvar lastIndexOf = _curry2(function lastIndexOf(target, xs) {\n  if (typeof xs.lastIndexOf === 'function' && !_isArray(xs)) {\n    return xs.lastIndexOf(target);\n  } else {\n    var idx = xs.length - 1;\n    while (idx >= 0) {\n      if (equals(xs[idx], target)) {\n        return idx;\n      }\n      idx -= 1;\n    }\n    return -1;\n  }\n});\n\nfunction _isNumber(x) {\n  return Object.prototype.toString.call(x) === '[object Number]';\n}\n\n/**\n * Returns the number of elements in the array by returning `list.length`.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig [a] -> Number\n * @param {Array} list The array to inspect.\n * @return {Number} The length of the array.\n * @example\n *\n *      R.length([]); //=> 0\n *      R.length([1, 2, 3]); //=> 3\n */\nvar length = _curry1(function length(list) {\n  return list != null && _isNumber(list.length) ? list.length : NaN;\n});\n\n/**\n * Returns a lens for the given getter and setter functions. The getter \"gets\"\n * the value of the focus; the setter \"sets\" the value of the focus. The setter\n * should not mutate the data structure.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig (s -> a) -> ((a, s) -> s) -> Lens s a\n * @param {Function} getter\n * @param {Function} setter\n * @return {Lens}\n * @see R.view, R.set, R.over, R.lensIndex, R.lensProp\n * @example\n *\n *      var xLens = R.lens(R.prop('x'), R.assoc('x'));\n *\n *      R.view(xLens, {x: 1, y: 2});            //=> 1\n *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\n */\nvar lens = _curry2(function lens(getter, setter) {\n  return function(toFunctorFn) {\n    return function(target) {\n      return map(\n        function(focus) {\n          return setter(focus, target);\n        },\n        toFunctorFn(getter(target))\n      );\n    };\n  };\n});\n\n/**\n * Returns a lens whose focus is the specified index.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Number -> Lens s a\n * @param {Number} n\n * @return {Lens}\n * @see R.view, R.set, R.over\n * @example\n *\n *      var headLens = R.lensIndex(0);\n *\n *      R.view(headLens, ['a', 'b', 'c']);            //=> 'a'\n *      R.set(headLens, 'x', ['a', 'b', 'c']);        //=> ['x', 'b', 'c']\n *      R.over(headLens, R.toUpper, ['a', 'b', 'c']); //=> ['A', 'b', 'c']\n */\nvar lensIndex = _curry1(function lensIndex(n) {\n  return lens(nth(n), update(n));\n});\n\n/**\n * Returns a lens whose focus is the specified path.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Object\n * @typedefn Idx = String | Int\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig [Idx] -> Lens s a\n * @param {Array} path The path to use.\n * @return {Lens}\n * @see R.view, R.set, R.over\n * @example\n *\n *      var xHeadYLens = R.lensPath(['x', 0, 'y']);\n *\n *      R.view(xHeadYLens, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});\n *      //=> 2\n *      R.set(xHeadYLens, 1, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});\n *      //=> {x: [{y: 1, z: 3}, {y: 4, z: 5}]}\n *      R.over(xHeadYLens, R.negate, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});\n *      //=> {x: [{y: -2, z: 3}, {y: 4, z: 5}]}\n */\nvar lensPath = _curry1(function lensPath(p) {\n  return lens(path(p), assocPath(p));\n});\n\n/**\n * Returns a lens whose focus is the specified property.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig String -> Lens s a\n * @param {String} k\n * @return {Lens}\n * @see R.view, R.set, R.over\n * @example\n *\n *      var xLens = R.lensProp('x');\n *\n *      R.view(xLens, {x: 1, y: 2});            //=> 1\n *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\n */\nvar lensProp = _curry1(function lensProp(k) {\n  return lens(prop(k), assoc(k));\n});\n\n/**\n * Returns `true` if the first argument is less than the second; `false`\n * otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @see R.gt\n * @example\n *\n *      R.lt(2, 1); //=> false\n *      R.lt(2, 2); //=> false\n *      R.lt(2, 3); //=> true\n *      R.lt('a', 'z'); //=> true\n *      R.lt('z', 'a'); //=> false\n */\nvar lt = _curry2(function lt(a, b) { return a < b; });\n\n/**\n * Returns `true` if the first argument is less than or equal to the second;\n * `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> Boolean\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n * @see R.gte\n * @example\n *\n *      R.lte(2, 1); //=> false\n *      R.lte(2, 2); //=> true\n *      R.lte(2, 3); //=> true\n *      R.lte('a', 'z'); //=> true\n *      R.lte('z', 'a'); //=> false\n */\nvar lte = _curry2(function lte(a, b) { return a <= b; });\n\n/**\n * The `mapAccum` function behaves like a combination of map and reduce; it\n * applies a function to each element of a list, passing an accumulating\n * parameter from left to right, and returning a final value of this\n * accumulator together with the new list.\n *\n * The iterator function receives two arguments, *acc* and *value*, and should\n * return a tuple *[acc, value]*.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig ((acc, x) -> (acc, y)) -> acc -> [x] -> (acc, [y])\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.addIndex, R.mapAccumRight\n * @example\n *\n *      var digits = ['1', '2', '3', '4'];\n *      var appender = (a, b) => [a + b, a + b];\n *\n *      R.mapAccum(appender, 0, digits); //=> ['01234', ['01', '012', '0123', '01234']]\n * @symb R.mapAccum(f, a, [b, c, d]) = [\n *   f(f(f(a, b)[0], c)[0], d)[0],\n *   [\n *     f(a, b)[1],\n *     f(f(a, b)[0], c)[1],\n *     f(f(f(a, b)[0], c)[0], d)[1]\n *   ]\n * ]\n */\nvar mapAccum = _curry3(function mapAccum(fn, acc, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [];\n  var tuple = [acc];\n  while (idx < len) {\n    tuple = fn(tuple[0], list[idx]);\n    result[idx] = tuple[1];\n    idx += 1;\n  }\n  return [tuple[0], result];\n});\n\n/**\n * The `mapAccumRight` function behaves like a combination of map and reduce; it\n * applies a function to each element of a list, passing an accumulating\n * parameter from right to left, and returning a final value of this\n * accumulator together with the new list.\n *\n * Similar to [`mapAccum`](#mapAccum), except moves through the input list from\n * the right to the left.\n *\n * The iterator function receives two arguments, *value* and *acc*, and should\n * return a tuple *[value, acc]*.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig ((x, acc) -> (y, acc)) -> acc -> [x] -> ([y], acc)\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.addIndex, R.mapAccum\n * @example\n *\n *      var digits = ['1', '2', '3', '4'];\n *      var append = (a, b) => [a + b, a + b];\n *\n *      R.mapAccumRight(append, 5, digits); //=> [['12345', '2345', '345', '45'], '12345']\n * @symb R.mapAccumRight(f, a, [b, c, d]) = [\n *   [\n *     f(b, f(c, f(d, a)[0])[0])[1],\n *     f(c, f(d, a)[0])[1],\n *     f(d, a)[1],\n *   ]\n *   f(b, f(c, f(d, a)[0])[0])[0],\n * ]\n */\nvar mapAccumRight = _curry3(function mapAccumRight(fn, acc, list) {\n  var idx = list.length - 1;\n  var result = [];\n  var tuple = [acc];\n  while (idx >= 0) {\n    tuple = fn(list[idx], tuple[0]);\n    result[idx] = tuple[1];\n    idx -= 1;\n  }\n  return [result, tuple[0]];\n});\n\n/**\n * An Object-specific version of [`map`](#map). The function is applied to three\n * arguments: *(value, key, obj)*. If only the value is significant, use\n * [`map`](#map) instead.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Object\n * @sig ((*, String, Object) -> *) -> Object -> Object\n * @param {Function} fn\n * @param {Object} obj\n * @return {Object}\n * @see R.map\n * @example\n *\n *      var values = { x: 1, y: 2, z: 3 };\n *      var prependKeyAndDouble = (num, key, obj) => key + (num * 2);\n *\n *      R.mapObjIndexed(prependKeyAndDouble, values); //=> { x: 'x2', y: 'y4', z: 'z6' }\n */\nvar mapObjIndexed = _curry2(function mapObjIndexed(fn, obj) {\n  return _reduce(function(acc, key) {\n    acc[key] = fn(obj[key], key, obj);\n    return acc;\n  }, {}, keys(obj));\n});\n\n/**\n * Tests a regular expression against a String. Note that this function will\n * return an empty array when there are no matches. This differs from\n * [`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)\n * which returns `null` when there are no matches.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category String\n * @sig RegExp -> String -> [String | Undefined]\n * @param {RegExp} rx A regular expression.\n * @param {String} str The string to match against\n * @return {Array} The list of matches or empty array.\n * @see R.test\n * @example\n *\n *      R.match(/([a-z]a)/g, 'bananas'); //=> ['ba', 'na', 'na']\n *      R.match(/a/, 'b'); //=> []\n *      R.match(/a/, null); //=> TypeError: null does not have a method named \"match\"\n */\nvar match = _curry2(function match(rx, str) {\n  return str.match(rx) || [];\n});\n\n/**\n * `mathMod` behaves like the modulo operator should mathematically, unlike the\n * `%` operator (and by extension, [`R.modulo`](#modulo)). So while\n * `-17 % 5` is `-2`, `mathMod(-17, 5)` is `3`. `mathMod` requires Integer\n * arguments, and returns NaN when the modulus is zero or negative.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} m The dividend.\n * @param {Number} p the modulus.\n * @return {Number} The result of `b mod a`.\n * @see R.modulo\n * @example\n *\n *      R.mathMod(-17, 5);  //=> 3\n *      R.mathMod(17, 5);   //=> 2\n *      R.mathMod(17, -5);  //=> NaN\n *      R.mathMod(17, 0);   //=> NaN\n *      R.mathMod(17.2, 5); //=> NaN\n *      R.mathMod(17, 5.3); //=> NaN\n *\n *      var clock = R.mathMod(R.__, 12);\n *      clock(15); //=> 3\n *      clock(24); //=> 0\n *\n *      var seventeenMod = R.mathMod(17);\n *      seventeenMod(3);  //=> 2\n *      seventeenMod(4);  //=> 1\n *      seventeenMod(10); //=> 7\n */\nvar mathMod = _curry2(function mathMod(m, p) {\n  if (!_isInteger(m)) { return NaN; }\n  if (!_isInteger(p) || p < 1) { return NaN; }\n  return ((m % p) + p) % p;\n});\n\n/**\n * Takes a function and two values, and returns whichever value produces the\n * larger result when passed to the provided function.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Relation\n * @sig Ord b => (a -> b) -> a -> a -> a\n * @param {Function} f\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.max, R.minBy\n * @example\n *\n *      //  square :: Number -> Number\n *      var square = n => n * n;\n *\n *      R.maxBy(square, -3, 2); //=> -3\n *\n *      R.reduce(R.maxBy(square), 0, [3, -5, 4, 1, -2]); //=> -5\n *      R.reduce(R.maxBy(square), 0, []); //=> 0\n */\nvar maxBy = _curry3(function maxBy(f, a, b) {\n  return f(b) > f(a) ? b : a;\n});\n\n/**\n * Adds together all the elements of a list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig [Number] -> Number\n * @param {Array} list An array of numbers\n * @return {Number} The sum of all the numbers in the list.\n * @see R.reduce\n * @example\n *\n *      R.sum([2,4,6,8,100,1]); //=> 121\n */\nvar sum = reduce(add, 0);\n\n/**\n * Returns the mean of the given list of numbers.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Math\n * @sig [Number] -> Number\n * @param {Array} list\n * @return {Number}\n * @see R.median\n * @example\n *\n *      R.mean([2, 7, 9]); //=> 6\n *      R.mean([]); //=> NaN\n */\nvar mean = _curry1(function mean(list) {\n  return sum(list) / list.length;\n});\n\n/**\n * Returns the median of the given list of numbers.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Math\n * @sig [Number] -> Number\n * @param {Array} list\n * @return {Number}\n * @see R.mean\n * @example\n *\n *      R.median([2, 9, 7]); //=> 7\n *      R.median([7, 2, 10, 9]); //=> 8\n *      R.median([]); //=> NaN\n */\nvar median = _curry1(function median(list) {\n  var len = list.length;\n  if (len === 0) {\n    return NaN;\n  }\n  var width = 2 - len % 2;\n  var idx = (len - width) / 2;\n  return mean(Array.prototype.slice.call(list, 0).sort(function(a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n  }).slice(idx, idx + width));\n});\n\n/**\n * A customisable version of [`R.memoize`](#memoize). `memoizeWith` takes an\n * additional function that will be applied to a given argument set and used to\n * create the cache key under which the results of the function to be memoized\n * will be stored. Care must be taken when implementing key generation to avoid\n * clashes that may overwrite previous entries erroneously.\n *\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Function\n * @sig (*... -> String) -> (*... -> a) -> (*... -> a)\n * @param {Function} fn The function to generate the cache key.\n * @param {Function} fn The function to memoize.\n * @return {Function} Memoized version of `fn`.\n * @see R.memoize\n * @example\n *\n *      let count = 0;\n *      const factorial = R.memoizeWith(R.identity, n => {\n *        count += 1;\n *        return R.product(R.range(1, n + 1));\n *      });\n *      factorial(5); //=> 120\n *      factorial(5); //=> 120\n *      factorial(5); //=> 120\n *      count; //=> 1\n */\nvar memoizeWith = _curry2(function memoizeWith(mFn, fn) {\n  var cache = {};\n  return _arity(fn.length, function() {\n    var key = mFn.apply(this, arguments);\n    if (!_has(key, cache)) {\n      cache[key] = fn.apply(this, arguments);\n    }\n    return cache[key];\n  });\n});\n\n/**\n * Creates a new function that, when invoked, caches the result of calling `fn`\n * for a given argument set and returns the result. Subsequent calls to the\n * memoized `fn` with the same argument set will not result in an additional\n * call to `fn`; instead, the cached result for that set of arguments will be\n * returned.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (*... -> a) -> (*... -> a)\n * @param {Function} fn The function to memoize.\n * @return {Function} Memoized version of `fn`.\n * @see R.memoizeWith\n * @deprecated since v0.25.0\n * @example\n *\n *      let count = 0;\n *      const factorial = R.memoize(n => {\n *        count += 1;\n *        return R.product(R.range(1, n + 1));\n *      });\n *      factorial(5); //=> 120\n *      factorial(5); //=> 120\n *      factorial(5); //=> 120\n *      count; //=> 1\n */\nvar memoize = memoizeWith(function() {\n  return toString$1(arguments);\n});\n\n/**\n * Create a new object with the own properties of the first object merged with\n * the own properties of the second object. If a key exists in both objects,\n * the value from the second object will be used.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {k: v} -> {k: v} -> {k: v}\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.mergeDeepRight, R.mergeWith, R.mergeWithKey\n * @example\n *\n *      R.merge({ 'name': 'fred', 'age': 10 }, { 'age': 40 });\n *      //=> { 'name': 'fred', 'age': 40 }\n *\n *      var resetToDefault = R.merge(R.__, {x: 0});\n *      resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}\n * @symb R.merge({ x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: 5, z: 3 }\n */\nvar merge = _curry2(function merge(l, r) {\n  return _assign({}, l, r);\n});\n\n/**\n * Merges a list of objects together into one object.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig [{k: v}] -> {k: v}\n * @param {Array} list An array of objects\n * @return {Object} A merged object.\n * @see R.reduce\n * @example\n *\n *      R.mergeAll([{foo:1},{bar:2},{baz:3}]); //=> {foo:1,bar:2,baz:3}\n *      R.mergeAll([{foo:1},{foo:2},{bar:2}]); //=> {foo:2,bar:2}\n * @symb R.mergeAll([{ x: 1 }, { y: 2 }, { z: 3 }]) = { x: 1, y: 2, z: 3 }\n */\nvar mergeAll = _curry1(function mergeAll(list) {\n  return _assign.apply(null, [{}].concat(list));\n});\n\n/**\n * Creates a new object with the own properties of the two provided objects. If\n * a key exists in both objects, the provided function is applied to the key\n * and the values associated with the key in each object, with the result being\n * used as the value associated with the key in the returned object.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Object\n * @sig ((String, a, a) -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.mergeDeepWithKey, R.merge, R.mergeWith\n * @example\n *\n *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r\n *      R.mergeWithKey(concatValues,\n *                     { a: true, thing: 'foo', values: [10, 20] },\n *                     { b: true, thing: 'bar', values: [15, 35] });\n *      //=> { a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] }\n * @symb R.mergeWithKey(f, { x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: f('y', 2, 5), z: 3 }\n */\nvar mergeWithKey = _curry3(function mergeWithKey(fn, l, r) {\n  var result = {};\n  var k;\n\n  for (k in l) {\n    if (_has(k, l)) {\n      result[k] = _has(k, r) ? fn(k, l[k], r[k]) : l[k];\n    }\n  }\n\n  for (k in r) {\n    if (_has(k, r) && !(_has(k, result))) {\n      result[k] = r[k];\n    }\n  }\n\n  return result;\n});\n\n/**\n * Creates a new object with the own properties of the two provided objects.\n * If a key exists in both objects:\n * - and both associated values are also objects then the values will be\n *   recursively merged.\n * - otherwise the provided function is applied to the key and associated values\n *   using the resulting value as the new value associated with the key.\n * If a key only exists in one object, the value will be associated with the key\n * of the resulting object.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Object\n * @sig ((String, a, a) -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} lObj\n * @param {Object} rObj\n * @return {Object}\n * @see R.mergeWithKey, R.mergeDeep, R.mergeDeepWith\n * @example\n *\n *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r\n *      R.mergeDeepWithKey(concatValues,\n *                         { a: true, c: { thing: 'foo', values: [10, 20] }},\n *                         { b: true, c: { thing: 'bar', values: [15, 35] }});\n *      //=> { a: true, b: true, c: { thing: 'bar', values: [10, 20, 15, 35] }}\n */\nvar mergeDeepWithKey = _curry3(function mergeDeepWithKey(fn, lObj, rObj) {\n  return mergeWithKey(function(k, lVal, rVal) {\n    if (_isObject(lVal) && _isObject(rVal)) {\n      return mergeDeepWithKey(fn, lVal, rVal);\n    } else {\n      return fn(k, lVal, rVal);\n    }\n  }, lObj, rObj);\n});\n\n/**\n * Creates a new object with the own properties of the first object merged with\n * the own properties of the second object. If a key exists in both objects:\n * - and both values are objects, the two values will be recursively merged\n * - otherwise the value from the first object will be used.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Object\n * @sig {a} -> {a} -> {a}\n * @param {Object} lObj\n * @param {Object} rObj\n * @return {Object}\n * @see R.merge, R.mergeDeepRight, R.mergeDeepWith, R.mergeDeepWithKey\n * @example\n *\n *      R.mergeDeepLeft({ name: 'fred', age: 10, contact: { email: 'moo@example.com' }},\n *                      { age: 40, contact: { email: 'baa@example.com' }});\n *      //=> { name: 'fred', age: 10, contact: { email: 'moo@example.com' }}\n */\nvar mergeDeepLeft = _curry2(function mergeDeepLeft(lObj, rObj) {\n  return mergeDeepWithKey(function(k, lVal, rVal) {\n    return lVal;\n  }, lObj, rObj);\n});\n\n/**\n * Creates a new object with the own properties of the first object merged with\n * the own properties of the second object. If a key exists in both objects:\n * - and both values are objects, the two values will be recursively merged\n * - otherwise the value from the second object will be used.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Object\n * @sig {a} -> {a} -> {a}\n * @param {Object} lObj\n * @param {Object} rObj\n * @return {Object}\n * @see R.merge, R.mergeDeepLeft, R.mergeDeepWith, R.mergeDeepWithKey\n * @example\n *\n *      R.mergeDeepRight({ name: 'fred', age: 10, contact: { email: 'moo@example.com' }},\n *                       { age: 40, contact: { email: 'baa@example.com' }});\n *      //=> { name: 'fred', age: 40, contact: { email: 'baa@example.com' }}\n */\nvar mergeDeepRight = _curry2(function mergeDeepRight(lObj, rObj) {\n  return mergeDeepWithKey(function(k, lVal, rVal) {\n    return rVal;\n  }, lObj, rObj);\n});\n\n/**\n * Creates a new object with the own properties of the two provided objects.\n * If a key exists in both objects:\n * - and both associated values are also objects then the values will be\n *   recursively merged.\n * - otherwise the provided function is applied to associated values using the\n *   resulting value as the new value associated with the key.\n * If a key only exists in one object, the value will be associated with the key\n * of the resulting object.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Object\n * @sig ((a, a) -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} lObj\n * @param {Object} rObj\n * @return {Object}\n * @see R.mergeWith, R.mergeDeep, R.mergeDeepWithKey\n * @example\n *\n *      R.mergeDeepWith(R.concat,\n *                      { a: true, c: { values: [10, 20] }},\n *                      { b: true, c: { values: [15, 35] }});\n *      //=> { a: true, b: true, c: { values: [10, 20, 15, 35] }}\n */\nvar mergeDeepWith = _curry3(function mergeDeepWith(fn, lObj, rObj) {\n  return mergeDeepWithKey(function(k, lVal, rVal) {\n    return fn(lVal, rVal);\n  }, lObj, rObj);\n});\n\n/**\n * Creates a new object with the own properties of the two provided objects. If\n * a key exists in both objects, the provided function is applied to the values\n * associated with the key in each object, with the result being used as the\n * value associated with the key in the returned object.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Object\n * @sig ((a, a) -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.mergeDeepWith, R.merge, R.mergeWithKey\n * @example\n *\n *      R.mergeWith(R.concat,\n *                  { a: true, values: [10, 20] },\n *                  { b: true, values: [15, 35] });\n *      //=> { a: true, b: true, values: [10, 20, 15, 35] }\n */\nvar mergeWith = _curry3(function mergeWith(fn, l, r) {\n  return mergeWithKey(function(_, _l, _r) {\n    return fn(_l, _r);\n  }, l, r);\n});\n\n/**\n * Returns the smaller of its two arguments.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> a\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.minBy, R.max\n * @example\n *\n *      R.min(789, 123); //=> 123\n *      R.min('a', 'b'); //=> 'a'\n */\nvar min = _curry2(function min(a, b) { return b < a ? b : a; });\n\n/**\n * Takes a function and two values, and returns whichever value produces the\n * smaller result when passed to the provided function.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Relation\n * @sig Ord b => (a -> b) -> a -> a -> a\n * @param {Function} f\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.min, R.maxBy\n * @example\n *\n *      //  square :: Number -> Number\n *      var square = n => n * n;\n *\n *      R.minBy(square, -3, 2); //=> 2\n *\n *      R.reduce(R.minBy(square), Infinity, [3, -5, 4, 1, -2]); //=> 1\n *      R.reduce(R.minBy(square), Infinity, []); //=> Infinity\n */\nvar minBy = _curry3(function minBy(f, a, b) {\n  return f(b) < f(a) ? b : a;\n});\n\n/**\n * Divides the first parameter by the second and returns the remainder. Note\n * that this function preserves the JavaScript-style behavior for modulo. For\n * mathematical modulo see [`mathMod`](#mathMod).\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a The value to the divide.\n * @param {Number} b The pseudo-modulus\n * @return {Number} The result of `b % a`.\n * @see R.mathMod\n * @example\n *\n *      R.modulo(17, 3); //=> 2\n *      // JS behavior:\n *      R.modulo(-17, 3); //=> -2\n *      R.modulo(17, -3); //=> 2\n *\n *      var isOdd = R.modulo(R.__, 2);\n *      isOdd(42); //=> 0\n *      isOdd(21); //=> 1\n */\nvar modulo = _curry2(function modulo(a, b) { return a % b; });\n\n/**\n * Multiplies two numbers. Equivalent to `a * b` but curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a The first value.\n * @param {Number} b The second value.\n * @return {Number} The result of `a * b`.\n * @see R.divide\n * @example\n *\n *      var double = R.multiply(2);\n *      var triple = R.multiply(3);\n *      double(3);       //=>  6\n *      triple(4);       //=> 12\n *      R.multiply(2, 5);  //=> 10\n */\nvar multiply = _curry2(function multiply(a, b) { return a * b; });\n\n/**\n * Negates its argument.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Math\n * @sig Number -> Number\n * @param {Number} n\n * @return {Number}\n * @example\n *\n *      R.negate(42); //=> -42\n */\nvar negate = _curry1(function negate(n) { return -n; });\n\n/**\n * Returns `true` if no elements of the list match the predicate, `false`\n * otherwise.\n *\n * Dispatches to the `any` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> Boolean\n * @param {Function} fn The predicate function.\n * @param {Array} list The array to consider.\n * @return {Boolean} `true` if the predicate is not satisfied by every element, `false` otherwise.\n * @see R.all, R.any\n * @example\n *\n *      var isEven = n => n % 2 === 0;\n *      var isOdd = n => n % 2 === 1;\n *\n *      R.none(isEven, [1, 3, 5, 7, 9, 11]); //=> true\n *      R.none(isOdd, [1, 3, 5, 7, 8, 11]); //=> false\n */\nvar none = _curry2(_complement(_dispatchable(['any'], _xany, any)));\n\n/**\n * Returns a function which returns its nth argument.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Function\n * @sig Number -> *... -> *\n * @param {Number} n\n * @return {Function}\n * @example\n *\n *      R.nthArg(1)('a', 'b', 'c'); //=> 'b'\n *      R.nthArg(-1)('a', 'b', 'c'); //=> 'c'\n * @symb R.nthArg(-1)(a, b, c) = c\n * @symb R.nthArg(0)(a, b, c) = a\n * @symb R.nthArg(1)(a, b, c) = b\n */\nvar nthArg = _curry1(function nthArg(n) {\n  var arity = n < 0 ? 1 : n + 1;\n  return curryN(arity, function() {\n    return nth(n, arguments);\n  });\n});\n\n/**\n * `o` is a curried composition function that returns a unary function.\n * Like [`compose`](#compose), `o` performs right-to-left function composition.\n * Unlike [`compose`](#compose), the rightmost function passed to `o` will be\n * invoked with only one argument.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Function\n * @sig (b -> c) -> (a -> b) -> a -> c\n * @param {Function} f\n * @param {Function} g\n * @return {Function}\n * @see R.compose, R.pipe\n * @example\n *\n *      var classyGreeting = name => \"The name's \" + name.last + \", \" + name.first + \" \" + name.last\n *      var yellGreeting = R.o(R.toUpper, classyGreeting);\n *      yellGreeting({first: 'James', last: 'Bond'}); //=> \"THE NAME'S BOND, JAMES BOND\"\n *\n *      R.o(R.multiply(10), R.add(10))(-4) //=> 60\n *\n * @symb R.o(f, g, x) = f(g(x))\n */\nvar o = _curry3(function o(f, g, x) {\n  return f(g(x));\n});\n\nfunction _of(x) { return [x]; }\n\n/**\n * Returns a singleton array containing the value provided.\n *\n * Note this `of` is different from the ES6 `of`; See\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Function\n * @sig a -> [a]\n * @param {*} x any value\n * @return {Array} An array wrapping `x`.\n * @example\n *\n *      R.of(null); //=> [null]\n *      R.of([42]); //=> [[42]]\n */\nvar of = _curry1(_of);\n\n/**\n * Returns a partial copy of an object omitting the keys specified.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig [String] -> {String: *} -> {String: *}\n * @param {Array} names an array of String property names to omit from the new object\n * @param {Object} obj The object to copy from\n * @return {Object} A new object with properties from `names` not on it.\n * @see R.pick\n * @example\n *\n *      R.omit(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, c: 3}\n */\nvar omit = _curry2(function omit(names, obj) {\n  var result = {};\n  var index = {};\n  var idx = 0;\n  var len = names.length;\n\n  while (idx < len) {\n    index[names[idx]] = 1;\n    idx += 1;\n  }\n\n  for (var prop in obj) {\n    if (!index.hasOwnProperty(prop)) {\n      result[prop] = obj[prop];\n    }\n  }\n  return result;\n});\n\n/**\n * Accepts a function `fn` and returns a function that guards invocation of\n * `fn` such that `fn` can only ever be called once, no matter how many times\n * the returned function is invoked. The first value calculated is returned in\n * subsequent invocations.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (a... -> b) -> (a... -> b)\n * @param {Function} fn The function to wrap in a call-only-once wrapper.\n * @return {Function} The wrapped function.\n * @example\n *\n *      var addOneOnce = R.once(x => x + 1);\n *      addOneOnce(10); //=> 11\n *      addOneOnce(addOneOnce(50)); //=> 11\n */\nvar once = _curry1(function once(fn) {\n  var called = false;\n  var result;\n  return _arity(fn.length, function() {\n    if (called) {\n      return result;\n    }\n    called = true;\n    result = fn.apply(this, arguments);\n    return result;\n  });\n});\n\n// `Identity` is a functor that holds a single value, where `map` simply\n// transforms the held value with the provided function.\nvar Identity = function(x) {\n  return {value: x, map: function(f) { return Identity(f(x)); }};\n};\n\n\n/**\n * Returns the result of \"setting\" the portion of the given data structure\n * focused by the given lens to the result of applying the given function to\n * the focused value.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Lens s a -> (a -> a) -> s -> s\n * @param {Lens} lens\n * @param {*} v\n * @param {*} x\n * @return {*}\n * @see R.prop, R.lensIndex, R.lensProp\n * @example\n *\n *      var headLens = R.lensIndex(0);\n *\n *      R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']\n */\nvar over = _curry3(function over(lens, f, x) {\n  // The value returned by the getter function is first transformed with `f`,\n  // then set as the value of an `Identity`. This is then mapped over with the\n  // setter function of the lens.\n  return lens(function(y) { return Identity(f(y)); })(x).value;\n});\n\n/**\n * Takes two arguments, `fst` and `snd`, and returns `[fst, snd]`.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category List\n * @sig a -> b -> (a,b)\n * @param {*} fst\n * @param {*} snd\n * @return {Array}\n * @see R.objOf, R.of\n * @example\n *\n *      R.pair('foo', 'bar'); //=> ['foo', 'bar']\n */\nvar pair = _curry2(function pair(fst, snd) { return [fst, snd]; });\n\nfunction _createPartialApplicator(concat) {\n  return _curry2(function(fn, args) {\n    return _arity(Math.max(0, fn.length - args.length), function() {\n      return fn.apply(this, concat(args, arguments));\n    });\n  });\n}\n\n/**\n * Takes a function `f` and a list of arguments, and returns a function `g`.\n * When applied, `g` returns the result of applying `f` to the arguments\n * provided initially followed by the arguments provided to `g`.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)\n * @param {Function} f\n * @param {Array} args\n * @return {Function}\n * @see R.partialRight\n * @example\n *\n *      var multiply2 = (a, b) => a * b;\n *      var double = R.partial(multiply2, [2]);\n *      double(2); //=> 4\n *\n *      var greet = (salutation, title, firstName, lastName) =>\n *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n *\n *      var sayHello = R.partial(greet, ['Hello']);\n *      var sayHelloToMs = R.partial(sayHello, ['Ms.']);\n *      sayHelloToMs('Jane', 'Jones'); //=> 'Hello, Ms. Jane Jones!'\n * @symb R.partial(f, [a, b])(c, d) = f(a, b, c, d)\n */\nvar partial = _createPartialApplicator(_concat);\n\n/**\n * Takes a function `f` and a list of arguments, and returns a function `g`.\n * When applied, `g` returns the result of applying `f` to the arguments\n * provided to `g` followed by the arguments provided initially.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)\n * @param {Function} f\n * @param {Array} args\n * @return {Function}\n * @see R.partial\n * @example\n *\n *      var greet = (salutation, title, firstName, lastName) =>\n *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n *\n *      var greetMsJaneJones = R.partialRight(greet, ['Ms.', 'Jane', 'Jones']);\n *\n *      greetMsJaneJones('Hello'); //=> 'Hello, Ms. Jane Jones!'\n * @symb R.partialRight(f, [a, b])(c, d) = f(c, d, a, b)\n */\nvar partialRight = _createPartialApplicator(flip(_concat));\n\n/**\n * Takes a predicate and a list or other `Filterable` object and returns the\n * pair of filterable objects of the same type of elements which do and do not\n * satisfy, the predicate, respectively. Filterable objects include plain objects or any object\n * that has a filter method such as `Array`.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> [f a, f a]\n * @param {Function} pred A predicate to determine which side the element belongs to.\n * @param {Array} filterable the list (or other filterable) to partition.\n * @return {Array} An array, containing first the subset of elements that satisfy the\n *         predicate, and second the subset of elements that do not satisfy.\n * @see R.filter, R.reject\n * @example\n *\n *      R.partition(R.contains('s'), ['sss', 'ttt', 'foo', 'bars']);\n *      // => [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]\n *\n *      R.partition(R.contains('s'), { a: 'sss', b: 'ttt', foo: 'bars' });\n *      // => [ { a: 'sss', foo: 'bars' }, { b: 'ttt' }  ]\n */\nvar partition = juxt([filter, reject]);\n\n/**\n * Determines whether a nested path on an object has a specific value, in\n * [`R.equals`](#equals) terms. Most likely used to filter a list.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Relation\n * @typedefn Idx = String | Int\n * @sig [Idx] -> a -> {a} -> Boolean\n * @param {Array} path The path of the nested property to use\n * @param {*} val The value to compare the nested property with\n * @param {Object} obj The object to check the nested property in\n * @return {Boolean} `true` if the value equals the nested object property,\n *         `false` otherwise.\n * @example\n *\n *      var user1 = { address: { zipCode: 90210 } };\n *      var user2 = { address: { zipCode: 55555 } };\n *      var user3 = { name: 'Bob' };\n *      var users = [ user1, user2, user3 ];\n *      var isFamous = R.pathEq(['address', 'zipCode'], 90210);\n *      R.filter(isFamous, users); //=> [ user1 ]\n */\nvar pathEq = _curry3(function pathEq(_path, val, obj) {\n  return equals(path(_path, obj), val);\n});\n\n/**\n * If the given, non-null object has a value at the given path, returns the\n * value at that path. Otherwise returns the provided default value.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Object\n * @typedefn Idx = String | Int\n * @sig a -> [Idx] -> {a} -> a\n * @param {*} d The default value.\n * @param {Array} p The path to use.\n * @param {Object} obj The object to retrieve the nested property from.\n * @return {*} The data at `path` of the supplied object or the default value.\n * @example\n *\n *      R.pathOr('N/A', ['a', 'b'], {a: {b: 2}}); //=> 2\n *      R.pathOr('N/A', ['a', 'b'], {c: {b: 2}}); //=> \"N/A\"\n */\nvar pathOr = _curry3(function pathOr(d, p, obj) {\n  return defaultTo(d, path(p, obj));\n});\n\n/**\n * Returns `true` if the specified object property at given path satisfies the\n * given predicate; `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Logic\n * @typedefn Idx = String | Int\n * @sig (a -> Boolean) -> [Idx] -> {a} -> Boolean\n * @param {Function} pred\n * @param {Array} propPath\n * @param {*} obj\n * @return {Boolean}\n * @see R.propSatisfies, R.path\n * @example\n *\n *      R.pathSatisfies(y => y > 0, ['x', 'y'], {x: {y: 2}}); //=> true\n */\nvar pathSatisfies = _curry3(function pathSatisfies(pred, propPath, obj) {\n  return propPath.length > 0 && pred(path(propPath, obj));\n});\n\n/**\n * Returns a partial copy of an object containing only the keys specified. If\n * the key does not exist, the property is ignored.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig [k] -> {k: v} -> {k: v}\n * @param {Array} names an array of String property names to copy onto a new object\n * @param {Object} obj The object to copy from\n * @return {Object} A new object with only properties from `names` on it.\n * @see R.omit, R.props\n * @example\n *\n *      R.pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n *      R.pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1}\n */\nvar pick = _curry2(function pick(names, obj) {\n  var result = {};\n  var idx = 0;\n  while (idx < names.length) {\n    if (names[idx] in obj) {\n      result[names[idx]] = obj[names[idx]];\n    }\n    idx += 1;\n  }\n  return result;\n});\n\n/**\n * Similar to `pick` except that this one includes a `key: undefined` pair for\n * properties that don't exist.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig [k] -> {k: v} -> {k: v}\n * @param {Array} names an array of String property names to copy onto a new object\n * @param {Object} obj The object to copy from\n * @return {Object} A new object with only properties from `names` on it.\n * @see R.pick\n * @example\n *\n *      R.pickAll(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n *      R.pickAll(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, e: undefined, f: undefined}\n */\nvar pickAll = _curry2(function pickAll(names, obj) {\n  var result = {};\n  var idx = 0;\n  var len = names.length;\n  while (idx < len) {\n    var name = names[idx];\n    result[name] = obj[name];\n    idx += 1;\n  }\n  return result;\n});\n\n/**\n * Returns a partial copy of an object containing only the keys that satisfy\n * the supplied predicate.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Object\n * @sig ((v, k) -> Boolean) -> {k: v} -> {k: v}\n * @param {Function} pred A predicate to determine whether or not a key\n *        should be included on the output object.\n * @param {Object} obj The object to copy from\n * @return {Object} A new object with only properties that satisfy `pred`\n *         on it.\n * @see R.pick, R.filter\n * @example\n *\n *      var isUpperCase = (val, key) => key.toUpperCase() === key;\n *      R.pickBy(isUpperCase, {a: 1, b: 2, A: 3, B: 4}); //=> {A: 3, B: 4}\n */\nvar pickBy = _curry2(function pickBy(test, obj) {\n  var result = {};\n  for (var prop in obj) {\n    if (test(obj[prop], prop, obj)) {\n      result[prop] = obj[prop];\n    }\n  }\n  return result;\n});\n\n/**\n * Returns the left-to-right Kleisli composition of the provided functions,\n * each of which must return a value of a type supported by [`chain`](#chain).\n *\n * `R.pipeK(f, g, h)` is equivalent to `R.pipe(f, R.chain(g), R.chain(h))`.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Function\n * @sig Chain m => ((a -> m b), (b -> m c), ..., (y -> m z)) -> (a -> m z)\n * @param {...Function}\n * @return {Function}\n * @see R.composeK\n * @example\n *\n *      //  parseJson :: String -> Maybe *\n *      //  get :: String -> Object -> Maybe *\n *\n *      //  getStateCode :: Maybe String -> Maybe String\n *      var getStateCode = R.pipeK(\n *        parseJson,\n *        get('user'),\n *        get('address'),\n *        get('state'),\n *        R.compose(Maybe.of, R.toUpper)\n *      );\n *\n *      getStateCode('{\"user\":{\"address\":{\"state\":\"ny\"}}}');\n *      //=> Just('NY')\n *      getStateCode('[Invalid JSON]');\n *      //=> Nothing()\n * @symb R.pipeK(f, g, h)(a) = R.chain(h, R.chain(g, f(a)))\n */\nfunction pipeK() {\n  if (arguments.length === 0) {\n    throw new Error('pipeK requires at least one argument');\n  }\n  return composeK.apply(this, reverse(arguments));\n}\n\n/**\n * Returns a new list with the given element at the front, followed by the\n * contents of the list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> [a]\n * @param {*} el The item to add to the head of the output list.\n * @param {Array} list The array to add to the tail of the output list.\n * @return {Array} A new array.\n * @see R.append\n * @example\n *\n *      R.prepend('fee', ['fi', 'fo', 'fum']); //=> ['fee', 'fi', 'fo', 'fum']\n */\nvar prepend = _curry2(function prepend(el, list) {\n  return _concat([el], list);\n});\n\n/**\n * Multiplies together all the elements of a list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig [Number] -> Number\n * @param {Array} list An array of numbers\n * @return {Number} The product of all the numbers in the list.\n * @see R.reduce\n * @example\n *\n *      R.product([2,4,6,8,100,1]); //=> 38400\n */\nvar product = reduce(multiply, 1);\n\n/**\n * Accepts a function `fn` and a list of transformer functions and returns a\n * new curried function. When the new function is invoked, it calls the\n * function `fn` with parameters consisting of the result of calling each\n * supplied handler on successive arguments to the new function.\n *\n * If more arguments are passed to the returned function than transformer\n * functions, those arguments are passed directly to `fn` as additional\n * parameters. If you expect additional arguments that don't need to be\n * transformed, although you can ignore them, it's best to pass an identity\n * function so that the new function reports the correct arity.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig ((x1, x2, ...) -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)\n * @param {Function} fn The function to wrap.\n * @param {Array} transformers A list of transformer functions\n * @return {Function} The wrapped function.\n * @see R.converge\n * @example\n *\n *      R.useWith(Math.pow, [R.identity, R.identity])(3, 4); //=> 81\n *      R.useWith(Math.pow, [R.identity, R.identity])(3)(4); //=> 81\n *      R.useWith(Math.pow, [R.dec, R.inc])(3, 4); //=> 32\n *      R.useWith(Math.pow, [R.dec, R.inc])(3)(4); //=> 32\n * @symb R.useWith(f, [g, h])(a, b) = f(g(a), h(b))\n */\nvar useWith = _curry2(function useWith(fn, transformers) {\n  return curryN(transformers.length, function() {\n    var args = [];\n    var idx = 0;\n    while (idx < transformers.length) {\n      args.push(transformers[idx].call(this, arguments[idx]));\n      idx += 1;\n    }\n    return fn.apply(this, args.concat(Array.prototype.slice.call(arguments, transformers.length)));\n  });\n});\n\n/**\n * Reasonable analog to SQL `select` statement.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @category Relation\n * @sig [k] -> [{k: v}] -> [{k: v}]\n * @param {Array} props The property names to project\n * @param {Array} objs The objects to query\n * @return {Array} An array of objects with just the `props` properties.\n * @example\n *\n *      var abby = {name: 'Abby', age: 7, hair: 'blond', grade: 2};\n *      var fred = {name: 'Fred', age: 12, hair: 'brown', grade: 7};\n *      var kids = [abby, fred];\n *      R.project(['name', 'grade'], kids); //=> [{name: 'Abby', grade: 2}, {name: 'Fred', grade: 7}]\n */\nvar project = useWith(_map, [pickAll, identity]); // passing `identity` gives correct arity\n\n/**\n * Returns `true` if the specified object property is equal, in\n * [`R.equals`](#equals) terms, to the given value; `false` otherwise.\n * You can test multiple properties with [`R.where`](#where).\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig String -> a -> Object -> Boolean\n * @param {String} name\n * @param {*} val\n * @param {*} obj\n * @return {Boolean}\n * @see R.whereEq, R.propSatisfies, R.equals\n * @example\n *\n *      var abby = {name: 'Abby', age: 7, hair: 'blond'};\n *      var fred = {name: 'Fred', age: 12, hair: 'brown'};\n *      var rusty = {name: 'Rusty', age: 10, hair: 'brown'};\n *      var alois = {name: 'Alois', age: 15, disposition: 'surly'};\n *      var kids = [abby, fred, rusty, alois];\n *      var hasBrownHair = R.propEq('hair', 'brown');\n *      R.filter(hasBrownHair, kids); //=> [fred, rusty]\n */\nvar propEq = _curry3(function propEq(name, val, obj) {\n  return equals(val, obj[name]);\n});\n\n/**\n * Returns `true` if the specified object property is of the given type;\n * `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Type\n * @sig Type -> String -> Object -> Boolean\n * @param {Function} type\n * @param {String} name\n * @param {*} obj\n * @return {Boolean}\n * @see R.is, R.propSatisfies\n * @example\n *\n *      R.propIs(Number, 'x', {x: 1, y: 2});  //=> true\n *      R.propIs(Number, 'x', {x: 'foo'});    //=> false\n *      R.propIs(Number, 'x', {});            //=> false\n */\nvar propIs = _curry3(function propIs(type, name, obj) {\n  return is(type, obj[name]);\n});\n\n/**\n * If the given, non-null object has an own property with the specified name,\n * returns the value of that property. Otherwise returns the provided default\n * value.\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Object\n * @sig a -> String -> Object -> a\n * @param {*} val The default value.\n * @param {String} p The name of the property to return.\n * @param {Object} obj The object to query.\n * @return {*} The value of given property of the supplied object or the default value.\n * @example\n *\n *      var alice = {\n *        name: 'ALICE',\n *        age: 101\n *      };\n *      var favorite = R.prop('favoriteLibrary');\n *      var favoriteWithDefault = R.propOr('Ramda', 'favoriteLibrary');\n *\n *      favorite(alice);  //=> undefined\n *      favoriteWithDefault(alice);  //=> 'Ramda'\n */\nvar propOr = _curry3(function propOr(val, p, obj) {\n  return (obj != null && _has(p, obj)) ? obj[p] : val;\n});\n\n/**\n * Returns `true` if the specified object property satisfies the given\n * predicate; `false` otherwise. You can test multiple properties with\n * [`R.where`](#where).\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Logic\n * @sig (a -> Boolean) -> String -> {String: a} -> Boolean\n * @param {Function} pred\n * @param {String} name\n * @param {*} obj\n * @return {Boolean}\n * @see R.where, R.propEq, R.propIs\n * @example\n *\n *      R.propSatisfies(x => x > 0, 'x', {x: 1, y: 2}); //=> true\n */\nvar propSatisfies = _curry3(function propSatisfies(pred, name, obj) {\n  return pred(obj[name]);\n});\n\n/**\n * Acts as multiple `prop`: array of keys in, array of values out. Preserves\n * order.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig [k] -> {k: v} -> [v]\n * @param {Array} ps The property names to fetch\n * @param {Object} obj The object to query\n * @return {Array} The corresponding values or partially applied function.\n * @example\n *\n *      R.props(['x', 'y'], {x: 1, y: 2}); //=> [1, 2]\n *      R.props(['c', 'a', 'b'], {b: 2, a: 1}); //=> [undefined, 1, 2]\n *\n *      var fullName = R.compose(R.join(' '), R.props(['first', 'last']));\n *      fullName({last: 'Bullet-Tooth', age: 33, first: 'Tony'}); //=> 'Tony Bullet-Tooth'\n */\nvar props = _curry2(function props(ps, obj) {\n  var len = ps.length;\n  var out = [];\n  var idx = 0;\n\n  while (idx < len) {\n    out[idx] = obj[ps[idx]];\n    idx += 1;\n  }\n\n  return out;\n});\n\n/**\n * Returns a list of numbers from `from` (inclusive) to `to` (exclusive).\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> Number -> [Number]\n * @param {Number} from The first number in the list.\n * @param {Number} to One more than the last number in the list.\n * @return {Array} The list of numbers in tthe set `[a, b)`.\n * @example\n *\n *      R.range(1, 5);    //=> [1, 2, 3, 4]\n *      R.range(50, 53);  //=> [50, 51, 52]\n */\nvar range = _curry2(function range(from, to) {\n  if (!(_isNumber(from) && _isNumber(to))) {\n    throw new TypeError('Both arguments to range must be numbers');\n  }\n  var result = [];\n  var n = from;\n  while (n < to) {\n    result.push(n);\n    n += 1;\n  }\n  return result;\n});\n\n/**\n * Returns a single item by iterating through the list, successively calling\n * the iterator function and passing it an accumulator value and the current\n * value from the array, and then passing the result to the next call.\n *\n * Similar to [`reduce`](#reduce), except moves through the input list from the\n * right to the left.\n *\n * The iterator function receives two values: *(value, acc)*, while the arguments'\n * order of `reduce`'s iterator function is *(acc, value)*.\n *\n * Note: `R.reduceRight` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.reduceRight` method. For more details\n * on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, b) -> b) -> b -> [a] -> b\n * @param {Function} fn The iterator function. Receives two values, the current element from the array\n *        and the accumulator.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduce, R.addIndex\n * @example\n *\n *      R.reduceRight(R.subtract, 0, [1, 2, 3, 4]) // => (1 - (2 - (3 - (4 - 0)))) = -2\n *      //    -               -2\n *      //   / \\              / \\\n *      //  1   -            1   3\n *      //     / \\              / \\\n *      //    2   -     ==>    2  -1\n *      //       / \\              / \\\n *      //      3   -            3   4\n *      //         / \\              / \\\n *      //        4   0            4   0\n *\n * @symb R.reduceRight(f, a, [b, c, d]) = f(b, f(c, f(d, a)))\n */\nvar reduceRight = _curry3(function reduceRight(fn, acc, list) {\n  var idx = list.length - 1;\n  while (idx >= 0) {\n    acc = fn(list[idx], acc);\n    idx -= 1;\n  }\n  return acc;\n});\n\n/**\n * Like [`reduce`](#reduce), `reduceWhile` returns a single item by iterating\n * through the list, successively calling the iterator function. `reduceWhile`\n * also takes a predicate that is evaluated before each step. If the predicate\n * returns `false`, it \"short-circuits\" the iteration and returns the current\n * value of the accumulator.\n *\n * @func\n * @memberOf R\n * @since v0.22.0\n * @category List\n * @sig ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} pred The predicate. It is passed the accumulator and the\n *        current element.\n * @param {Function} fn The iterator function. Receives two values, the\n *        accumulator and the current element.\n * @param {*} a The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduce, R.reduced\n * @example\n *\n *      var isOdd = (acc, x) => x % 2 === 1;\n *      var xs = [1, 3, 5, 60, 777, 800];\n *      R.reduceWhile(isOdd, R.add, 0, xs); //=> 9\n *\n *      var ys = [2, 4, 6]\n *      R.reduceWhile(isOdd, R.add, 111, ys); //=> 111\n */\nvar reduceWhile = _curryN(4, [], function _reduceWhile(pred, fn, a, list) {\n  return _reduce(function(acc, x) {\n    return pred(acc, x) ? fn(acc, x) : _reduced(acc);\n  }, a, list);\n});\n\n/**\n * Returns a value wrapped to indicate that it is the final value of the reduce\n * and transduce functions. The returned value should be considered a black\n * box: the internal structure is not guaranteed to be stable.\n *\n * Note: this optimization is unavailable to functions not explicitly listed\n * above. For instance, it is not currently supported by\n * [`reduceRight`](#reduceRight).\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category List\n * @sig a -> *\n * @param {*} x The final value of the reduce.\n * @return {*} The wrapped value.\n * @see R.reduce, R.transduce\n * @example\n *\n *     R.reduce(\n *       (acc, item) => item > 3 ? R.reduced(acc) : acc.concat(item),\n *       [],\n *       [1, 2, 3, 4, 5]) // [1, 2, 3]\n */\nvar reduced = _curry1(_reduced);\n\n/**\n * Calls an input function `n` times, returning an array containing the results\n * of those function calls.\n *\n * `fn` is passed one argument: The current value of `n`, which begins at `0`\n * and is gradually incremented to `n - 1`.\n *\n * @func\n * @memberOf R\n * @since v0.2.3\n * @category List\n * @sig (Number -> a) -> Number -> [a]\n * @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.\n * @param {Number} n A value between `0` and `n - 1`. Increments after each function call.\n * @return {Array} An array containing the return values of all calls to `fn`.\n * @see R.repeat\n * @example\n *\n *      R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]\n * @symb R.times(f, 0) = []\n * @symb R.times(f, 1) = [f(0)]\n * @symb R.times(f, 2) = [f(0), f(1)]\n */\nvar times = _curry2(function times(fn, n) {\n  var len = Number(n);\n  var idx = 0;\n  var list;\n\n  if (len < 0 || isNaN(len)) {\n    throw new RangeError('n must be a non-negative number');\n  }\n  list = new Array(len);\n  while (idx < len) {\n    list[idx] = fn(idx);\n    idx += 1;\n  }\n  return list;\n});\n\n/**\n * Returns a fixed list of size `n` containing a specified identical value.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig a -> n -> [a]\n * @param {*} value The value to repeat.\n * @param {Number} n The desired size of the output list.\n * @return {Array} A new array containing `n` `value`s.\n * @see R.times\n * @example\n *\n *      R.repeat('hi', 5); //=> ['hi', 'hi', 'hi', 'hi', 'hi']\n *\n *      var obj = {};\n *      var repeatedObjs = R.repeat(obj, 5); //=> [{}, {}, {}, {}, {}]\n *      repeatedObjs[0] === repeatedObjs[1]; //=> true\n * @symb R.repeat(a, 0) = []\n * @symb R.repeat(a, 1) = [a]\n * @symb R.repeat(a, 2) = [a, a]\n */\nvar repeat = _curry2(function repeat(value, n) {\n  return times(always(value), n);\n});\n\n/**\n * Replace a substring or regex match in a string with a replacement.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category String\n * @sig RegExp|String -> String -> String -> String\n * @param {RegExp|String} pattern A regular expression or a substring to match.\n * @param {String} replacement The string to replace the matches with.\n * @param {String} str The String to do the search and replacement in.\n * @return {String} The result.\n * @example\n *\n *      R.replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'\n *      R.replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'\n *\n *      // Use the \"g\" (global) flag to replace all occurrences:\n *      R.replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'\n */\nvar replace = _curry3(function replace(regex, replacement, str) {\n  return str.replace(regex, replacement);\n});\n\n/**\n * Scan is similar to [`reduce`](#reduce), but returns a list of successively\n * reduced values from the left\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig ((a, b) -> a) -> a -> [b] -> [a]\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {Array} A list of all intermediately reduced values.\n * @see R.reduce\n * @example\n *\n *      var numbers = [1, 2, 3, 4];\n *      var factorials = R.scan(R.multiply, 1, numbers); //=> [1, 1, 2, 6, 24]\n * @symb R.scan(f, a, [b, c]) = [a, f(a, b), f(f(a, b), c)]\n */\nvar scan = _curry3(function scan(fn, acc, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [acc];\n  while (idx < len) {\n    acc = fn(acc, list[idx]);\n    result[idx + 1] = acc;\n    idx += 1;\n  }\n  return result;\n});\n\n/**\n * Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)\n * of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into an\n * Applicative of Traversable.\n *\n * Dispatches to the `sequence` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)\n * @param {Function} of\n * @param {*} traversable\n * @return {*}\n * @see R.traverse\n * @example\n *\n *      R.sequence(Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([1, 2, 3])\n *      R.sequence(Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()\n *\n *      R.sequence(R.of, Just([1, 2, 3])); //=> [Just(1), Just(2), Just(3)]\n *      R.sequence(R.of, Nothing());       //=> [Nothing()]\n */\nvar sequence = _curry2(function sequence(of, traversable) {\n  return typeof traversable.sequence === 'function' ?\n    traversable.sequence(of) :\n    reduceRight(function(x, acc) { return ap(map(prepend, x), acc); },\n                of([]),\n                traversable);\n});\n\n/**\n * Returns the result of \"setting\" the portion of the given data structure\n * focused by the given lens to the given value.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Lens s a -> a -> s -> s\n * @param {Lens} lens\n * @param {*} v\n * @param {*} x\n * @return {*}\n * @see R.prop, R.lensIndex, R.lensProp\n * @example\n *\n *      var xLens = R.lensProp('x');\n *\n *      R.set(xLens, 4, {x: 1, y: 2});  //=> {x: 4, y: 2}\n *      R.set(xLens, 8, {x: 1, y: 2});  //=> {x: 8, y: 2}\n */\nvar set = _curry3(function set(lens, v, x) {\n  return over(lens, always(v), x);\n});\n\n/**\n * Returns a copy of the list, sorted according to the comparator function,\n * which should accept two values at a time and return a negative number if the\n * first value is smaller, a positive number if it's larger, and zero if they\n * are equal. Please note that this is a **copy** of the list. It does not\n * modify the original.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, a) -> Number) -> [a] -> [a]\n * @param {Function} comparator A sorting function :: a -> b -> Int\n * @param {Array} list The list to sort\n * @return {Array} a new array with its elements sorted by the comparator function.\n * @example\n *\n *      var diff = function(a, b) { return a - b; };\n *      R.sort(diff, [4,2,7,5]); //=> [2, 4, 5, 7]\n */\nvar sort = _curry2(function sort(comparator, list) {\n  return Array.prototype.slice.call(list, 0).sort(comparator);\n});\n\n/**\n * Sorts the list according to the supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord b => (a -> b) -> [a] -> [a]\n * @param {Function} fn\n * @param {Array} list The list to sort.\n * @return {Array} A new list sorted by the keys generated by `fn`.\n * @example\n *\n *      var sortByFirstItem = R.sortBy(R.prop(0));\n *      var sortByNameCaseInsensitive = R.sortBy(R.compose(R.toLower, R.prop('name')));\n *      var pairs = [[-1, 1], [-2, 2], [-3, 3]];\n *      sortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]\n *      var alice = {\n *        name: 'ALICE',\n *        age: 101\n *      };\n *      var bob = {\n *        name: 'Bob',\n *        age: -10\n *      };\n *      var clara = {\n *        name: 'clara',\n *        age: 314.159\n *      };\n *      var people = [clara, bob, alice];\n *      sortByNameCaseInsensitive(people); //=> [alice, bob, clara]\n */\nvar sortBy = _curry2(function sortBy(fn, list) {\n  return Array.prototype.slice.call(list, 0).sort(function(a, b) {\n    var aa = fn(a);\n    var bb = fn(b);\n    return aa < bb ? -1 : aa > bb ? 1 : 0;\n  });\n});\n\n/**\n * Sorts a list according to a list of comparators.\n *\n * @func\n * @memberOf R\n * @since v0.23.0\n * @category Relation\n * @sig [(a, a) -> Number] -> [a] -> [a]\n * @param {Array} functions A list of comparator functions.\n * @param {Array} list The list to sort.\n * @return {Array} A new list sorted according to the comarator functions.\n * @example\n *\n *      var alice = {\n *        name: 'alice',\n *        age: 40\n *      };\n *      var bob = {\n *        name: 'bob',\n *        age: 30\n *      };\n *      var clara = {\n *        name: 'clara',\n *        age: 40\n *      };\n *      var people = [clara, bob, alice];\n *      var ageNameSort = R.sortWith([\n *        R.descend(R.prop('age')),\n *        R.ascend(R.prop('name'))\n *      ]);\n *      ageNameSort(people); //=> [alice, clara, bob]\n */\nvar sortWith = _curry2(function sortWith(fns, list) {\n  return Array.prototype.slice.call(list, 0).sort(function(a, b) {\n    var result = 0;\n    var i = 0;\n    while (result === 0 && i < fns.length) {\n      result = fns[i](a, b);\n      i += 1;\n    }\n    return result;\n  });\n});\n\n/**\n * Splits a string into an array of strings based on the given\n * separator.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category String\n * @sig (String | RegExp) -> String -> [String]\n * @param {String|RegExp} sep The pattern.\n * @param {String} str The string to separate into an array.\n * @return {Array} The array of strings from `str` separated by `str`.\n * @see R.join\n * @example\n *\n *      var pathComponents = R.split('/');\n *      R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']\n *\n *      R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']\n */\nvar split = invoker(1, 'split');\n\n/**\n * Splits a given list or string at a given index.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig Number -> [a] -> [[a], [a]]\n * @sig Number -> String -> [String, String]\n * @param {Number} index The index where the array/string is split.\n * @param {Array|String} array The array/string to be split.\n * @return {Array}\n * @example\n *\n *      R.splitAt(1, [1, 2, 3]);          //=> [[1], [2, 3]]\n *      R.splitAt(5, 'hello world');      //=> ['hello', ' world']\n *      R.splitAt(-1, 'foobar');          //=> ['fooba', 'r']\n */\nvar splitAt = _curry2(function splitAt(index, array) {\n  return [slice(0, index, array), slice(index, length(array), array)];\n});\n\n/**\n * Splits a collection into slices of the specified length.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig Number -> [a] -> [[a]]\n * @sig Number -> String -> [String]\n * @param {Number} n\n * @param {Array} list\n * @return {Array}\n * @example\n *\n *      R.splitEvery(3, [1, 2, 3, 4, 5, 6, 7]); //=> [[1, 2, 3], [4, 5, 6], [7]]\n *      R.splitEvery(3, 'foobarbaz'); //=> ['foo', 'bar', 'baz']\n */\nvar splitEvery = _curry2(function splitEvery(n, list) {\n  if (n <= 0) {\n    throw new Error('First argument to splitEvery must be a positive integer');\n  }\n  var result = [];\n  var idx = 0;\n  while (idx < list.length) {\n    result.push(slice(idx, idx += n, list));\n  }\n  return result;\n});\n\n/**\n * Takes a list and a predicate and returns a pair of lists with the following properties:\n *\n *  - the result of concatenating the two output lists is equivalent to the input list;\n *  - none of the elements of the first output list satisfies the predicate; and\n *  - if the second output list is non-empty, its first element satisfies the predicate.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [[a], [a]]\n * @param {Function} pred The predicate that determines where the array is split.\n * @param {Array} list The array to be split.\n * @return {Array}\n * @example\n *\n *      R.splitWhen(R.equals(2), [1, 2, 3, 1, 2, 3]);   //=> [[1], [2, 3, 1, 2, 3]]\n */\nvar splitWhen = _curry2(function splitWhen(pred, list) {\n  var idx = 0;\n  var len = list.length;\n  var prefix = [];\n\n  while (idx < len && !pred(list[idx])) {\n    prefix.push(list[idx]);\n    idx += 1;\n  }\n\n  return [prefix, Array.prototype.slice.call(list, idx)];\n});\n\n/**\n * Checks if a list starts with the provided values\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category List\n * @sig [a] -> Boolean\n * @sig String -> Boolean\n * @param {*} prefix\n * @param {*} list\n * @return {Boolean}\n * @example\n *\n *      R.startsWith('a', 'abc')                //=> true\n *      R.startsWith('b', 'abc')                //=> false\n *      R.startsWith(['a'], ['a', 'b', 'c'])    //=> true\n *      R.startsWith(['b'], ['a', 'b', 'c'])    //=> false\n */\nvar startsWith = _curry2(function(prefix, list) {\n  return equals(take(prefix.length, list), prefix);\n});\n\n/**\n * Subtracts its second argument from its first argument.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a The first value.\n * @param {Number} b The second value.\n * @return {Number} The result of `a - b`.\n * @see R.add\n * @example\n *\n *      R.subtract(10, 8); //=> 2\n *\n *      var minus5 = R.subtract(R.__, 5);\n *      minus5(17); //=> 12\n *\n *      var complementaryAngle = R.subtract(90);\n *      complementaryAngle(30); //=> 60\n *      complementaryAngle(72); //=> 18\n */\nvar subtract = _curry2(function subtract(a, b) {\n  return Number(a) - Number(b);\n});\n\n/**\n * Finds the set (i.e. no duplicates) of all elements contained in the first or\n * second list, but not both.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` or `list2`, but not both.\n * @see R.symmetricDifferenceWith, R.difference, R.differenceWith\n * @example\n *\n *      R.symmetricDifference([1,2,3,4], [7,6,5,4,3]); //=> [1,2,7,6,5]\n *      R.symmetricDifference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5,1,2]\n */\nvar symmetricDifference = _curry2(function symmetricDifference(list1, list2) {\n  return concat(difference(list1, list2), difference(list2, list1));\n});\n\n/**\n * Finds the set (i.e. no duplicates) of all elements contained in the first or\n * second list, but not both. Duplication is determined according to the value\n * returned by applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` or `list2`, but not both.\n * @see R.symmetricDifference, R.difference, R.differenceWith\n * @example\n *\n *      var eqA = R.eqBy(R.prop('a'));\n *      var l1 = [{a: 1}, {a: 2}, {a: 3}, {a: 4}];\n *      var l2 = [{a: 3}, {a: 4}, {a: 5}, {a: 6}];\n *      R.symmetricDifferenceWith(eqA, l1, l2); //=> [{a: 1}, {a: 2}, {a: 5}, {a: 6}]\n */\nvar symmetricDifferenceWith = _curry3(function symmetricDifferenceWith(pred, list1, list2) {\n  return concat(differenceWith(pred, list1, list2), differenceWith(pred, list2, list1));\n});\n\n/**\n * Returns a new list containing the last `n` elements of a given list, passing\n * each value to the supplied predicate function, and terminating when the\n * predicate function returns `false`. Excludes the element that caused the\n * predicate function to fail. The predicate function is passed one argument:\n * *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.dropLastWhile, R.addIndex\n * @example\n *\n *      var isNotOne = x => x !== 1;\n *\n *      R.takeLastWhile(isNotOne, [1, 2, 3, 4]); //=> [2, 3, 4]\n *\n *      R.takeLastWhile(x => x !== 'R' , 'Ramda'); //=> 'amda'\n */\nvar takeLastWhile = _curry2(function takeLastWhile(fn, xs) {\n  var idx = xs.length - 1;\n  while (idx >= 0 && fn(xs[idx])) {\n    idx -= 1;\n  }\n  return slice(idx + 1, Infinity, xs);\n});\n\nfunction XTakeWhile(f, xf) {\n  this.xf = xf;\n  this.f = f;\n}\nXTakeWhile.prototype['@@transducer/init'] = _xfBase.init;\nXTakeWhile.prototype['@@transducer/result'] = _xfBase.result;\nXTakeWhile.prototype['@@transducer/step'] = function(result, input) {\n  return this.f(input) ? this.xf['@@transducer/step'](result, input) : _reduced(result);\n};\n\nvar _xtakeWhile = _curry2(function _xtakeWhile(f, xf) { return new XTakeWhile(f, xf); });\n\n/**\n * Returns a new list containing the first `n` elements of a given list,\n * passing each value to the supplied predicate function, and terminating when\n * the predicate function returns `false`. Excludes the element that caused the\n * predicate function to fail. The predicate function is passed one argument:\n * *(value)*.\n *\n * Dispatches to the `takeWhile` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.dropWhile, R.transduce, R.addIndex\n * @example\n *\n *      var isNotFour = x => x !== 4;\n *\n *      R.takeWhile(isNotFour, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3]\n *\n *      R.takeWhile(x => x !== 'd' , 'Ramda'); //=> 'Ram'\n */\nvar takeWhile = _curry2(_dispatchable(['takeWhile'], _xtakeWhile, function takeWhile(fn, xs) {\n  var idx = 0;\n  var len = xs.length;\n  while (idx < len && fn(xs[idx])) {\n    idx += 1;\n  }\n  return slice(0, idx, xs);\n}));\n\nfunction XTap(f, xf) {\n  this.xf = xf;\n  this.f = f;\n}\nXTap.prototype['@@transducer/init'] = _xfBase.init;\nXTap.prototype['@@transducer/result'] = _xfBase.result;\nXTap.prototype['@@transducer/step'] = function(result, input) {\n  this.f(input);\n  return this.xf['@@transducer/step'](result, input);\n};\n\nvar _xtap = _curry2(function _xtap(f, xf) { return new XTap(f, xf); });\n\n/**\n * Runs the given function with the supplied object, then returns the object.\n *\n * Acts as a transducer if a transformer is given as second parameter.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (a -> *) -> a -> a\n * @param {Function} fn The function to call with `x`. The return value of `fn` will be thrown away.\n * @param {*} x\n * @return {*} `x`.\n * @example\n *\n *      var sayX = x => console.log('x is ' + x);\n *      R.tap(sayX, 100); //=> 100\n *      // logs 'x is 100'\n * @symb R.tap(f, a) = a\n */\nvar tap = _curry2(_dispatchable([], _xtap, function tap(fn, x) {\n  fn(x);\n  return x;\n}));\n\nfunction _isRegExp(x) {\n  return Object.prototype.toString.call(x) === '[object RegExp]';\n}\n\n/**\n * Determines whether a given string matches a given regular expression.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category String\n * @sig RegExp -> String -> Boolean\n * @param {RegExp} pattern\n * @param {String} str\n * @return {Boolean}\n * @see R.match\n * @example\n *\n *      R.test(/^x/, 'xyz'); //=> true\n *      R.test(/^y/, 'xyz'); //=> false\n */\nvar test = _curry2(function test(pattern, str) {\n  if (!_isRegExp(pattern)) {\n    throw new TypeError('‘test’ requires a value of type RegExp as its first argument; received ' + toString$1(pattern));\n  }\n  return _cloneRegExp(pattern).test(str);\n});\n\n/**\n * The lower case version of a string.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category String\n * @sig String -> String\n * @param {String} str The string to lower case.\n * @return {String} The lower case version of `str`.\n * @see R.toUpper\n * @example\n *\n *      R.toLower('XYZ'); //=> 'xyz'\n */\nvar toLower = invoker(0, 'toLowerCase');\n\n/**\n * Converts an object into an array of key, value arrays. Only the object's\n * own properties are used.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.4.0\n * @category Object\n * @sig {String: *} -> [[String,*]]\n * @param {Object} obj The object to extract from\n * @return {Array} An array of key, value arrays from the object's own properties.\n * @see R.fromPairs\n * @example\n *\n *      R.toPairs({a: 1, b: 2, c: 3}); //=> [['a', 1], ['b', 2], ['c', 3]]\n */\nvar toPairs = _curry1(function toPairs(obj) {\n  var pairs = [];\n  for (var prop in obj) {\n    if (_has(prop, obj)) {\n      pairs[pairs.length] = [prop, obj[prop]];\n    }\n  }\n  return pairs;\n});\n\n/**\n * Converts an object into an array of key, value arrays. The object's own\n * properties and prototype properties are used. Note that the order of the\n * output array is not guaranteed to be consistent across different JS\n * platforms.\n *\n * @func\n * @memberOf R\n * @since v0.4.0\n * @category Object\n * @sig {String: *} -> [[String,*]]\n * @param {Object} obj The object to extract from\n * @return {Array} An array of key, value arrays from the object's own\n *         and prototype properties.\n * @example\n *\n *      var F = function() { this.x = 'X'; };\n *      F.prototype.y = 'Y';\n *      var f = new F();\n *      R.toPairsIn(f); //=> [['x','X'], ['y','Y']]\n */\nvar toPairsIn = _curry1(function toPairsIn(obj) {\n  var pairs = [];\n  for (var prop in obj) {\n    pairs[pairs.length] = [prop, obj[prop]];\n  }\n  return pairs;\n});\n\n/**\n * The upper case version of a string.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category String\n * @sig String -> String\n * @param {String} str The string to upper case.\n * @return {String} The upper case version of `str`.\n * @see R.toLower\n * @example\n *\n *      R.toUpper('abc'); //=> 'ABC'\n */\nvar toUpper = invoker(0, 'toUpperCase');\n\n/**\n * Initializes a transducer using supplied iterator function. Returns a single\n * item by iterating through the list, successively calling the transformed\n * iterator function and passing it an accumulator value and the current value\n * from the array, and then passing the result to the next call.\n *\n * The iterator function receives two values: *(acc, value)*. It will be\n * wrapped as a transformer to initialize the transducer. A transformer can be\n * passed directly in place of an iterator function. In both cases, iteration\n * may be stopped early with the [`R.reduced`](#reduced) function.\n *\n * A transducer is a function that accepts a transformer and returns a\n * transformer and can be composed directly.\n *\n * A transformer is an an object that provides a 2-arity reducing iterator\n * function, step, 0-arity initial value function, init, and 1-arity result\n * extraction function, result. The step function is used as the iterator\n * function in reduce. The result function is used to convert the final\n * accumulator into the return type and in most cases is\n * [`R.identity`](#identity). The init function can be used to provide an\n * initial accumulator, but is ignored by transduce.\n *\n * The iteration is performed with [`R.reduce`](#reduce) after initializing the transducer.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig (c -> c) -> ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array. Wrapped as transformer, if necessary, and used to\n *        initialize the transducer\n * @param {*} acc The initial accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduce, R.reduced, R.into\n * @example\n *\n *      var numbers = [1, 2, 3, 4];\n *      var transducer = R.compose(R.map(R.add(1)), R.take(2));\n *      R.transduce(transducer, R.flip(R.append), [], numbers); //=> [2, 3]\n *\n *      var isOdd = (x) => x % 2 === 1;\n *      var firstOddTransducer = R.compose(R.filter(isOdd), R.take(1));\n *      R.transduce(firstOddTransducer, R.flip(R.append), [], R.range(0, 100)); //=> [1]\n */\nvar transduce = curryN(4, function transduce(xf, fn, acc, list) {\n  return _reduce(xf(typeof fn === 'function' ? _xwrap(fn) : fn), acc, list);\n});\n\n/**\n * Transposes the rows and columns of a 2D list.\n * When passed a list of `n` lists of length `x`,\n * returns a list of `x` lists of length `n`.\n *\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig [[a]] -> [[a]]\n * @param {Array} list A 2D list\n * @return {Array} A 2D list\n * @example\n *\n *      R.transpose([[1, 'a'], [2, 'b'], [3, 'c']]) //=> [[1, 2, 3], ['a', 'b', 'c']]\n *      R.transpose([[1, 2, 3], ['a', 'b', 'c']]) //=> [[1, 'a'], [2, 'b'], [3, 'c']]\n *\n *      // If some of the rows are shorter than the following rows, their elements are skipped:\n *      R.transpose([[10, 11], [20], [], [30, 31, 32]]) //=> [[10, 20, 30], [11, 31], [32]]\n * @symb R.transpose([[a], [b], [c]]) = [a, b, c]\n * @symb R.transpose([[a, b], [c, d]]) = [[a, c], [b, d]]\n * @symb R.transpose([[a, b], [c]]) = [[a, c], [b]]\n */\nvar transpose = _curry1(function transpose(outerlist) {\n  var i = 0;\n  var result = [];\n  while (i < outerlist.length) {\n    var innerlist = outerlist[i];\n    var j = 0;\n    while (j < innerlist.length) {\n      if (typeof result[j] === 'undefined') {\n        result[j] = [];\n      }\n      result[j].push(innerlist[j]);\n      j += 1;\n    }\n    i += 1;\n  }\n  return result;\n});\n\n/**\n * Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returning\n * function over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),\n * then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicative\n * into an Applicative of Traversable.\n *\n * Dispatches to the `traverse` method of the third argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)\n * @param {Function} of\n * @param {Function} f\n * @param {*} traversable\n * @return {*}\n * @see R.sequence\n * @example\n *\n *      // Returns `Nothing` if the given divisor is `0`\n *      safeDiv = n => d => d === 0 ? Nothing() : Just(n / d)\n *\n *      R.traverse(Maybe.of, safeDiv(10), [2, 4, 5]); //=> Just([5, 2.5, 2])\n *      R.traverse(Maybe.of, safeDiv(10), [2, 0, 5]); //=> Nothing\n */\nvar traverse = _curry3(function traverse(of, f, traversable) {\n  return typeof traversable['fantasy-land/traverse'] === 'function' ?\n    traversable['fantasy-land/traverse'](f, of) :\n    sequence(of, map(f, traversable));\n});\n\nvar ws = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' +\n         '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028' +\n         '\\u2029\\uFEFF';\nvar zeroWidth = '\\u200b';\nvar hasProtoTrim = (typeof String.prototype.trim === 'function');\n/**\n * Removes (strips) whitespace from both ends of the string.\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category String\n * @sig String -> String\n * @param {String} str The string to trim.\n * @return {String} Trimmed version of `str`.\n * @example\n *\n *      R.trim('   xyz  '); //=> 'xyz'\n *      R.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']\n */\nvar _trim = !hasProtoTrim || (ws.trim() || !zeroWidth.trim()) ?\n    function trim(str) {\n      var beginRx = new RegExp('^[' + ws + '][' + ws + ']*');\n      var endRx = new RegExp('[' + ws + '][' + ws + ']*$');\n      return str.replace(beginRx, '').replace(endRx, '');\n    } :\n    function trim(str) {\n      return str.trim();\n    };\nvar trim = _curry1(_trim);\n\n/**\n * `tryCatch` takes two functions, a `tryer` and a `catcher`. The returned\n * function evaluates the `tryer`; if it does not throw, it simply returns the\n * result. If the `tryer` *does* throw, the returned function evaluates the\n * `catcher` function and returns its result. Note that for effective\n * composition with this function, both the `tryer` and `catcher` functions\n * must return the same type of results.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Function\n * @sig (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)\n * @param {Function} tryer The function that may throw.\n * @param {Function} catcher The function that will be evaluated if `tryer` throws.\n * @return {Function} A new function that will catch exceptions and send then to the catcher.\n * @example\n *\n *      R.tryCatch(R.prop('x'), R.F)({x: true}); //=> true\n *      R.tryCatch(R.prop('x'), R.F)(null);      //=> false\n */\nvar tryCatch = _curry2(function _tryCatch(tryer, catcher) {\n  return _arity(tryer.length, function() {\n    try {\n      return tryer.apply(this, arguments);\n    } catch (e) {\n      return catcher.apply(this, _concat([e], arguments));\n    }\n  });\n});\n\n/**\n * Takes a function `fn`, which takes a single array argument, and returns a\n * function which:\n *\n *   - takes any number of positional arguments;\n *   - passes these arguments to `fn` as an array; and\n *   - returns the result.\n *\n * In other words, `R.unapply` derives a variadic function from a function which\n * takes an array. `R.unapply` is the inverse of [`R.apply`](#apply).\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Function\n * @sig ([*...] -> a) -> (*... -> a)\n * @param {Function} fn\n * @return {Function}\n * @see R.apply\n * @example\n *\n *      R.unapply(JSON.stringify)(1, 2, 3); //=> '[1,2,3]'\n * @symb R.unapply(f)(a, b) = f([a, b])\n */\nvar unapply = _curry1(function unapply(fn) {\n  return function() {\n    return fn(Array.prototype.slice.call(arguments, 0));\n  };\n});\n\n/**\n * Wraps a function of any arity (including nullary) in a function that accepts\n * exactly 1 parameter. Any extraneous parameters will not be passed to the\n * supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Function\n * @sig (* -> b) -> (a -> b)\n * @param {Function} fn The function to wrap.\n * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n *         arity 1.\n * @see R.binary, R.nAry\n * @example\n *\n *      var takesTwoArgs = function(a, b) {\n *        return [a, b];\n *      };\n *      takesTwoArgs.length; //=> 2\n *      takesTwoArgs(1, 2); //=> [1, 2]\n *\n *      var takesOneArg = R.unary(takesTwoArgs);\n *      takesOneArg.length; //=> 1\n *      // Only 1 argument is passed to the wrapped function\n *      takesOneArg(1, 2); //=> [1, undefined]\n * @symb R.unary(f)(a, b, c) = f(a)\n */\nvar unary = _curry1(function unary(fn) {\n  return nAry(1, fn);\n});\n\n/**\n * Returns a function of arity `n` from a (manually) curried function.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Function\n * @sig Number -> (a -> b) -> (a -> c)\n * @param {Number} length The arity for the returned function.\n * @param {Function} fn The function to uncurry.\n * @return {Function} A new function.\n * @see R.curry\n * @example\n *\n *      var addFour = a => b => c => d => a + b + c + d;\n *\n *      var uncurriedAddFour = R.uncurryN(4, addFour);\n *      uncurriedAddFour(1, 2, 3, 4); //=> 10\n */\nvar uncurryN = _curry2(function uncurryN(depth, fn) {\n  return curryN(depth, function() {\n    var currentDepth = 1;\n    var value = fn;\n    var idx = 0;\n    var endIdx;\n    while (currentDepth <= depth && typeof value === 'function') {\n      endIdx = currentDepth === depth ? arguments.length : idx + value.length;\n      value = value.apply(this, Array.prototype.slice.call(arguments, idx, endIdx));\n      currentDepth += 1;\n      idx = endIdx;\n    }\n    return value;\n  });\n});\n\n/**\n * Builds a list from a seed value. Accepts an iterator function, which returns\n * either false to stop iteration or an array of length 2 containing the value\n * to add to the resulting list and the seed to be used in the next call to the\n * iterator function.\n *\n * The iterator function receives one argument: *(seed)*.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig (a -> [b]) -> * -> [b]\n * @param {Function} fn The iterator function. receives one argument, `seed`, and returns\n *        either false to quit iteration or an array of length two to proceed. The element\n *        at index 0 of this array will be added to the resulting array, and the element\n *        at index 1 will be passed to the next call to `fn`.\n * @param {*} seed The seed value.\n * @return {Array} The final list.\n * @example\n *\n *      var f = n => n > 50 ? false : [-n, n + 10];\n *      R.unfold(f, 10); //=> [-10, -20, -30, -40, -50]\n * @symb R.unfold(f, x) = [f(x)[0], f(f(x)[1])[0], f(f(f(x)[1])[1])[0], ...]\n */\nvar unfold = _curry2(function unfold(fn, seed) {\n  var pair = fn(seed);\n  var result = [];\n  while (pair && pair.length) {\n    result[result.length] = pair[0];\n    pair = fn(pair[1]);\n  }\n  return result;\n});\n\n/**\n * Combines two lists into a set (i.e. no duplicates) composed of the elements\n * of each list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} as The first list.\n * @param {Array} bs The second list.\n * @return {Array} The first and second lists concatenated, with\n *         duplicates removed.\n * @example\n *\n *      R.union([1, 2, 3], [2, 3, 4]); //=> [1, 2, 3, 4]\n */\nvar union = _curry2(compose(uniq, _concat));\n\n/**\n * Returns a new list containing only one copy of each element in the original\n * list, based upon the value returned by applying the supplied predicate to\n * two list elements. Prefers the first item if two items compare equal based\n * on the predicate.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category List\n * @sig ((a, a) -> Boolean) -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list The array to consider.\n * @return {Array} The list of unique items.\n * @example\n *\n *      var strEq = R.eqBy(String);\n *      R.uniqWith(strEq)([1, '1', 2, 1]); //=> [1, 2]\n *      R.uniqWith(strEq)([{}, {}]);       //=> [{}]\n *      R.uniqWith(strEq)([1, '1', 1]);    //=> [1]\n *      R.uniqWith(strEq)(['1', 1, 1]);    //=> ['1']\n */\nvar uniqWith = _curry2(function uniqWith(pred, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [];\n  var item;\n  while (idx < len) {\n    item = list[idx];\n    if (!_containsWith(pred, item, result)) {\n      result[result.length] = item;\n    }\n    idx += 1;\n  }\n  return result;\n});\n\n/**\n * Combines two lists into a set (i.e. no duplicates) composed of the elements\n * of each list. Duplication is determined according to the value returned by\n * applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [*] -> [*] -> [*]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The first and second lists concatenated, with\n *         duplicates removed.\n * @see R.union\n * @example\n *\n *      var l1 = [{a: 1}, {a: 2}];\n *      var l2 = [{a: 1}, {a: 4}];\n *      R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]\n */\nvar unionWith = _curry3(function unionWith(pred, list1, list2) {\n  return uniqWith(pred, _concat(list1, list2));\n});\n\n/**\n * Tests the final argument by passing it to the given predicate function. If\n * the predicate is not satisfied, the function will return the result of\n * calling the `whenFalseFn` function with the same argument. If the predicate\n * is satisfied, the argument is returned as is.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Logic\n * @sig (a -> Boolean) -> (a -> a) -> a -> a\n * @param {Function} pred        A predicate function\n * @param {Function} whenFalseFn A function to invoke when the `pred` evaluates\n *                               to a falsy value.\n * @param {*}        x           An object to test with the `pred` function and\n *                               pass to `whenFalseFn` if necessary.\n * @return {*} Either `x` or the result of applying `x` to `whenFalseFn`.\n * @see R.ifElse, R.when\n * @example\n *\n *      let safeInc = R.unless(R.isNil, R.inc);\n *      safeInc(null); //=> null\n *      safeInc(1); //=> 2\n */\nvar unless = _curry3(function unless(pred, whenFalseFn, x) {\n  return pred(x) ? x : whenFalseFn(x);\n});\n\n/**\n * Shorthand for `R.chain(R.identity)`, which removes one level of nesting from\n * any [Chain](https://github.com/fantasyland/fantasy-land#chain).\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig Chain c => c (c a) -> c a\n * @param {*} list\n * @return {*}\n * @see R.flatten, R.chain\n * @example\n *\n *      R.unnest([1, [2], [[3]]]); //=> [1, 2, [3]]\n *      R.unnest([[1, 2], [3, 4], [5, 6]]); //=> [1, 2, 3, 4, 5, 6]\n */\nvar unnest = chain(_identity);\n\n/**\n * Takes a predicate, a transformation function, and an initial value,\n * and returns a value of the same type as the initial value.\n * It does so by applying the transformation until the predicate is satisfied,\n * at which point it returns the satisfactory value.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Logic\n * @sig (a -> Boolean) -> (a -> a) -> a -> a\n * @param {Function} pred A predicate function\n * @param {Function} fn The iterator function\n * @param {*} init Initial value\n * @return {*} Final value that satisfies predicate\n * @example\n *\n *      R.until(R.gt(R.__, 100), R.multiply(2))(1) // => 128\n */\nvar until = _curry3(function until(pred, fn, init) {\n  var val = init;\n  while (!pred(val)) {\n    val = fn(val);\n  }\n  return val;\n});\n\n/**\n * Returns a list of all the properties, including prototype properties, of the\n * supplied object.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Object\n * @sig {k: v} -> [v]\n * @param {Object} obj The object to extract values from\n * @return {Array} An array of the values of the object's own and prototype properties.\n * @see R.values, R.keysIn\n * @example\n *\n *      var F = function() { this.x = 'X'; };\n *      F.prototype.y = 'Y';\n *      var f = new F();\n *      R.valuesIn(f); //=> ['X', 'Y']\n */\nvar valuesIn = _curry1(function valuesIn(obj) {\n  var prop;\n  var vs = [];\n  for (prop in obj) {\n    vs[vs.length] = obj[prop];\n  }\n  return vs;\n});\n\n// `Const` is a functor that effectively ignores the function given to `map`.\nvar Const = function(x) {\n  return {value: x, 'fantasy-land/map': function() { return this; }};\n};\n\n/**\n * Returns a \"view\" of the given data structure, determined by the given lens.\n * The lens's focus determines which portion of the data structure is visible.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Lens s a -> s -> a\n * @param {Lens} lens\n * @param {*} x\n * @return {*}\n * @see R.prop, R.lensIndex, R.lensProp\n * @example\n *\n *      var xLens = R.lensProp('x');\n *\n *      R.view(xLens, {x: 1, y: 2});  //=> 1\n *      R.view(xLens, {x: 4, y: 2});  //=> 4\n */\nvar view = _curry2(function view(lens, x) {\n  // Using `Const` effectively ignores the setter function of the `lens`,\n  // leaving the value returned by the getter function unmodified.\n  return lens(Const)(x).value;\n});\n\n/**\n * Tests the final argument by passing it to the given predicate function. If\n * the predicate is satisfied, the function will return the result of calling\n * the `whenTrueFn` function with the same argument. If the predicate is not\n * satisfied, the argument is returned as is.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Logic\n * @sig (a -> Boolean) -> (a -> a) -> a -> a\n * @param {Function} pred       A predicate function\n * @param {Function} whenTrueFn A function to invoke when the `condition`\n *                              evaluates to a truthy value.\n * @param {*}        x          An object to test with the `pred` function and\n *                              pass to `whenTrueFn` if necessary.\n * @return {*} Either `x` or the result of applying `x` to `whenTrueFn`.\n * @see R.ifElse, R.unless\n * @example\n *\n *      // truncate :: String -> String\n *      var truncate = R.when(\n *        R.propSatisfies(R.gt(R.__, 10), 'length'),\n *        R.pipe(R.take(10), R.append('…'), R.join(''))\n *      );\n *      truncate('12345');         //=> '12345'\n *      truncate('0123456789ABC'); //=> '0123456789…'\n */\nvar when = _curry3(function when(pred, whenTrueFn, x) {\n  return pred(x) ? whenTrueFn(x) : x;\n});\n\n/**\n * Takes a spec object and a test object; returns true if the test satisfies\n * the spec. Each of the spec's own properties must be a predicate function.\n * Each predicate is applied to the value of the corresponding property of the\n * test object. `where` returns true if all the predicates return true, false\n * otherwise.\n *\n * `where` is well suited to declaratively expressing constraints for other\n * functions such as [`filter`](#filter) and [`find`](#find).\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category Object\n * @sig {String: (* -> Boolean)} -> {String: *} -> Boolean\n * @param {Object} spec\n * @param {Object} testObj\n * @return {Boolean}\n * @see R.propSatisfies, R.whereEq\n * @example\n *\n *      // pred :: Object -> Boolean\n *      var pred = R.where({\n *        a: R.equals('foo'),\n *        b: R.complement(R.equals('bar')),\n *        x: R.gt(R.__, 10),\n *        y: R.lt(R.__, 20)\n *      });\n *\n *      pred({a: 'foo', b: 'xxx', x: 11, y: 19}); //=> true\n *      pred({a: 'xxx', b: 'xxx', x: 11, y: 19}); //=> false\n *      pred({a: 'foo', b: 'bar', x: 11, y: 19}); //=> false\n *      pred({a: 'foo', b: 'xxx', x: 10, y: 19}); //=> false\n *      pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> false\n */\nvar where = _curry2(function where(spec, testObj) {\n  for (var prop in spec) {\n    if (_has(prop, spec) && !spec[prop](testObj[prop])) {\n      return false;\n    }\n  }\n  return true;\n});\n\n/**\n * Takes a spec object and a test object; returns true if the test satisfies\n * the spec, false otherwise. An object satisfies the spec if, for each of the\n * spec's own properties, accessing that property of the object gives the same\n * value (in [`R.equals`](#equals) terms) as accessing that property of the\n * spec.\n *\n * `whereEq` is a specialization of [`where`](#where).\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Object\n * @sig {String: *} -> {String: *} -> Boolean\n * @param {Object} spec\n * @param {Object} testObj\n * @return {Boolean}\n * @see R.propEq, R.where\n * @example\n *\n *      // pred :: Object -> Boolean\n *      var pred = R.whereEq({a: 1, b: 2});\n *\n *      pred({a: 1});              //=> false\n *      pred({a: 1, b: 2});        //=> true\n *      pred({a: 1, b: 2, c: 3});  //=> true\n *      pred({a: 1, b: 1});        //=> false\n */\nvar whereEq = _curry2(function whereEq(spec, testObj) {\n  return where(map(equals, spec), testObj);\n});\n\n/**\n * Returns a new list without values in the first argument.\n * [`R.equals`](#equals) is used to determine equality.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig [a] -> [a] -> [a]\n * @param {Array} list1 The values to be removed from `list2`.\n * @param {Array} list2 The array to remove values from.\n * @return {Array} The new array without values in `list1`.\n * @see R.transduce, R.difference\n * @example\n *\n *      R.without([1, 2], [1, 2, 1, 3, 4]); //=> [3, 4]\n */\nvar without = _curry2(function(xs, list) {\n  return reject(flip(_contains)(xs), list);\n});\n\n/**\n * Creates a new list out of the two supplied by creating each possible pair\n * from the lists.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [b] -> [[a,b]]\n * @param {Array} as The first list.\n * @param {Array} bs The second list.\n * @return {Array} The list made by combining each possible pair from\n *         `as` and `bs` into pairs (`[a, b]`).\n * @example\n *\n *      R.xprod([1, 2], ['a', 'b']); //=> [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]\n * @symb R.xprod([a, b], [c, d]) = [[a, c], [a, d], [b, c], [b, d]]\n */\nvar xprod = _curry2(function xprod(a, b) { // = xprodWith(prepend); (takes about 3 times as long...)\n  var idx = 0;\n  var ilen = a.length;\n  var j;\n  var jlen = b.length;\n  var result = [];\n  while (idx < ilen) {\n    j = 0;\n    while (j < jlen) {\n      result[result.length] = [a[idx], b[j]];\n      j += 1;\n    }\n    idx += 1;\n  }\n  return result;\n});\n\n/**\n * Creates a new list out of the two supplied by pairing up equally-positioned\n * items from both lists. The returned list is truncated to the length of the\n * shorter of the two input lists.\n * Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [b] -> [[a,b]]\n * @param {Array} list1 The first array to consider.\n * @param {Array} list2 The second array to consider.\n * @return {Array} The list made by pairing up same-indexed elements of `list1` and `list2`.\n * @example\n *\n *      R.zip([1, 2, 3], ['a', 'b', 'c']); //=> [[1, 'a'], [2, 'b'], [3, 'c']]\n * @symb R.zip([a, b, c], [d, e, f]) = [[a, d], [b, e], [c, f]]\n */\nvar zip = _curry2(function zip(a, b) {\n  var rv = [];\n  var idx = 0;\n  var len = Math.min(a.length, b.length);\n  while (idx < len) {\n    rv[idx] = [a[idx], b[idx]];\n    idx += 1;\n  }\n  return rv;\n});\n\n/**\n * Creates a new object out of a list of keys and a list of values.\n * Key/value pairing is truncated to the length of the shorter of the two lists.\n * Note: `zipObj` is equivalent to `pipe(zip, fromPairs)`.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig [String] -> [*] -> {String: *}\n * @param {Array} keys The array that will be properties on the output object.\n * @param {Array} values The list of values on the output object.\n * @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.\n * @example\n *\n *      R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}\n */\nvar zipObj = _curry2(function zipObj(keys, values) {\n  var idx = 0;\n  var len = Math.min(keys.length, values.length);\n  var out = {};\n  while (idx < len) {\n    out[keys[idx]] = values[idx];\n    idx += 1;\n  }\n  return out;\n});\n\n/**\n * Creates a new list out of the two supplied by applying the function to each\n * equally-positioned pair in the lists. The returned list is truncated to the\n * length of the shorter of the two input lists.\n *\n * @function\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, b) -> c) -> [a] -> [b] -> [c]\n * @param {Function} fn The function used to combine the two elements into one value.\n * @param {Array} list1 The first array to consider.\n * @param {Array} list2 The second array to consider.\n * @return {Array} The list made by combining same-indexed elements of `list1` and `list2`\n *         using `fn`.\n * @example\n *\n *      var f = (x, y) => {\n *        // ...\n *      };\n *      R.zipWith(f, [1, 2, 3], ['a', 'b', 'c']);\n *      //=> [f(1, 'a'), f(2, 'b'), f(3, 'c')]\n * @symb R.zipWith(fn, [a, b, c], [d, e, f]) = [fn(a, d), fn(b, e), fn(c, f)]\n */\nvar zipWith = _curry3(function zipWith(fn, a, b) {\n  var rv = [];\n  var idx = 0;\n  var len = Math.min(a.length, b.length);\n  while (idx < len) {\n    rv[idx] = fn(a[idx], b[idx]);\n    idx += 1;\n  }\n  return rv;\n});\n\nexports.F = F;\nexports.T = T;\nexports.__ = __;\nexports.add = add;\nexports.addIndex = addIndex;\nexports.adjust = adjust;\nexports.all = all;\nexports.allPass = allPass;\nexports.always = always;\nexports.and = and;\nexports.any = any;\nexports.anyPass = anyPass;\nexports.ap = ap;\nexports.aperture = aperture;\nexports.append = append;\nexports.apply = apply;\nexports.applySpec = applySpec;\nexports.applyTo = applyTo;\nexports.ascend = ascend;\nexports.assoc = assoc;\nexports.assocPath = assocPath;\nexports.binary = binary;\nexports.bind = bind;\nexports.both = both;\nexports.call = call;\nexports.chain = chain;\nexports.clamp = clamp;\nexports.clone = clone;\nexports.comparator = comparator;\nexports.complement = complement;\nexports.compose = compose;\nexports.composeK = composeK;\nexports.composeP = composeP;\nexports.concat = concat;\nexports.cond = cond;\nexports.construct = construct;\nexports.constructN = constructN;\nexports.contains = contains$1;\nexports.converge = converge;\nexports.countBy = countBy;\nexports.curry = curry;\nexports.curryN = curryN;\nexports.dec = dec;\nexports.defaultTo = defaultTo;\nexports.descend = descend;\nexports.difference = difference;\nexports.differenceWith = differenceWith;\nexports.dissoc = dissoc;\nexports.dissocPath = dissocPath;\nexports.divide = divide;\nexports.drop = drop;\nexports.dropLast = dropLast;\nexports.dropLastWhile = dropLastWhile;\nexports.dropRepeats = dropRepeats;\nexports.dropRepeatsWith = dropRepeatsWith;\nexports.dropWhile = dropWhile;\nexports.either = either;\nexports.empty = empty;\nexports.endsWith = endsWith;\nexports.eqBy = eqBy;\nexports.eqProps = eqProps;\nexports.equals = equals;\nexports.evolve = evolve;\nexports.filter = filter;\nexports.find = find;\nexports.findIndex = findIndex;\nexports.findLast = findLast;\nexports.findLastIndex = findLastIndex;\nexports.flatten = flatten;\nexports.flip = flip;\nexports.forEach = forEach;\nexports.forEachObjIndexed = forEachObjIndexed;\nexports.fromPairs = fromPairs;\nexports.groupBy = groupBy;\nexports.groupWith = groupWith;\nexports.gt = gt;\nexports.gte = gte;\nexports.has = has;\nexports.hasIn = hasIn;\nexports.head = head;\nexports.identical = identical;\nexports.identity = identity;\nexports.ifElse = ifElse;\nexports.inc = inc;\nexports.indexBy = indexBy;\nexports.indexOf = indexOf;\nexports.init = init;\nexports.innerJoin = innerJoin;\nexports.insert = insert;\nexports.insertAll = insertAll;\nexports.intersection = intersection;\nexports.intersperse = intersperse;\nexports.into = into;\nexports.invert = invert;\nexports.invertObj = invertObj;\nexports.invoker = invoker;\nexports.is = is;\nexports.isEmpty = isEmpty;\nexports.isNil = isNil;\nexports.join = join;\nexports.juxt = juxt;\nexports.keys = keys;\nexports.keysIn = keysIn;\nexports.last = last;\nexports.lastIndexOf = lastIndexOf;\nexports.length = length;\nexports.lens = lens;\nexports.lensIndex = lensIndex;\nexports.lensPath = lensPath;\nexports.lensProp = lensProp;\nexports.lift = lift;\nexports.liftN = liftN;\nexports.lt = lt;\nexports.lte = lte;\nexports.map = map;\nexports.mapAccum = mapAccum;\nexports.mapAccumRight = mapAccumRight;\nexports.mapObjIndexed = mapObjIndexed;\nexports.match = match;\nexports.mathMod = mathMod;\nexports.max = max;\nexports.maxBy = maxBy;\nexports.mean = mean;\nexports.median = median;\nexports.memoize = memoize;\nexports.memoizeWith = memoizeWith;\nexports.merge = merge;\nexports.mergeAll = mergeAll;\nexports.mergeDeepLeft = mergeDeepLeft;\nexports.mergeDeepRight = mergeDeepRight;\nexports.mergeDeepWith = mergeDeepWith;\nexports.mergeDeepWithKey = mergeDeepWithKey;\nexports.mergeWith = mergeWith;\nexports.mergeWithKey = mergeWithKey;\nexports.min = min;\nexports.minBy = minBy;\nexports.modulo = modulo;\nexports.multiply = multiply;\nexports.nAry = nAry;\nexports.negate = negate;\nexports.none = none;\nexports.not = not;\nexports.nth = nth;\nexports.nthArg = nthArg;\nexports.o = o;\nexports.objOf = objOf;\nexports.of = of;\nexports.omit = omit;\nexports.once = once;\nexports.or = or;\nexports.over = over;\nexports.pair = pair;\nexports.partial = partial;\nexports.partialRight = partialRight;\nexports.partition = partition;\nexports.path = path;\nexports.pathEq = pathEq;\nexports.pathOr = pathOr;\nexports.pathSatisfies = pathSatisfies;\nexports.pick = pick;\nexports.pickAll = pickAll;\nexports.pickBy = pickBy;\nexports.pipe = pipe;\nexports.pipeK = pipeK;\nexports.pipeP = pipeP;\nexports.pluck = pluck;\nexports.prepend = prepend;\nexports.product = product;\nexports.project = project;\nexports.prop = prop;\nexports.propEq = propEq;\nexports.propIs = propIs;\nexports.propOr = propOr;\nexports.propSatisfies = propSatisfies;\nexports.props = props;\nexports.range = range;\nexports.reduce = reduce;\nexports.reduceBy = reduceBy;\nexports.reduceRight = reduceRight;\nexports.reduceWhile = reduceWhile;\nexports.reduced = reduced;\nexports.reject = reject;\nexports.remove = remove;\nexports.repeat = repeat;\nexports.replace = replace;\nexports.reverse = reverse;\nexports.scan = scan;\nexports.sequence = sequence;\nexports.set = set;\nexports.slice = slice;\nexports.sort = sort;\nexports.sortBy = sortBy;\nexports.sortWith = sortWith;\nexports.split = split;\nexports.splitAt = splitAt;\nexports.splitEvery = splitEvery;\nexports.splitWhen = splitWhen;\nexports.startsWith = startsWith;\nexports.subtract = subtract;\nexports.sum = sum;\nexports.symmetricDifference = symmetricDifference;\nexports.symmetricDifferenceWith = symmetricDifferenceWith;\nexports.tail = tail;\nexports.take = take;\nexports.takeLast = takeLast;\nexports.takeLastWhile = takeLastWhile;\nexports.takeWhile = takeWhile;\nexports.tap = tap;\nexports.test = test;\nexports.times = times;\nexports.toLower = toLower;\nexports.toPairs = toPairs;\nexports.toPairsIn = toPairsIn;\nexports.toString = toString$1;\nexports.toUpper = toUpper;\nexports.transduce = transduce;\nexports.transpose = transpose;\nexports.traverse = traverse;\nexports.trim = trim;\nexports.tryCatch = tryCatch;\nexports.type = type;\nexports.unapply = unapply;\nexports.unary = unary;\nexports.uncurryN = uncurryN;\nexports.unfold = unfold;\nexports.union = union;\nexports.unionWith = unionWith;\nexports.uniq = uniq;\nexports.uniqBy = uniqBy;\nexports.uniqWith = uniqWith;\nexports.unless = unless;\nexports.unnest = unnest;\nexports.until = until;\nexports.update = update;\nexports.useWith = useWith;\nexports.values = values;\nexports.valuesIn = valuesIn;\nexports.view = view;\nexports.when = when;\nexports.where = where;\nexports.whereEq = whereEq;\nexports.without = without;\nexports.xprod = xprod;\nexports.zip = zip;\nexports.zipObj = zipObj;\nexports.zipWith = zipWith;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define('vendor/Bacon',factory) :\n\t(global.Bacon = factory());\n}(this, (function () { 'use strict';\n\nfunction nop() {}\n\nfunction former(x) {\n  return x;\n}\nfunction cloneArray(xs) {\n  return xs.slice(0);\n}\nfunction assert(message, condition) {\n  if (!condition) {\n    throw new Error(message);\n  }\n}\n\nfunction assertObservableIsProperty(x) {\n  if ((x != null ? x._isObservable : void 0) && !(x != null ? x._isProperty : void 0)) {\n    throw new Error(\"Observable is not a Property : \" + x);\n  }\n}\nfunction assertEventStream(event) {\n  if (!(event != null ? event._isEventStream : void 0)) {\n    throw new Error(\"not an EventStream : \" + event);\n  }\n}\n\nfunction assertObservable(event) {\n  if (!(event != null ? event._isObservable : void 0)) {\n    throw new Error(\"not an Observable : \" + event);\n  }\n}\n\nfunction assertFunction(f) {\n  return assert(\"not a function : \" + f, _.isFunction(f));\n}\nvar isArray = Array.isArray || function (xs) {\n  return xs instanceof Array;\n};\nvar isObservable = function (x) {\n  return x && x._isObservable;\n};\nfunction assertArray(xs) {\n  if (!isArray(xs)) {\n    throw new Error(\"not an array : \" + xs);\n  }\n}\nfunction assertNoArguments(args) {\n  return assert(\"no arguments supported\", args.length === 0);\n}\n\n\n\nfunction extend(target) {\n  var length = arguments.length;\n  for (var i = 1; 1 < length ? i < length : i > length; 1 < length ? i++ : i--) {\n    for (var prop in arguments[i]) {\n      target[prop] = arguments[i][prop];\n    }\n  }\n  return target;\n}\n\nfunction inherit(child, parent) {\n  var hasProp = {}.hasOwnProperty;\n  function ctor() {}\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n  for (var key in parent) {\n    if (hasProp.call(parent, key)) {\n      child[key] = parent[key];\n    }\n  }\n  return child;\n}\n\nfunction symbol(key) {\n  if (typeof Symbol !== \"undefined\" && Symbol[key]) {\n    return Symbol[key];\n  } else if (typeof Symbol !== \"undefined\" && typeof Symbol['for'] === \"function\") {\n    return Symbol[key] = Symbol['for'](key);\n  } else {\n    return \"@@\" + key;\n  }\n}\n\nfunction Some(value) {\n  this.value = value;\n}\n\nextend(Some.prototype, {\n  _isSome: true,\n  getOrElse: function () {\n    return this.value;\n  },\n  get: function () {\n    return this.value;\n  },\n  filter: function (f) {\n    if (f(this.value)) {\n      return new Some(this.value);\n    } else {\n      return None;\n    }\n  },\n  map: function (f) {\n    return new Some(f(this.value));\n  },\n  forEach: function (f) {\n    return f(this.value);\n  },\n\n  isDefined: true,\n  toArray: function () {\n    return [this.value];\n  },\n  inspect: function () {\n    return \"Some(\" + this.value + \")\";\n  },\n  toString: function () {\n    return this.inspect();\n  }\n});\n\nvar None = {\n  _isNone: true,\n  getOrElse: function (value) {\n    return value;\n  },\n  filter: function () {\n    return None;\n  },\n  map: function () {\n    return None;\n  },\n  forEach: function () {},\n\n  isDefined: false,\n  toArray: function () {\n    return [];\n  },\n  inspect: function () {\n    return \"None\";\n  },\n  toString: function () {\n    return this.inspect();\n  }\n};\n\nvar toOption = function (v) {\n  if (v && (v._isSome || v.isNone)) {\n    return v;\n  } else {\n    return new Some(v);\n  }\n};\n\nvar _ = {\n  indexOf: function () {\n    if (Array.prototype.indexOf) {\n      return function (xs, x) {\n        return xs.indexOf(x);\n      };\n    } else {\n      return function (xs, x) {\n        for (var i = 0, y; i < xs.length; i++) {\n          y = xs[i];\n          if (x === y) {\n            return i;\n          }\n        }\n        return -1;\n      };\n    }\n  }(),\n  indexWhere: function (xs, f) {\n    for (var i = 0, y; i < xs.length; i++) {\n      y = xs[i];\n      if (f(y)) {\n        return i;\n      }\n    }\n    return -1;\n  },\n  head: function (xs) {\n    return xs[0];\n  },\n  always: function (x) {\n    return function () {\n      return x;\n    };\n  },\n  negate: function (f) {\n    return function (x) {\n      return !f(x);\n    };\n  },\n  empty: function (xs) {\n    return xs.length === 0;\n  },\n  tail: function (xs) {\n    return xs.slice(1, xs.length);\n  },\n  filter: function (f, xs) {\n    var filtered = [];\n    for (var i = 0, x; i < xs.length; i++) {\n      x = xs[i];\n      if (f(x)) {\n        filtered.push(x);\n      }\n    }\n    return filtered;\n  },\n  map: function (f, xs) {\n    return function () {\n      var result = [];\n      for (var i = 0, x; i < xs.length; i++) {\n        x = xs[i];\n        result.push(f(x));\n      }\n      return result;\n    }();\n  },\n  each: function (xs, f) {\n    for (var key in xs) {\n      if (Object.prototype.hasOwnProperty.call(xs, key)) {\n        var value = xs[key];\n        f(key, value);\n      }\n    }\n  },\n  toArray: function (xs) {\n    return isArray(xs) ? xs : [xs];\n  },\n  contains: function (xs, x) {\n    return _.indexOf(xs, x) !== -1;\n  },\n  id: function (x) {\n    return x;\n  },\n  last: function (xs) {\n    return xs[xs.length - 1];\n  },\n  all: function (xs) {\n    var f = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _.id;\n\n    for (var i = 0, x; i < xs.length; i++) {\n      x = xs[i];\n      if (!f(x)) {\n        return false;\n      }\n    }\n    return true;\n  },\n  any: function (xs) {\n    var f = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _.id;\n\n    for (var i = 0, x; i < xs.length; i++) {\n      x = xs[i];\n      if (f(x)) {\n        return true;\n      }\n    }\n    return false;\n  },\n  without: function (x, xs) {\n    return _.filter(function (y) {\n      return y !== x;\n    }, xs);\n  },\n  remove: function (x, xs) {\n    var i = _.indexOf(xs, x);\n    if (i >= 0) {\n      return xs.splice(i, 1);\n    }\n  },\n  fold: function (xs, seed, f) {\n    for (var i = 0, x; i < xs.length; i++) {\n      x = xs[i];\n      seed = f(seed, x);\n    }\n    return seed;\n  },\n  flatMap: function (f, xs) {\n    return _.fold(xs, [], function (ys, x) {\n      return ys.concat(f(x));\n    });\n  },\n  cached: function (f) {\n    var value = None;\n    return function () {\n      if (typeof value !== \"undefined\" && value !== null ? value._isNone : undefined) {\n        value = f();\n        f = undefined;\n      }\n      return value;\n    };\n  },\n  bind: function (fn, me) {\n    return function () {\n      return fn.apply(me, arguments);\n    };\n  },\n  isFunction: function (f) {\n    return typeof f === \"function\";\n  },\n  toString: function (obj) {\n    var internals, key, value;\n    var hasProp = {}.hasOwnProperty;\n    try {\n      recursionDepth++;\n      if (obj == null) {\n        return \"undefined\";\n      } else if (_.isFunction(obj)) {\n        return \"function\";\n      } else if (isArray(obj)) {\n        if (recursionDepth > 5) {\n          return \"[..]\";\n        }\n        return \"[\" + _.map(_.toString, obj).toString() + \"]\";\n      } else if ((obj != null ? obj.toString : void 0) != null && obj.toString !== Object.prototype.toString) {\n        return obj.toString();\n      } else if (typeof obj === \"object\") {\n        if (recursionDepth > 5) {\n          return \"{..}\";\n        }\n        internals = function () {\n          var results = [];\n          for (key in obj) {\n            if (!hasProp.call(obj, key)) continue;\n            value = function () {\n              try {\n                return obj[key];\n              } catch (error) {\n                return error;\n              }\n            }();\n            results.push(_.toString(key) + \":\" + _.toString(value));\n          }\n          return results;\n        }();\n        return \"{\" + internals + \"}\";\n      } else {\n        return obj;\n      }\n    } finally {\n      recursionDepth--;\n    }\n  }\n};\n\nvar recursionDepth = 0;\n\nvar eventIdCounter = 0;\n\nfunction Event() {\n  this.id = ++eventIdCounter;\n}\n\nEvent.prototype._isEvent = true;\nEvent.prototype.isEvent = true;\nEvent.prototype.isEnd = false;\nEvent.prototype.isInitial = false;\nEvent.prototype.isNext = false;\nEvent.prototype.isError = false;\nEvent.prototype.hasValue = false;\nEvent.prototype.filter = function () {\n  return true;\n};\nEvent.prototype.inspect = function () {\n  return this.toString();\n};\nEvent.prototype.log = function () {\n  return this.toString();\n};\nEvent.prototype.toNext = function () {\n  return this;\n};\n\nfunction Next(value) {\n  if (!(this instanceof Next)) {\n    return new Next(value);\n  }\n  Event.call(this);\n  this.value = value;\n}\n\ninherit(Next, Event);\n\nNext.prototype.isNext = true;\nNext.prototype.hasValue = true;\n\nNext.prototype.fmap = function (f) {\n  return this.apply(f(this.value));\n};\n\nNext.prototype.apply = function (value) {\n  return new Next(value);\n};\nNext.prototype.filter = function (f) {\n  return f(this.value);\n};\nNext.prototype.toString = function () {\n  return _.toString(this.value);\n};\nNext.prototype.log = function () {\n  return this.value;\n};\nNext.prototype._isNext = true;\n\nfunction Initial(value) {\n  if (!(this instanceof Initial)) {\n    return new Initial(value);\n  }\n  Next.call(this, value);\n}\n\ninherit(Initial, Next);\n\nInitial.prototype._isInitial = true;\nInitial.prototype.isInitial = true;\nInitial.prototype.isNext = false;\nInitial.prototype.apply = function (value) {\n  return new Initial(value);\n};\nInitial.prototype.toNext = function () {\n  return new Next(this.value);\n};\n\nfunction End() {\n  if (!(this instanceof End)) {\n    return new End();\n  }\n  Event.call(this);\n}\n\ninherit(End, Event);\nEnd.prototype.isEnd = true;\nEnd.prototype.fmap = function () {\n  return this;\n};\nEnd.prototype.apply = function () {\n  return this;\n};\nEnd.prototype.toString = function () {\n  return \"<end>\";\n};\n\nfunction Error$1(error) {\n  if (!(this instanceof Error$1)) {\n    return new Error$1(error);\n  }\n  this.error = error;\n  Event.call(this);\n}\n\ninherit(Error$1, Event);\nError$1.prototype.isError = true;\nError$1.prototype.fmap = function () {\n  return this;\n};\nError$1.prototype.apply = function () {\n  return this;\n};\nError$1.prototype.toString = function () {\n  return \"<error> \" + _.toString(this.error);\n};\n\nfunction initialEvent(value) {\n  return new Initial(value);\n}\nfunction nextEvent(value) {\n  return new Next(value);\n}\nfunction endEvent() {\n  return new End();\n}\nfunction toEvent(x) {\n  if (x && x._isEvent) {\n    return x;\n  } else {\n    return nextEvent(x);\n  }\n}\n\nvar noMore = \"<no-more>\";\nvar more = \"<more>\";\n\nvar spies = [];\nfunction registerObs(obs) {\n  if (spies.length) {\n    if (!registerObs.running) {\n      try {\n        registerObs.running = true;\n        spies.forEach(function (spy) {\n          spy(obs);\n        });\n      } finally {\n        delete registerObs.running;\n      }\n    }\n  }\n}\n\nvar spy = (function (spy) {\n  return spies.push(spy);\n});\n\nfunction Desc(context, method, args) {\n  this.context = context;\n  this.method = method;\n  this.args = args;\n}\n\nextend(Desc.prototype, {\n  _isDesc: true,\n  deps: function () {\n    if (!this.cached) {\n      this.cached = findDeps([this.context].concat(this.args));\n    }\n    return this.cached;\n  },\n  toString: function () {\n    var args = _.map(_.toString, this.args);\n    return _.toString(this.context) + \".\" + _.toString(this.method) + \"(\" + args + \")\";\n  }\n});\n\nfunction describe(context, method) {\n  var ref = context || method;\n  if (ref && ref._isDesc) {\n    return context || method;\n  } else {\n    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    return new Desc(context, method, args);\n  }\n}\n\nfunction withDesc(desc, obs) {\n  obs.desc = desc;\n  return obs;\n}\n\nfunction findDeps(x) {\n  if (isArray(x)) {\n    return _.flatMap(findDeps, x);\n  } else if (isObservable(x)) {\n    return [x];\n  } else if (typeof x !== \"undefined\" && x !== null ? x._isSource : undefined) {\n    return [x.obs];\n  } else {\n    return [];\n  }\n}\n\nvar scheduler = {\n  setTimeout: function (f, d) {\n    return setTimeout(f, d);\n  },\n  setInterval: function (f, i) {\n    return setInterval(f, i);\n  },\n  clearInterval: function (id) {\n    return clearInterval(id);\n  },\n  clearTimeout: function (id) {\n    return clearTimeout(id);\n  },\n  now: function () {\n    return new Date().getTime();\n  }\n};\n\nvar UpdateBarrier = function () {\n  var rootEvent = null;\n  var waiterObs = [];\n  var waiters = {};\n  var aftersStack = [];\n  var aftersStackHeight = 0;\n  var flushed = {};\n  var processingAfters = false;\n\n  function toString() {\n    return _.toString({ rootEvent: rootEvent, processingAfters: processingAfters, waiterObs: waiterObs, waiters: waiters, aftersStack: aftersStack, aftersStackHeight: aftersStackHeight, flushed: flushed });\n  }\n\n  function ensureStackHeight(h) {\n    if (h <= aftersStackHeight) return;\n    if (!aftersStack[h - 1]) {\n      aftersStack[h - 1] = [[], 0];\n    }\n    aftersStackHeight = h;\n  }\n\n  function isInTransaction() {\n    return rootEvent !== null;\n  }\n\n  function soonButNotYet(obs, f) {\n    if (rootEvent) {\n      whenDoneWith(obs, f);\n    } else {\n      Bacon.scheduler.setTimeout(f, 0);\n    }\n  }\n\n  function afterTransaction(obs, f) {\n    if (rootEvent || processingAfters) {\n      ensureStackHeight(1);\n      var stackIndexForThisObs = 0;\n      while (stackIndexForThisObs < aftersStackHeight - 1) {\n        if (containsObs(obs, aftersStack[stackIndexForThisObs][0])) {\n          break;\n        }\n        stackIndexForThisObs++;\n      }\n      var listFromStack = aftersStack[stackIndexForThisObs][0];\n      listFromStack.push([obs, f]);\n      if (!rootEvent) {\n        processAfters();\n      }\n    } else {\n      return f();\n    }\n  }\n\n  function containsObs(obs, aftersList) {\n    for (var i = 0; i < aftersList.length; i++) {\n      if (aftersList[i][0].id == obs.id) return true;\n    }\n    return false;\n  }\n\n  function processAfters() {\n    var stackSizeAtStart = aftersStackHeight;\n    if (!stackSizeAtStart) return;\n    var isRoot = !processingAfters;\n    processingAfters = true;\n    try {\n      while (aftersStackHeight >= stackSizeAtStart) {\n        var topOfStack = aftersStack[aftersStackHeight - 1];\n        if (!topOfStack) throw new Error(\"Unexpected stack top: \" + topOfStack);\n        var topAfters = topOfStack[0],\n            index = topOfStack[1];\n\n        if (index < topAfters.length) {\n          var _topAfters$index = topAfters[index],\n              after = _topAfters$index[1];\n\n          topOfStack[1]++;\n          ensureStackHeight(aftersStackHeight + 1);\n          var callSuccess = false;\n          try {\n            after();\n            callSuccess = true;\n            while (aftersStackHeight > stackSizeAtStart && aftersStack[aftersStackHeight - 1][0].length == 0) {\n              aftersStackHeight--;\n            }\n          } finally {\n            if (!callSuccess) {\n              aftersStack = [];\n              aftersStackHeight = 0;\n            }\n          }\n        } else {\n          topOfStack[0] = [];\n          topOfStack[1] = 0;\n          break;\n        }\n      }\n    } finally {\n      if (isRoot) processingAfters = false;\n    }\n  }\n\n  function whenDoneWith(obs, f) {\n    if (rootEvent) {\n      var obsWaiters = waiters[obs.id];\n      if (!(typeof obsWaiters !== \"undefined\" && obsWaiters !== null)) {\n        obsWaiters = waiters[obs.id] = [f];\n        return waiterObs.push(obs);\n      } else {\n        return obsWaiters.push(f);\n      }\n    } else {\n      return f();\n    }\n  }\n\n  function flush() {\n    while (waiterObs.length > 0) {\n      flushWaiters(0, true);\n    }\n    flushed = {};\n  }\n\n  function flushWaiters(index, deps) {\n    var obs = waiterObs[index];\n    var obsId = obs.id;\n    var obsWaiters = waiters[obsId];\n    waiterObs.splice(index, 1);\n    delete waiters[obsId];\n    if (deps && waiterObs.length > 0) {\n      flushDepsOf(obs);\n    }\n    for (var i = 0, f; i < obsWaiters.length; i++) {\n      f = obsWaiters[i];\n      f();\n    }\n  }\n\n  function flushDepsOf(obs) {\n    if (flushed[obs.id]) return;\n    var deps = obs.internalDeps();\n    for (var i = 0, dep; i < deps.length; i++) {\n      dep = deps[i];\n      flushDepsOf(dep);\n      if (waiters[dep.id]) {\n        var index = _.indexOf(waiterObs, dep);\n        flushWaiters(index, false);\n      }\n    }\n    flushed[obs.id] = true;\n  }\n\n  function inTransaction(event, context, f, args) {\n    if (rootEvent) {\n      return f.apply(context, args);\n    } else {\n      rootEvent = event;\n      try {\n        var result = f.apply(context, args);\n\n        flush();\n      } finally {\n        rootEvent = null;\n        processAfters();\n      }\n      return result;\n    }\n  }\n\n  function currentEventId() {\n    return rootEvent ? rootEvent.id : undefined;\n  }\n\n  function wrappedSubscribe(obs, sink) {\n    assertFunction(sink);\n    var unsubd = false;\n    var shouldUnsub = false;\n    var doUnsub = function () {\n      shouldUnsub = true;\n      return shouldUnsub;\n    };\n    function unsub() {\n      unsubd = true;\n      return doUnsub();\n    }\n    doUnsub = obs.dispatcher.subscribe(function (event) {\n      return afterTransaction(obs, function () {\n        if (!unsubd) {\n          var reply = sink(event);\n          if (reply === noMore) {\n            return unsub();\n          }\n        }\n      });\n    });\n    if (shouldUnsub) {\n      doUnsub();\n    }\n    return unsub;\n  }\n\n  function hasWaiters() {\n    return waiterObs.length > 0;\n  }\n\n  return { toString: toString, whenDoneWith: whenDoneWith, hasWaiters: hasWaiters, inTransaction: inTransaction, currentEventId: currentEventId, wrappedSubscribe: wrappedSubscribe, afterTransaction: afterTransaction, soonButNotYet: soonButNotYet, isInTransaction: isInTransaction };\n}();\n\nfunction Dispatcher(_subscribe, _handleEvent) {\n  this._subscribe = _subscribe;\n  this._handleEvent = _handleEvent;\n  this.subscribe = _.bind(this.subscribe, this);\n  this.handleEvent = _.bind(this.handleEvent, this);\n  this.pushing = false;\n  this.ended = false;\n  this.prevError = undefined;\n  this.unsubSrc = undefined;\n  this.subscriptions = [];\n  this.queue = [];\n}\n\nDispatcher.prototype.hasSubscribers = function () {\n  return this.subscriptions.length > 0;\n};\n\nDispatcher.prototype.removeSub = function (subscription) {\n  this.subscriptions = _.without(subscription, this.subscriptions);\n  return this.subscriptions;\n};\n\nDispatcher.prototype.push = function (event) {\n  if (event.isEnd) {\n    this.ended = true;\n  }\n  return UpdateBarrier.inTransaction(event, this, this.pushIt, [event]);\n};\n\nDispatcher.prototype.pushToSubscriptions = function (event) {\n  try {\n    var tmp = this.subscriptions;\n    var len = tmp.length;\n    for (var i = 0; i < len; i++) {\n      var sub = tmp[i];\n      var reply = sub.sink(event);\n      if (reply === noMore || event.isEnd) {\n        this.removeSub(sub);\n      }\n    }\n    return true;\n  } catch (error) {\n    this.pushing = false;\n    this.queue = [];\n    throw error;\n  }\n};\n\nDispatcher.prototype.pushIt = function (event) {\n  if (!this.pushing) {\n    if (event === this.prevError) {\n      return;\n    }\n    if (event.isError) {\n      this.prevError = event;\n    }\n    this.pushing = true;\n    this.pushToSubscriptions(event);\n    this.pushing = false;\n    while (this.queue.length) {\n      event = this.queue.shift();\n      this.push(event);\n    }\n    if (this.hasSubscribers()) {\n      return more;\n    } else {\n      this.unsubscribeFromSource();\n      return noMore;\n    }\n  } else {\n    this.queue.push(event);\n    return more;\n  }\n};\n\nDispatcher.prototype.handleEvent = function (event) {\n  if (this._handleEvent) {\n    return this._handleEvent(event);\n  } else {\n    return this.push(event);\n  }\n};\n\nDispatcher.prototype.unsubscribeFromSource = function () {\n  if (this.unsubSrc) {\n    this.unsubSrc();\n  }\n  this.unsubSrc = undefined;\n};\n\nDispatcher.prototype.subscribe = function (sink) {\n  var subscription;\n  if (this.ended) {\n    sink(endEvent());\n    return nop;\n  } else {\n    assertFunction(sink);\n    subscription = {\n      sink: sink\n    };\n    this.subscriptions.push(subscription);\n    if (this.subscriptions.length === 1) {\n      this.unsubSrc = this._subscribe(this.handleEvent);\n      assertFunction(this.unsubSrc);\n    }\n    return function (_this) {\n      return function () {\n        _this.removeSub(subscription);\n        if (!_this.hasSubscribers()) {\n          return _this.unsubscribeFromSource();\n        }\n      };\n    }(this);\n  }\n};\n\nfunction withMethodCallSupport(wrapped) {\n  return function (f) {\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (typeof f === \"object\" && args.length) {\n      var context = f;\n      var methodName = args[0];\n      f = function () {\n        return context[methodName].apply(context, arguments);\n      };\n      args = args.slice(1);\n    }\n    return wrapped.apply(undefined, [f].concat(args));\n  };\n}\n\nfunction makeFunctionArgs(args) {\n  args = Array.prototype.slice.call(args);\n  return makeFunction_.apply(undefined, args);\n}\n\nfunction partiallyApplied(f, applied) {\n  return function () {\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return f.apply(undefined, applied.concat(args));\n  };\n}\n\nfunction toSimpleExtractor(args) {\n  return function (key) {\n    return function (value) {\n      if (!(typeof value !== \"undefined\" && value !== null)) {\n        return;\n      } else {\n        var fieldValue = value[key];\n        if (_.isFunction(fieldValue)) {\n          return fieldValue.apply(value, args);\n        } else {\n          return fieldValue;\n        }\n      }\n    };\n  };\n}\n\nfunction toFieldExtractor(f, args) {\n  var parts = f.slice(1).split(\".\");\n  var partFuncs = _.map(toSimpleExtractor(args), parts);\n  return function (value) {\n    for (var i = 0, f; i < partFuncs.length; i++) {\n      f = partFuncs[i];\n      value = f(value);\n    }\n    return value;\n  };\n}\n\nfunction isFieldKey(f) {\n  return typeof f === \"string\" && f.length > 1 && f.charAt(0) === \".\";\n}\n\nvar makeFunction_ = withMethodCallSupport(function (f) {\n  for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    args[_key3 - 1] = arguments[_key3];\n  }\n\n  if (_.isFunction(f)) {\n    if (args.length) {\n      return partiallyApplied(f, args);\n    } else {\n      return f;\n    }\n  } else if (isFieldKey(f)) {\n    return toFieldExtractor(f, args);\n  } else {\n    return _.always(f);\n  }\n});\n\nfunction makeFunction(f, args) {\n  return makeFunction_.apply(undefined, [f].concat(args));\n}\n\nfunction convertArgsToFunction(obs, f, args, method) {\n  if (f && f._isProperty) {\n    var sampled = f.sampledBy(obs, function (p, s) {\n      return [p, s];\n    });\n    return method.call(sampled, function (_ref) {\n      var p = _ref[0];\n      return p;\n    }).map(function (_ref2) {\n      var s = _ref2[1];\n      return s;\n    });\n  } else {\n    f = makeFunction(f, args);\n    return method.call(obs, f);\n  }\n}\n\nfunction toCombinator(f) {\n  if (_.isFunction(f)) {\n    return f;\n  } else if (isFieldKey(f)) {\n    var key = toFieldKey(f);\n    return function (left, right) {\n      return left[key](right);\n    };\n  } else {\n    throw new Error(\"not a function or a field key: \" + f);\n  }\n}\n\nfunction toFieldKey(f) {\n  return f.slice(1);\n}\n\nvar idCounter = 0;\n\nfunction Observable(desc) {\n  assert(\"desc missing\", desc);\n  this.desc = desc;\n  this.id = ++idCounter;\n  this.initialDesc = this.desc;\n}\n\nextend(Observable.prototype, {\n  _isObservable: true,\n\n  subscribe: function (sink) {\n    return UpdateBarrier.wrappedSubscribe(this, sink);\n  },\n  subscribeInternal: function (sink) {\n    return this.dispatcher.subscribe(sink);\n  },\n  onValue: function () {\n    var f = makeFunctionArgs(arguments);\n    return this.subscribe(function (event) {\n      if (event.hasValue) {\n        return f(event.value);\n      }\n    });\n  },\n  onValues: function (f) {\n    return this.onValue(function (args) {\n      return f.apply(undefined, args);\n    });\n  },\n  onError: function () {\n    var f = makeFunctionArgs(arguments);\n    return this.subscribe(function (event) {\n      if (event.isError) {\n        return f(event.error);\n      }\n    });\n  },\n  onEnd: function () {\n    var f = makeFunctionArgs(arguments);\n    return this.subscribe(function (event) {\n      if (event.isEnd) {\n        return f();\n      }\n    });\n  },\n  name: function (name) {\n    this._name = name;\n    return this;\n  },\n  withDescription: function () {\n    this.desc = describe.apply(undefined, arguments);\n    return this;\n  },\n  toString: function () {\n    if (this._name) {\n      return this._name;\n    } else {\n      return this.desc.toString();\n    }\n  },\n  deps: function () {\n    return this.desc.deps();\n  },\n  internalDeps: function () {\n    return this.initialDesc.deps();\n  }\n});\n\nObservable.prototype.assign = Observable.prototype.onValue;\nObservable.prototype.forEach = Observable.prototype.onValue;\nObservable.prototype.inspect = Observable.prototype.toString;\n\nfunction PropertyDispatcher(property, subscribe, handleEvent) {\n  Dispatcher.call(this, subscribe, handleEvent);\n  this.property = property;\n  this.subscribe = _.bind(this.subscribe, this);\n  this.current = None;\n  this.currentValueRootId = undefined;\n  this.propertyEnded = false;\n}\n\ninherit(PropertyDispatcher, Dispatcher);\nextend(PropertyDispatcher.prototype, {\n  push: function (event) {\n    if (event.isEnd) {\n      this.propertyEnded = true;\n    }\n    if (event.hasValue) {\n      this.current = new Some(event);\n      this.currentValueRootId = UpdateBarrier.currentEventId();\n    }\n    return Dispatcher.prototype.push.call(this, event);\n  },\n  maybeSubSource: function (sink, reply) {\n    if (reply === Bacon.noMore) {\n      return nop;\n    } else if (this.propertyEnded) {\n      sink(endEvent());\n      return nop;\n    } else {\n      return Dispatcher.prototype.subscribe.call(this, sink);\n    }\n  },\n  subscribe: function (sink) {\n    var _this = this;\n\n    var reply = Bacon.more;\n\n    if (this.current.isDefined && (this.hasSubscribers() || this.propertyEnded)) {\n      var dispatchingId = UpdateBarrier.currentEventId();\n      var valId = this.currentValueRootId;\n      if (!this.propertyEnded && valId && dispatchingId && dispatchingId !== valId) {\n        UpdateBarrier.whenDoneWith(this.property, function () {\n          if (_this.currentValueRootId === valId) {\n            return sink(initialEvent(_this.current.get().value));\n          }\n        });\n\n        return this.maybeSubSource(sink, reply);\n      } else {\n        UpdateBarrier.inTransaction(undefined, this, function () {\n          reply = sink(initialEvent(this.current.get().value));\n          return reply;\n        }, []);\n        return this.maybeSubSource(sink, reply);\n      }\n    } else {\n      return this.maybeSubSource(sink, reply);\n    }\n  }\n});\n\nfunction propertyFromStreamSubscribe(desc, subscribe) {\n  assertFunction(subscribe);\n  return new Property(desc, streamSubscribeToPropertySubscribe(None, subscribe));\n}\n\nfunction Property(desc, subscribe, handler) {\n  Observable.call(this, desc);\n  assertFunction(subscribe);\n  this.dispatcher = new PropertyDispatcher(this, subscribe, handler);\n  registerObs(this);\n}\n\ninherit(Property, Observable);\nextend(Property.prototype, {\n  _isProperty: true,\n\n  changes: function () {\n    var _this2 = this;\n\n    return new EventStream(new Desc(this, \"changes\", []), function (sink) {\n      return _this2.dispatcher.subscribe(function (event) {\n        if (!event.isInitial) {\n          return sink(event);\n        }\n      });\n    });\n  },\n  withHandler: function (handler) {\n    return new Property(new Desc(this, \"withHandler\", [handler]), this.dispatcher.subscribe, handler);\n  },\n  toProperty: function () {\n    assertNoArguments(arguments);\n    return this;\n  }\n});\n\nvar allowSync = { forceAsync: false };\nvar defaultDesc = describe(\"Bacon\", \"new EventStream\", []);\nfunction EventStream(desc, subscribe, handler, options) {\n  if (!(this instanceof EventStream)) {\n    return new EventStream(desc, subscribe, handler);\n  }\n  if (_.isFunction(desc)) {\n    handler = subscribe;\n    subscribe = desc;\n    desc = defaultDesc;\n  }\n  if (options !== allowSync) {\n    subscribe = asyncWrapSubscribe(this, subscribe);\n  }\n  Observable.call(this, desc);\n\n  this.dispatcher = new Dispatcher(subscribe, handler);\n  registerObs(this);\n}\n\nfunction asyncWrapSubscribe(obs, subscribe) {\n  var subscribing = false;\n\n  return function wrappedSubscribe(sink) {\n    var inTransaction = UpdateBarrier.isInTransaction();\n    subscribing = true;\n    var asyncDeliveries;\n    function deliverAsync() {\n      var toDeliverNow = asyncDeliveries;\n      asyncDeliveries = null;\n      for (var i = 0; i < toDeliverNow.length; i++) {\n        var event = toDeliverNow[i];\n        sink(event);\n      }\n    }\n\n    try {\n      return subscribe(function wrappedSink(event) {\n        if (subscribing || asyncDeliveries) {\n          if (!asyncDeliveries) {\n            asyncDeliveries = [event];\n            if (inTransaction) {\n              UpdateBarrier.soonButNotYet(obs, deliverAsync);\n            } else {\n              Bacon.scheduler.setTimeout(deliverAsync, 0);\n            }\n          } else {\n            asyncDeliveries.push(event);\n          }\n        } else {\n          return sink(event);\n        }\n      });\n    } finally {\n      subscribing = false;\n    }\n  };\n}\n\nfunction streamSubscribeToPropertySubscribe(initValue, streamSubscribe) {\n  return function (sink) {\n    var initSent = false;\n    var subbed = false;\n    var unsub = nop;\n    var reply = more;\n    var sendInit = function () {\n      if (!initSent) {\n        return initValue.forEach(function (value) {\n          initSent = true;\n          reply = sink(new Initial(value));\n          if (reply === noMore) {\n            unsub();\n            unsub = nop;\n            return nop;\n          }\n        });\n      }\n    };\n\n    unsub = streamSubscribe(function (event) {\n      if (event.hasValue) {\n        if (event.isInitial && !subbed) {\n          initValue = new Some(event.value);\n          return more;\n        } else {\n          if (!event.isInitial) {\n            sendInit();\n          }\n          initSent = true;\n          initValue = new Some(event.value);\n          return sink(event);\n        }\n      } else {\n        if (event.isEnd) {\n          reply = sendInit();\n        }\n        if (reply !== noMore) {\n          return sink(event);\n        }\n      }\n    });\n    subbed = true;\n    sendInit();\n    return unsub;\n  };\n}\n\ninherit(EventStream, Observable);\nextend(EventStream.prototype, {\n  _isEventStream: true,\n\n  toProperty: function (initValue_) {\n    var initValue = arguments.length === 0 ? None : toOption(initValue_);\n    var disp = this.dispatcher;\n    var desc = new Desc(this, \"toProperty\", [initValue_]);\n    var streamSubscribe = function (sink) {\n      return disp.subscribe(sink);\n    };\n    return new Property(desc, streamSubscribeToPropertySubscribe(initValue, streamSubscribe));\n  },\n  toEventStream: function () {\n    return this;\n  },\n  withHandler: function (handler) {\n    return new EventStream(new Desc(this, \"withHandler\", [handler]), this.dispatcher.subscribe, handler, allowSync);\n  }\n});\n\nfunction CompositeUnsubscribe() {\n  var ss = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n  this.unsubscribe = _.bind(this.unsubscribe, this);\n  this.unsubscribed = false;\n  this.subscriptions = [];\n  this.starting = [];\n  for (var i = 0, s; i < ss.length; i++) {\n    s = ss[i];\n    this.add(s);\n  }\n}\n\nextend(CompositeUnsubscribe.prototype, {\n  add: function (subscription) {\n    var _this = this;\n\n    if (this.unsubscribed) {\n      return;\n    }\n    var ended = false;\n    var unsub = nop;\n    this.starting.push(subscription);\n    var unsubMe = function () {\n      if (_this.unsubscribed) {\n        return;\n      }\n      ended = true;\n      _this.remove(unsub);\n      return _.remove(subscription, _this.starting);\n    };\n    unsub = subscription(this.unsubscribe, unsubMe);\n    if (!(this.unsubscribed || ended)) {\n      this.subscriptions.push(unsub);\n    } else {\n      unsub();\n    }\n    _.remove(subscription, this.starting);\n    return unsub;\n  },\n  remove: function (unsub) {\n    if (this.unsubscribed) {\n      return;\n    }\n    if (_.remove(unsub, this.subscriptions) !== undefined) {\n      return unsub();\n    }\n  },\n  unsubscribe: function () {\n    if (this.unsubscribed) {\n      return;\n    }\n    this.unsubscribed = true;\n    var iterable = this.subscriptions;\n    for (var i = 0; i < iterable.length; i++) {\n      iterable[i]();\n    }\n    this.subscriptions = [];\n    this.starting = [];\n    return [];\n  },\n  count: function () {\n    if (this.unsubscribed) {\n      return 0;\n    }\n    return this.subscriptions.length + this.starting.length;\n  },\n  empty: function () {\n    return this.count() === 0;\n  }\n});\n\nfunction never() {\n  return new EventStream(describe(Bacon, \"never\"), function (sink) {\n    sink(endEvent());\n    return nop;\n  });\n}\n\nfunction constant(value) {\n  return new Property(new Desc(Bacon, \"constant\", [value]), function (sink) {\n    sink(initialEvent(value));\n    sink(endEvent());\n    return nop;\n  });\n}\n\nvar Bacon = {\n  toString: function () {\n    return \"Bacon\";\n  },\n\n  _: _,\n  Event: Event,\n  Next: Next,\n  Initial: Initial,\n  Error: Error$1,\n  End: End,\n  noMore: noMore,\n  more: more,\n  Desc: Desc,\n  spy: spy,\n  UpdateBarrier: UpdateBarrier,\n  scheduler: scheduler,\n  Dispatcher: Dispatcher,\n  Observable: Observable,\n  EventStream: EventStream,\n  Property: Property,\n  CompositeUnsubscribe: CompositeUnsubscribe,\n  never: never,\n  constant: constant,\n  version: '2.0.7'\n};\n\nBacon.Bacon = Bacon;\n\nfunction map(p) {\n  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return convertArgsToFunction(this, p, args, function (f) {\n    return withDesc(new Desc(this, \"map\", [f]), this.withHandler(function (event) {\n      return this.push(event.fmap(f));\n    }));\n  });\n}\n\nObservable.prototype.map = map;\n\nObservable.prototype.withStateMachine = function (initState, f) {\n  var state = initState;\n  var desc = new Desc(this, \"withStateMachine\", [initState, f]);\n  return withDesc(desc, this.withHandler(function (event) {\n    var fromF = f(state, event);\n    var newState = fromF[0],\n        outputs = fromF[1];\n\n    state = newState;\n    var reply = more;\n    for (var i = 0, output; i < outputs.length; i++) {\n      output = outputs[i];\n      reply = this.push(output);\n      if (reply === noMore) {\n        return reply;\n      }\n    }\n    return reply;\n  }));\n};\n\nvar equals = function (a, b) {\n  return a === b;\n};\n\nvar isNone = function (object) {\n  return typeof object !== \"undefined\" && object !== null ? object._isNone : false;\n};\n\nObservable.prototype.skipDuplicates = function () {\n  var isEqual = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : equals;\n\n  var desc = new Desc(this, \"skipDuplicates\", []);\n  return withDesc(desc, this.withStateMachine(None, function (prev, event) {\n    if (!event.hasValue) {\n      return [prev, [event]];\n    } else if (event.isInitial || isNone(prev) || !isEqual(prev.get(), event.value)) {\n      return [new Some(event.value), [event]];\n    } else {\n      return [prev, []];\n    }\n  }));\n};\n\nfunction Source(obs, sync) {\n  this.obs = obs;\n  this.sync = sync;\n  this.queue = [];\n}\n\nextend(Source.prototype, {\n  _isSource: true,\n\n  subscribe: function (sink) {\n    return this.obs.dispatcher.subscribe(sink);\n  },\n  toString: function () {\n    return this.obs.toString();\n  },\n  markEnded: function () {\n    this.ended = true;\n    return true;\n  },\n  consume: function () {\n    return this.queue[0];\n  },\n  push: function (x) {\n    this.queue = [x];\n  },\n  mayHave: function () {\n    return true;\n  },\n  hasAtLeast: function () {\n    return this.queue.length;\n  },\n\n  flatten: true\n});\n\nfunction ConsumingSource() {\n  Source.apply(this, arguments);\n}\n\ninherit(ConsumingSource, Source);\nextend(ConsumingSource.prototype, {\n  consume: function () {\n    return this.queue.shift();\n  },\n  push: function (x) {\n    return this.queue.push(x);\n  },\n  mayHave: function (c) {\n    return !this.ended || this.queue.length >= c;\n  },\n  hasAtLeast: function (c) {\n    return this.queue.length >= c;\n  },\n\n  flatten: false\n});\n\nfunction BufferingSource(obs) {\n  Source.call(this, obs, true);\n}\n\ninherit(BufferingSource, Source);\nextend(BufferingSource.prototype, {\n  consume: function () {\n    var values = this.queue;\n    this.queue = [];\n    return {\n      value: values\n    };\n  },\n  push: function (x) {\n    return this.queue.push(x.value);\n  },\n  hasAtLeast: function () {\n    return true;\n  }\n});\n\nSource.isTrigger = function (s) {\n  if (s == null) return false;\n  if (s._isSource) {\n    return s.sync;\n  } else {\n    return s._isEventStream;\n  }\n};\n\nSource.fromObservable = function (s) {\n  if (s != null && s._isSource) {\n    return s;\n  } else if (s != null && s._isProperty) {\n    return new Source(s, false);\n  } else {\n    return new ConsumingSource(s, true);\n  }\n};\n\nfunction when() {\n  return when_(EventStream, arguments);\n}\n\nfunction whenP() {\n  return when_(propertyFromStreamSubscribe, arguments);\n}\n\nfunction extractPatternsAndSources(sourceArgs) {\n  var len = sourceArgs.length;\n  var sources = [];\n  var pats = [];\n  var i = 0;\n  var patterns = [];\n  while (i < len) {\n    patterns[i] = sourceArgs[i];\n    patterns[i + 1] = sourceArgs[i + 1];\n    var patSources = _.toArray(sourceArgs[i]);\n    var f = constantToFunction(sourceArgs[i + 1]);\n    var pat = { f: f, ixs: [] };\n    var triggerFound = false;\n    for (var j = 0, s; j < patSources.length; j++) {\n      s = patSources[j];\n      var index = _.indexOf(sources, s);\n      if (!triggerFound) {\n        triggerFound = Source.isTrigger(s);\n      }\n      if (index < 0) {\n        sources.push(s);\n        index = sources.length - 1;\n      }\n      for (var k = 0, ix; k < pat.ixs.length; k++) {\n        ix = pat.ixs[k];\n        if (ix.index === index) {\n          ix.count++;\n        }\n      }\n      pat.ixs.push({ index: index, count: 1 });\n    }\n\n    assert(\"At least one EventStream required\", triggerFound || !patSources.length);\n\n    if (patSources.length > 0) {\n      pats.push(pat);\n    }\n    i = i + 2;\n  }\n  var usage = \"when: expecting arguments in the form (Observable+,function)+\";\n  assert(usage, len % 2 === 0);\n  return [sources, pats, patterns];\n}\n\nfunction when_(ctor, sourceArgs) {\n  if (sourceArgs.length === 0) {\n    return never();\n  }\n\n  var _extractPatternsAndSo = extractPatternsAndSources(sourceArgs),\n      sources = _extractPatternsAndSo[0],\n      pats = _extractPatternsAndSo[1],\n      patterns = _extractPatternsAndSo[2];\n\n  if (!sources.length) {\n    return never();\n  }\n\n  sources = _.map(Source.fromObservable, sources);\n  var needsBarrier = _.any(sources, function (s) {\n    return s.flatten;\n  }) && containsDuplicateDeps(_.map(function (s) {\n    return s.obs;\n  }, sources));\n\n  var desc = new Desc(Bacon, \"when\", patterns);\n  var resultStream = ctor(desc, function (sink) {\n    var triggers = [];\n    var ends = false;\n    function match(p) {\n      for (var i = 0; i < p.ixs.length; i++) {\n        var ix = p.ixs[i];\n        if (!sources[ix.index].hasAtLeast(ix.count)) {\n          return false;\n        }\n      }\n      return true;\n    }\n    function cannotMatch(p) {\n      for (var i = 0; i < p.ixs.length; i++) {\n        var ix = p.ixs[i];\n        if (!sources[ix.index].mayHave(ix.count)) {\n          return true;\n        }\n      }\n    }\n    function nonFlattened(trigger) {\n      return !trigger.source.flatten;\n    }\n    function part(source) {\n      return function (unsubAll) {\n        function flushLater() {\n          return UpdateBarrier.whenDoneWith(resultStream, flush);\n        }\n        function flushWhileTriggers() {\n          if (triggers.length > 0) {\n            var reply = more;\n            var trigger = triggers.pop();\n            for (var i = 0, p; i < pats.length; i++) {\n              p = pats[i];\n              if (match(p)) {\n                var values = [];\n                for (var j = 0; j < p.ixs.length; j++) {\n                  var event = sources[p.ixs[j].index].consume();\n                  values.push(event.value);\n                }\n\n                var applied = p.f.apply(null, values);\n\n                reply = sink(trigger.e.apply(applied));\n                if (triggers.length) {\n                  triggers = _.filter(nonFlattened, triggers);\n                }\n                if (reply === noMore) {\n                  return reply;\n                } else {\n                  return flushWhileTriggers();\n                }\n              }\n            }\n          } else {\n            return more;\n          }\n        }\n        function flush() {\n          var reply = flushWhileTriggers();\n          if (ends) {\n            if (_.all(sources, cannotSync) || _.all(pats, cannotMatch)) {\n              reply = noMore;\n              sink(endEvent());\n            }\n          }\n          if (reply === noMore) {\n            unsubAll();\n          }\n\n          return reply;\n        }\n        return source.subscribe(function (e) {\n          if (e.isEnd) {\n            ends = true;\n            source.markEnded();\n            flushLater();\n          } else if (e.isError) {\n            var reply = sink(e);\n          } else {\n            source.push(e);\n            if (source.sync) {\n              triggers.push({ source: source, e: e });\n              if (needsBarrier || UpdateBarrier.hasWaiters()) {\n                flushLater();\n              } else {\n                flush();\n              }\n            }\n          }\n          if (reply === noMore) {\n            unsubAll();\n          }\n          return reply || more;\n        });\n      };\n    }\n\n    return new CompositeUnsubscribe(function () {\n      var result = [];\n      for (var i = 0, s; i < sources.length; i++) {\n        s = sources[i];\n        result.push(part(s));\n      }\n      return result;\n    }()).unsubscribe;\n  });\n  return resultStream;\n}\n\nfunction containsDuplicateDeps(observables) {\n  var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  function checkObservable(obs) {\n    if (_.contains(state, obs)) {\n      return true;\n    } else {\n      var deps = obs.internalDeps();\n      if (deps.length) {\n        state.push(obs);\n        return _.any(deps, checkObservable);\n      } else {\n        state.push(obs);\n        return false;\n      }\n    }\n  }\n\n  return _.any(observables, checkObservable);\n}\n\nfunction constantToFunction(f) {\n  if (_.isFunction(f)) {\n    return f;\n  } else {\n    return _.always(f);\n  }\n}\n\nfunction cannotSync(source) {\n  return !source.sync || source.ended;\n}\n\nBacon.when = when;\n\nfunction groupSimultaneous() {\n  for (var _len = arguments.length, streams = Array(_len), _key = 0; _key < _len; _key++) {\n    streams[_key] = arguments[_key];\n  }\n\n  return groupSimultaneous_(streams);\n}\n\nfunction groupSimultaneous_(streams, options) {\n  if (streams.length === 1 && isArray(streams[0])) {\n    streams = streams[0];\n  }\n  var sources = function () {\n    var result = [];\n    for (var i = 0; i < streams.length; i++) {\n      result.push(new BufferingSource(streams[i]));\n    }\n    return result;\n  }();\n  var ctor = function (desc, subscribe) {\n    return new EventStream(desc, subscribe, null, options);\n  };\n  return withDesc(new Desc(Bacon, \"groupSimultaneous\", streams), when_(ctor, [sources, function () {\n    for (var _len2 = arguments.length, xs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      xs[_key2] = arguments[_key2];\n    }\n\n    return xs;\n  }]));\n}\n\nBacon.groupSimultaneous = groupSimultaneous;\n\nfunction awaiting(other) {\n  var desc = new Desc(this, \"awaiting\", [other]);\n  return withDesc(desc, groupSimultaneous_([this, other], allowSync).map(function (values) {\n    return values[1].length === 0;\n  }).toProperty(false).skipDuplicates());\n}\n\nObservable.prototype.awaiting = awaiting;\n\nfunction argumentsToObservables(args) {\n  if (isArray(args[0])) {\n    return args[0];\n  } else {\n    return Array.prototype.slice.call(args);\n  }\n}\n\nfunction argumentsToObservablesAndFunction(args) {\n  if (_.isFunction(args[0])) {\n    return [argumentsToObservables(Array.prototype.slice.call(args, 1)), args[0]];\n  } else {\n    return [argumentsToObservables(Array.prototype.slice.call(args, 0, args.length - 1)), _.last(args)];\n  }\n}\n\nBacon.combineAsArray = function () {\n  var streams = argumentsToObservables(arguments);\n  if (streams.length) {\n    var sources = [];\n    for (var i = 0; i < streams.length; i++) {\n      var stream = isObservable(streams[i]) ? streams[i] : Bacon.constant(streams[i]);\n      sources.push(new Source(stream, true));\n    }\n    return withDesc(new Bacon.Desc(Bacon, \"combineAsArray\", streams), whenP(sources, function () {\n      for (var _len = arguments.length, xs = Array(_len), _key = 0; _key < _len; _key++) {\n        xs[_key] = arguments[_key];\n      }\n\n      return xs;\n    }));\n  } else {\n    return constant([]);\n  }\n};\n\nBacon.onValues = function () {\n  return Bacon.combineAsArray(Array.prototype.slice.call(arguments, 0, arguments.length - 1)).onValues(arguments[arguments.length - 1]);\n};\n\nBacon.combineWith = function () {\n  var _argumentsToObservabl = argumentsToObservablesAndFunction(arguments),\n      streams = _argumentsToObservabl[0],\n      f = _argumentsToObservabl[1];\n\n  var desc = new Desc(Bacon, \"combineWith\", [f].concat(streams));\n  return withDesc(desc, Bacon.combineAsArray(streams).map(function (values) {\n    return f.apply(undefined, values);\n  }));\n};\n\nObservable.prototype.combine = function (other, f) {\n  var combinator = toCombinator(f);\n  var desc = new Desc(this, \"combine\", [other, f]);\n  return withDesc(desc, Bacon.combineAsArray(this, other).map(function (values) {\n    return combinator(values[0], values[1]);\n  }));\n};\n\nObservable.prototype.not = function () {\n  return withDesc(new Desc(this, \"not\", []), this.map(function (x) {\n    return !x;\n  }));\n};\n\nProperty.prototype.and = function (other) {\n  return withDesc(new Desc(this, \"and\", [other]), this.combine(other, function (x, y) {\n    return x && y;\n  }));\n};\n\nProperty.prototype.or = function (other) {\n  return withDesc(new Desc(this, \"or\", [other]), this.combine(other, function (x, y) {\n    return x || y;\n  }));\n};\n\nEventStream.prototype.bufferWithTime = function (delay) {\n  return withDesc(new Desc(this, \"bufferWithTime\", [delay]), this.bufferWithTimeOrCount(delay, Number.MAX_VALUE));\n};\n\nEventStream.prototype.bufferWithCount = function (count) {\n  return withDesc(new Desc(this, \"bufferWithCount\", [count]), this.bufferWithTimeOrCount(undefined, count));\n};\n\nEventStream.prototype.bufferWithTimeOrCount = function (delay, count) {\n  var flushOrSchedule = function (buffer) {\n    if (buffer.values.length === count) {\n      return buffer.flush();\n    } else if (delay !== undefined) {\n      return buffer.schedule();\n    }\n  };\n  var desc = new Desc(this, \"bufferWithTimeOrCount\", [delay, count]);\n  return withDesc(desc, this.buffer(delay, flushOrSchedule, flushOrSchedule));\n};\n\nEventStream.prototype.buffer = function (delay) {\n  var onInput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : nop;\n  var onFlush = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : nop;\n\n  var buffer = {\n    scheduled: null,\n    end: undefined,\n    values: [],\n    flush: function () {\n      if (this.scheduled) {\n        Bacon.scheduler.clearTimeout(this.scheduled);\n        this.scheduled = null;\n      }\n      if (this.values.length > 0) {\n        var valuesToPush = this.values;\n        this.values = [];\n        var reply = this.push(nextEvent(valuesToPush));\n        if (this.end != null) {\n          return this.push(this.end);\n        } else if (reply !== noMore) {\n          return onFlush(this);\n        }\n      } else {\n        if (this.end != null) {\n          return this.push(this.end);\n        }\n      }\n    },\n    schedule: function () {\n      var _this = this;\n\n      if (!this.scheduled) {\n        return this.scheduled = delay(function () {\n          return _this.flush();\n        });\n      }\n    }\n  };\n  var reply = more;\n  if (!_.isFunction(delay)) {\n    var delayMs = delay;\n    delay = function (f) {\n      return Bacon.scheduler.setTimeout(f, delayMs);\n    };\n  }\n  return withDesc(new Desc(this, \"buffer\", []), this.withHandler(function (event) {\n    var _this2 = this;\n\n    buffer.push = function (event) {\n      return _this2.push(event);\n    };\n    if (event.isError) {\n      reply = this.push(event);\n    } else if (event.isEnd) {\n      buffer.end = event;\n      if (!buffer.scheduled) {\n        buffer.flush();\n      }\n    } else {\n      buffer.values.push(event.value);\n\n      onInput(buffer);\n    }\n    return reply;\n  }));\n};\n\nObservable.prototype.filter = function (f) {\n  assertObservableIsProperty(f);\n\n  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return convertArgsToFunction(this, f, args, function (f) {\n    return withDesc(new Desc(this, \"filter\", [f]), this.withHandler(function (event) {\n      if (event.filter(f)) {\n        return this.push(event);\n      } else {\n        return more;\n      }\n    }));\n  });\n};\n\nfunction once(value) {\n  var s = new EventStream(new Desc(Bacon, \"once\", [value]), function (sink) {\n    UpdateBarrier.soonButNotYet(s, function () {\n      sink(toEvent(value));\n      sink(endEvent());\n    });\n    return nop;\n  });\n  return s;\n}\n\nBacon.once = once;\n\nObservable.prototype.flatMap_ = function (f) {\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var root = this;\n  var rootDep = [root];\n  var childDeps = [];\n  var isProperty = this._isProperty;\n  var ctor = isProperty ? propertyFromStreamSubscribe : EventStream;\n  var initialSpawned = false;\n\n  var result = ctor(params.desc || new Desc(this, \"flatMap_\", arguments), function (sink) {\n    var composite = new CompositeUnsubscribe();\n    var queue = [];\n    var spawn = function (event) {\n      if (isProperty && event.isInitial) {\n        if (initialSpawned) {\n          return more;\n        }\n        initialSpawned = true;\n      }\n      var child = makeObservable(f(event));\n      childDeps.push(child);\n      return composite.add(function (unsubAll, unsubMe) {\n        return child.dispatcher.subscribe(function (event) {\n          if (event.isEnd) {\n            _.remove(child, childDeps);\n            checkQueue();\n            checkEnd(unsubMe);\n            return noMore;\n          } else {\n            event = event.toNext();\n            var reply = sink(event);\n            if (reply === noMore) {\n              unsubAll();\n            }\n            return reply;\n          }\n        });\n      });\n    };\n    var checkQueue = function () {\n      var event = queue.shift();\n      if (event) {\n        return spawn(event);\n      }\n    };\n    var checkEnd = function (unsub) {\n      unsub();\n      if (composite.empty()) {\n        return sink(endEvent());\n      }\n    };\n    composite.add(function (__, unsubRoot) {\n      return root.dispatcher.subscribe(function (event) {\n        if (event.isEnd) {\n          return checkEnd(unsubRoot);\n        } else if (event.isError && !params.mapError) {\n          return sink(event);\n        } else if (params.firstOnly && composite.count() > 1) {\n          return more;\n        } else {\n          if (composite.unsubscribed) {\n            return noMore;\n          }\n          if (params.limit && composite.count() > params.limit) {\n            return queue.push(event);\n          } else {\n            return spawn(event);\n          }\n        }\n      });\n    });\n    return composite.unsubscribe;\n  });\n  result.internalDeps = function () {\n    if (childDeps.length) {\n      return rootDep.concat(childDeps);\n    } else {\n      return rootDep;\n    }\n  };\n  return result;\n};\n\nvar handleEventValueWith = function (f) {\n  return function (event) {\n    return f(event.value);\n  };\n};\n\nfunction makeSpawner(args) {\n  if (args.length === 1 && isObservable(args[0])) {\n    return _.always(args[0]);\n  } else {\n    return makeFunctionArgs(args);\n  }\n}\n\nfunction makeObservable(x) {\n  if (isObservable(x)) {\n    return x;\n  } else {\n    return once(x);\n  }\n}\n\nObservable.prototype.flatMapWithConcurrencyLimit = function (limit) {\n  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return this.flatMap_(handleEventValueWith(makeSpawner(args)), {\n    limit: limit,\n    desc: new Desc(this, \"flatMapWithConcurrencyLimit\", [limit].concat(args))\n  });\n};\n\nObservable.prototype.flatMapConcat = function () {\n  var desc = new Desc(this, \"flatMapConcat\", Array.prototype.slice.call(arguments, 0));\n  return withDesc(desc, this.flatMapWithConcurrencyLimit.apply(this, [1].concat(Array.prototype.slice.call(arguments))));\n};\n\nfunction addPropertyInitValueToStream(property, stream) {\n  var justInitValue = new EventStream(describe(property, \"justInitValue\"), function (sink) {\n    var value = void 0;\n    var unsub = property.dispatcher.subscribe(function (event) {\n      if (!event.isEnd) {\n        value = event;\n      }\n      return noMore;\n    });\n    UpdateBarrier.whenDoneWith(justInitValue, function () {\n      if (typeof value !== \"undefined\" && value !== null) {\n        sink(value);\n      }\n      return sink(endEvent());\n    });\n    return unsub;\n  }, null, allowSync);\n  return justInitValue.concat(stream, allowSync).toProperty();\n}\n\nEventStream.prototype.concat = function (right, options) {\n  var left = this;\n  return new EventStream(new Desc(left, \"concat\", [right]), function (sink) {\n    var unsubRight = nop;\n    var unsubLeft = left.dispatcher.subscribe(function (e) {\n      if (e.isEnd) {\n        unsubRight = right.toEventStream().dispatcher.subscribe(sink);\n        return unsubRight;\n      } else {\n        return sink(e);\n      }\n    });\n    return function () {\n      return unsubLeft(), unsubRight();\n    };\n  }, null, options);\n};\n\nProperty.prototype.concat = function (right) {\n  return addPropertyInitValueToStream(this, this.changes().concat(right));\n};\n\nBacon.concatAll = function () {\n  var streams = argumentsToObservables(arguments);\n  if (streams.length) {\n    return withDesc(new Desc(Bacon, \"concatAll\", streams), _.fold(_.tail(streams), _.head(streams).toEventStream(), function (a, b) {\n      return a.concat(b);\n    }));\n  } else {\n    return never();\n  }\n};\n\nfunction fromBinder(binder) {\n  var eventTransformer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _.id;\n\n  var desc = new Desc(Bacon, \"fromBinder\", [binder, eventTransformer]);\n  return new EventStream(desc, function (sink) {\n    var unbound = false;\n    var shouldUnbind = false;\n    var unbind = function () {\n      if (!unbound) {\n        if (typeof unbinder !== \"undefined\" && unbinder !== null) {\n          unbinder();\n          return unbound = true;\n        } else {\n          return shouldUnbind = true;\n        }\n      }\n    };\n    var unbinder = binder(function () {\n      var ref;\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var value = eventTransformer.apply(this, args);\n      if (!(isArray(value) && ((ref = _.last(value)) != null ? ref._isEvent : undefined))) {\n        value = [value];\n      }\n      var reply = Bacon.more;\n      for (var i = 0, event; i < value.length; i++) {\n        event = value[i];\n        reply = sink(event = toEvent(event));\n        if (reply === Bacon.noMore || event.isEnd) {\n          unbind();\n          return reply;\n        }\n      }\n      return reply;\n    });\n    if (shouldUnbind) {\n      unbind();\n    }\n    return unbind;\n  });\n}\n\nBacon.fromBinder = fromBinder;\n\nfunction later(delay, value) {\n  return withDesc(new Desc(Bacon, \"later\", [delay, value]), fromBinder(function (sink) {\n    var sender = function () {\n      return sink([value, endEvent()]);\n    };\n    var id = Bacon.scheduler.setTimeout(sender, delay);\n    return function () {\n      return Bacon.scheduler.clearTimeout(id);\n    };\n  }));\n}\n\nBacon.later = later;\n\nObservable.prototype.bufferingThrottle = function (minimumInterval) {\n  var desc = new Desc(this, \"bufferingThrottle\", [minimumInterval]);\n  return withDesc(desc, this.flatMapConcat(function (x) {\n    return once(x).concat(later(minimumInterval).filter(false));\n  }));\n};\n\nProperty.prototype.bufferingThrottle = function () {\n  return Observable.prototype.bufferingThrottle.apply(this, arguments).toProperty();\n};\n\nfunction Bus() {\n  if (!(this instanceof Bus)) {\n    return new Bus();\n  }\n\n  this.unsubAll = _.bind(this.unsubAll, this);\n  this.subscribeAll = _.bind(this.subscribeAll, this);\n  this.guardedSink = _.bind(this.guardedSink, this);\n\n  this.sink = undefined;\n  this.subscriptions = [];\n  this.ended = false;\n  EventStream.call(this, new Desc(Bacon, \"Bus\", []), this.subscribeAll);\n}\n\ninherit(Bus, EventStream);\nextend(Bus.prototype, {\n  unsubAll: function () {\n    var iterable = this.subscriptions;\n    for (var i = 0, sub; i < iterable.length; i++) {\n      sub = iterable[i];\n      if (typeof sub.unsub === \"function\") {\n        sub.unsub();\n      }\n    }\n  },\n  subscribeAll: function (newSink) {\n    if (this.ended) {\n      newSink(endEvent());\n    } else {\n      this.sink = newSink;\n      var iterable = cloneArray(this.subscriptions);\n      for (var i = 0, subscription; i < iterable.length; i++) {\n        subscription = iterable[i];\n        this.subscribeInput(subscription);\n      }\n    }\n    return this.unsubAll;\n  },\n  guardedSink: function (input) {\n    var _this = this;\n\n    return function (event) {\n      if (event.isEnd) {\n        _this.unsubscribeInput(input);\n        return Bacon.noMore;\n      } else {\n        return _this.sink(event);\n      }\n    };\n  },\n  subscribeInput: function (subscription) {\n    subscription.unsub = subscription.input.dispatcher.subscribe(this.guardedSink(subscription.input));\n    return subscription.unsub;\n  },\n  unsubscribeInput: function (input) {\n    var iterable = this.subscriptions;\n    for (var i = 0, sub; i < iterable.length; i++) {\n      sub = iterable[i];\n      if (sub.input === input) {\n        if (typeof sub.unsub === \"function\") {\n          sub.unsub();\n        }\n        this.subscriptions.splice(i, 1);\n        return;\n      }\n    }\n  },\n  plug: function (input) {\n    var _this2 = this;\n\n    assertObservable(input);\n    if (this.ended) {\n      return;\n    }\n    var sub = { input: input };\n    this.subscriptions.push(sub);\n    if (typeof this.sink !== \"undefined\") {\n      this.subscribeInput(sub);\n    }\n    return function () {\n      return _this2.unsubscribeInput(input);\n    };\n  },\n  end: function () {\n    this.ended = true;\n    this.unsubAll();\n    if (typeof this.sink === \"function\") {\n      return this.sink(endEvent());\n    }\n  },\n  push: function (value) {\n    if (!this.ended && typeof this.sink === \"function\") {\n      var rootPush = !this.pushing;\n      if (!rootPush) {\n        if (!this.pushQueue) this.pushQueue = [];\n        this.pushQueue.push(value);\n\n        return;\n      }\n      this.pushing = true;\n      try {\n        return this.sink(nextEvent(value));\n      } finally {\n        if (rootPush && this.pushQueue) {\n          var i = 0;\n          while (i < this.pushQueue.length) {\n            var v = this.pushQueue[i];\n            this.sink(nextEvent(v));\n            i++;\n          }\n          this.pushQueue = null;\n        }\n        this.pushing = false;\n      }\n    }\n  },\n  error: function (error) {\n    if (typeof this.sink === \"function\") {\n      return this.sink(new Error$1(error));\n    }\n  }\n});\n\nBacon.Bus = Bus;\n\nObservable.prototype.flatMap = function () {\n  return this.flatMap_(handleEventValueWith(makeSpawner(arguments)), { desc: new Desc(this, \"flatMap\", arguments) });\n};\n\nvar liftCallback = function (desc, wrapped) {\n  return withMethodCallSupport(function (f) {\n    var stream = partiallyApplied(wrapped, [function (values, callback) {\n      return f.apply(undefined, values.concat([callback]));\n    }]);\n\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return withDesc(new Desc(Bacon, desc, [f].concat(args)), Bacon.combineAsArray(args).flatMap(stream).changes());\n  });\n};\n\nBacon.fromCallback = liftCallback(\"fromCallback\", function (f) {\n  for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    args[_key2 - 1] = arguments[_key2];\n  }\n\n  return fromBinder(function (handler) {\n    makeFunction(f, args)(handler);\n    return nop;\n  }, function (value) {\n    return [value, endEvent()];\n  });\n});\n\nBacon.fromNodeCallback = liftCallback(\"fromNodeCallback\", function (f) {\n  for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    args[_key3 - 1] = arguments[_key3];\n  }\n\n  return fromBinder(function (handler) {\n    makeFunction(f, args)(handler);\n    return nop;\n  }, function (error, value) {\n    if (error) {\n      return [new Error$1(error), endEvent()];\n    }\n    return [value, endEvent()];\n  });\n});\n\nfunction combineTemplate(template) {\n  function current(ctxStack) {\n    return ctxStack[ctxStack.length - 1];\n  }\n  function setValue(ctxStack, key, value) {\n    current(ctxStack)[key] = value;\n    return value;\n  }\n  function applyStreamValue(key, index) {\n    return function (ctxStack, values) {\n      setValue(ctxStack, key, values[index]);\n    };\n  }\n  function constantValue(key, value) {\n    return function (ctxStack) {\n      setValue(ctxStack, key, value);\n    };\n  }\n\n  function mkContext(template) {\n    return isArray(template) ? [] : {};\n  }\n\n  function pushContext(key, value) {\n    return function (ctxStack) {\n      var newContext = mkContext(value);\n      setValue(ctxStack, key, newContext);\n      ctxStack.push(newContext);\n    };\n  }\n\n  function containsObservables(value) {\n    if (isObservable(value)) {\n      return true;\n    } else if (value && (value.constructor == Object || value.constructor == Array)) {\n      for (var key in value) {\n        if (Object.prototype.hasOwnProperty.call(value, key)) {\n          var child = value[key];\n          if (containsObservables(child)) return true;\n        }\n      }\n    }\n  }\n\n  function compile(key, value) {\n    if (isObservable(value)) {\n      streams.push(value);\n      funcs.push(applyStreamValue(key, streams.length - 1));\n    } else if (containsObservables(value)) {\n      var popContext = function (ctxStack) {\n        ctxStack.pop();\n      };\n      funcs.push(pushContext(key, value));\n      compileTemplate(value);\n      funcs.push(popContext);\n    } else {\n      funcs.push(constantValue(key, value));\n    }\n  }\n\n  function combinator(values) {\n    var rootContext = mkContext(template);\n    var ctxStack = [rootContext];\n    for (var i = 0, f; i < funcs.length; i++) {\n      f = funcs[i];\n      f(ctxStack, values);\n    }\n    return rootContext;\n  }\n\n  function compileTemplate(template) {\n    _.each(template, compile);\n  }\n\n  var funcs = [];\n  var streams = [];\n\n  var resultProperty = containsObservables(template) ? (compileTemplate(template), Bacon.combineAsArray(streams).map(combinator)) : Bacon.constant(template);\n\n  return withDesc(new Desc(Bacon, \"combineTemplate\", [template]), resultProperty);\n}\n\nBacon.combineTemplate = combineTemplate;\n\nObservable.prototype.mapEnd = function () {\n  var f = makeFunctionArgs(arguments);\n  return withDesc(new Desc(this, \"mapEnd\", [f]), this.withHandler(function (event) {\n    if (event.isEnd) {\n      this.push(nextEvent(f(event)));\n      this.push(endEvent());\n      return noMore;\n    } else {\n      return this.push(event);\n    }\n  }));\n};\n\nObservable.prototype.skipErrors = function () {\n  return withDesc(new Desc(this, \"skipErrors\", []), this.withHandler(function (event) {\n    if (event.isError) {\n      return more;\n    } else {\n      return this.push(event);\n    }\n  }));\n};\n\nObservable.prototype.takeUntil = function (stopper) {\n  var endMarker = {};\n  var withEndMarker = groupSimultaneous_([this.mapEnd(endMarker), stopper.skipErrors()], allowSync);\n  if (this instanceof Property) withEndMarker = withEndMarker.toProperty();\n  var impl = withEndMarker.withHandler(function (event) {\n    if (!event.hasValue) {\n      return this.push(event);\n    } else {\n      var _event$value = event.value,\n          data = _event$value[0],\n          stopper = _event$value[1];\n\n      if (stopper.length) {\n        return this.push(endEvent());\n      } else {\n        var reply = more;\n        for (var i = 0, value; i < data.length; i++) {\n          value = data[i];\n          if (value === endMarker) {\n            reply = this.push(endEvent());\n          } else {\n            reply = this.push(nextEvent(value));\n          }\n        }\n        return reply;\n      }\n    }\n  });\n  return withDesc(new Desc(this, \"takeUntil\", [stopper]), impl);\n};\n\nObservable.prototype.flatMapLatest = function () {\n  var f = makeSpawner(arguments);\n  var stream = this._isProperty ? this.toEventStream(allowSync) : this;\n  var flatMapped = stream.flatMap(function (value) {\n    return makeObservable(f(value)).takeUntil(stream);\n  });\n  if (this._isProperty) flatMapped = flatMapped.toProperty();\n  return withDesc(new Desc(this, \"flatMapLatest\", [f]), flatMapped);\n};\n\nProperty.prototype.delayChanges = function (desc, f) {\n  return withDesc(desc, addPropertyInitValueToStream(this, f(this.changes())));\n};\n\nEventStream.prototype.delayChanges = function (desc, f) {\n  return withDesc(desc, f(this));\n};\n\nObservable.prototype.delay = function (delay) {\n  return this.delayChanges(new Desc(this, \"delay\", [delay]), function (changes) {\n    return changes.flatMap(function (value) {\n      return later(delay, value);\n    });\n  });\n};\n\nBacon.Observable.prototype.debounce = function (delay) {\n  return this.delayChanges(new Desc(this, \"debounce\", [delay]), function (changes) {\n    return changes.flatMapLatest(function (value) {\n      return Bacon.later(delay, value);\n    });\n  });\n};\nBacon.Observable.prototype.debounceImmediate = function (delay) {\n  return this.delayChanges(new Desc(this, \"debounceImmediate\", [delay]), function (changes) {\n    return changes.flatMapFirst(function (value) {\n      return Bacon.once(value).concat(Bacon.later(delay).filter(false));\n    });\n  });\n};\n\nObservable.prototype.decode = function (cases) {\n  return withDesc(new Desc(this, \"decode\", [cases]), this.combine(combineTemplate(cases), function (key, values) {\n    return values[key];\n  }));\n};\n\nfunction scan(seed, f) {\n  var _this = this;\n\n  var resultProperty;\n  f = toCombinator(f);\n  var acc = seed;\n  var initHandled = false;\n  var subscribe = function (sink) {\n    var initSent = false;\n    var unsub = nop;\n    var reply = more;\n    var sendInit = function () {\n      if (!initSent) {\n        initSent = initHandled = true;\n        reply = sink(new Initial(acc));\n        if (reply === noMore) {\n          unsub();\n          unsub = nop;\n        }\n      }\n    };\n    unsub = _this.dispatcher.subscribe(function (event) {\n      if (event.hasValue) {\n        if (initHandled && event.isInitial) {\n          return more;\n        } else {\n          if (!event.isInitial) {\n            sendInit();\n          }\n          initSent = initHandled = true;\n          var prev = acc;\n          var next = f(prev, event.value);\n\n          acc = next;\n          return sink(event.apply(next));\n        }\n      } else {\n        if (event.isEnd) {\n          reply = sendInit();\n        }\n        if (reply !== noMore) {\n          return sink(event);\n        }\n      }\n    });\n    UpdateBarrier.whenDoneWith(resultProperty, sendInit);\n    return unsub;\n  };\n  return resultProperty = new Property(new Desc(this, \"scan\", [seed, f]), subscribe);\n}\n\nObservable.prototype.scan = scan;\n\nObservable.prototype.diff = function (start, f) {\n  f = toCombinator(f);\n  return withDesc(new Desc(this, \"diff\", [start, f]), this.scan([start], function (prevTuple, next) {\n    return [next, f(prevTuple[0], next)];\n  }).filter(function (tuple) {\n    return tuple.length === 2;\n  }).map(function (tuple) {\n    return tuple[1];\n  }));\n};\n\nObservable.prototype.doAction = function () {\n  var f = makeFunctionArgs(arguments);\n  return withDesc(new Desc(this, \"doAction\", [f]), this.withHandler(function (event) {\n    if (event.hasValue) {\n      f(event.value);\n    }\n    return this.push(event);\n  }));\n};\n\nObservable.prototype.doEnd = function () {\n  var f = makeFunctionArgs(arguments);\n  return withDesc(new Desc(this, \"doEnd\", [f]), this.withHandler(function (event) {\n    if (event.isEnd) {\n      f();\n    }\n    return this.push(event);\n  }));\n};\n\nObservable.prototype.doError = function () {\n  var f = makeFunctionArgs(arguments);\n  return withDesc(new Desc(this, \"doError\", [f]), this.withHandler(function (event) {\n    if (event.isError) {\n      f(event.error);\n    }\n    return this.push(event);\n  }));\n};\n\nObservable.prototype.doLog = function () {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return withDesc(new Desc(this, \"doLog\", args), this.withHandler(function (event) {\n    if (typeof console !== \"undefined\" && console !== null && typeof console.log === \"function\") {\n      var _console;\n\n      (_console = console).log.apply(_console, args.concat([event.log()]));\n    }\n    return this.push(event);\n  }));\n};\n\nObservable.prototype.endOnError = function (f) {\n  if (!(typeof f !== \"undefined\" && f !== null)) {\n    f = true;\n  }\n\n  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return convertArgsToFunction(this, f, args, function (f) {\n    return withDesc(new Desc(this, \"endOnError\", []), this.withHandler(function (event) {\n      if (event.isError && f(event.error)) {\n        this.push(event);\n        return this.push(endEvent());\n      } else {\n        return this.push(event);\n      }\n    }));\n  });\n};\n\nObservable.prototype.errors = function () {\n  return withDesc(new Desc(this, \"errors\", []), this.filter(function () {\n    return false;\n  }));\n};\n\nfunction ESObservable(observable) {\n  this.observable = observable;\n}\n\nESObservable.prototype.subscribe = function (observerOrOnNext, onError, onComplete) {\n  var observer = typeof observerOrOnNext === 'function' ? { next: observerOrOnNext, error: onError, complete: onComplete } : observerOrOnNext;\n  var subscription = {\n    closed: false,\n    unsubscribe: function () {\n      subscription.closed = true;\n      cancel();\n    }\n  };\n\n  var cancel = this.observable.subscribe(function (event) {\n    if (event.isError) {\n      if (observer.error) observer.error(event.error);\n      subscription.unsubscribe();\n    } else if (event.isEnd) {\n      subscription.closed = true;\n      if (observer.complete) observer.complete();\n    } else if (observer.next) {\n      observer.next(event.value);\n    }\n  });\n  return subscription;\n};\n\nESObservable.prototype[symbol('observable')] = function () {\n  return this;\n};\n\nObservable.prototype.toESObservable = function () {\n  return new ESObservable(this);\n};\n\nObservable.prototype[symbol('observable')] = Observable.prototype.toESObservable;\n\nObservable.prototype.take = function (count) {\n  if (count <= 0) {\n    return never();\n  }\n  return withDesc(new Desc(this, \"take\", [count]), this.withHandler(function (event) {\n    if (!event.hasValue) {\n      return this.push(event);\n    } else {\n      count--;\n      if (count > 0) {\n        return this.push(event);\n      } else {\n        if (count === 0) {\n          this.push(event);\n        }\n        this.push(endEvent());\n        return noMore;\n      }\n    }\n  }));\n};\n\nObservable.prototype.first = function () {\n  return withDesc(new Desc(this, \"first\", []), this.take(1));\n};\n\nObservable.prototype.flatMapEvent = function () {\n    return this.flatMap_(makeSpawner(arguments), {\n        mapError: true,\n        desc: new Desc(this, \"flatMapEvent\", arguments)\n    });\n};\n\nObservable.prototype.flatMapFirst = function () {\n  return this.flatMap_(handleEventValueWith(makeSpawner(arguments)), {\n    firstOnly: true,\n    desc: new Desc(this, \"flatMapFirst\", arguments)\n  });\n};\n\nObservable.prototype.mapError = function () {\n  var f = makeFunctionArgs(arguments);\n  return withDesc(new Desc(this, \"mapError\", [f]), this.withHandler(function (event) {\n    if (event.isError) {\n      return this.push(nextEvent(f(event.error)));\n    } else {\n      return this.push(event);\n    }\n  }));\n};\n\nObservable.prototype.flatMapError = function (fn) {\n  return this.flatMap_(function (x) {\n    if (x instanceof Error$1) {\n      return fn(x.error);\n    } else {\n      return x;\n    }\n  }, {\n    mapError: true,\n    desc: new Desc(this, \"flatMapError\", [fn])\n  });\n};\n\nObservable.prototype.flatScan = function (seed, f) {\n  var current = seed;\n  return this.flatMapConcat(function (next) {\n    return makeObservable(f(current, next)).doAction(function (updated) {\n      return current = updated;\n    });\n  }).toProperty(seed);\n};\n\nEventStream.prototype.sampledBy = function (sampler, combinator) {\n  return withDesc(new Desc(this, \"sampledBy\", [sampler, combinator]), this.toProperty().sampledBy(sampler, combinator));\n};\n\nProperty.prototype.sampledBy = function (sampler, combinator) {\n  if (typeof combinator !== \"undefined\" && combinator !== null) {\n    combinator = toCombinator(combinator);\n  } else {\n    combinator = Bacon._.id;\n  }\n  var thisSource = new Source(this, false);\n  var samplerSource = new Source(sampler, true);\n  var w = sampler._isProperty ? whenP : when;\n  var result = w([thisSource, samplerSource], combinator);\n  return withDesc(new Desc(this, \"sampledBy\", [sampler, combinator]), result);\n};\n\nProperty.prototype.sample = function (interval) {\n  return withDesc(new Desc(this, \"sample\", [interval]), this.sampledBy(Bacon.interval(interval, {})));\n};\n\nObservable.prototype.map = function (p) {\n  if (p && p._isProperty) {\n    return p.sampledBy(this, former);\n  } else {\n    return map.apply(this, arguments);\n  }\n};\n\nObservable.prototype.fold = function (seed, f) {\n  return withDesc(new Desc(this, \"fold\", [seed, f]), this.scan(seed, f).sampledBy(this.filter(false).mapEnd().toProperty()));\n};\n\nObservable.prototype.reduce = Observable.prototype.fold;\n\nBacon.fromArray = function (values) {\n  assertArray(values);\n  if (!values.length) {\n    return withDesc(new Desc(Bacon, \"fromArray\", values), never());\n  } else {\n    var i = 0;\n    var stream = new EventStream(new Desc(Bacon, \"fromArray\", [values]), function (sink) {\n      var unsubd = false;\n      var reply = more;\n      var pushing = false;\n      var pushNeeded = false;\n      function push() {\n        pushNeeded = true;\n        if (pushing) {\n          return;\n        }\n        pushing = true;\n        while (pushNeeded) {\n          pushNeeded = false;\n          if (reply !== noMore && !unsubd) {\n            var value = values[i++];\n            reply = sink(toEvent(value));\n            if (reply !== noMore) {\n              if (i === values.length) {\n                sink(endEvent());\n              } else {\n                UpdateBarrier.afterTransaction(stream, push);\n              }\n            }\n          }\n        }\n        pushing = false;\n        return pushing;\n      }\n\n      UpdateBarrier.soonButNotYet(stream, push);\n\n      return function () {\n        unsubd = true;\n        return unsubd;\n      };\n    });\n    return stream;\n  }\n};\n\nBacon.fromESObservable = function (_observable) {\n  var observable;\n  if (_observable[symbol(\"observable\")]) {\n    observable = _observable[symbol(\"observable\")]();\n  } else {\n    observable = _observable;\n  }\n\n  var desc = new Desc(Bacon, \"fromESObservable\", [observable]);\n  return new EventStream(desc, function (sink) {\n    var cancel = observable.subscribe({\n      error: function () {\n        sink(new Bacon.Error());\n        sink(new Bacon.End());\n      },\n      next: function (value) {\n        sink(new Bacon.Next(value, true));\n      },\n      complete: function () {\n        sink(new Bacon.End());\n      }\n    });\n\n    if (cancel.unsubscribe) {\n      return function () {\n        cancel.unsubscribe();\n      };\n    } else {\n      return cancel;\n    }\n  });\n};\n\nvar eventMethods = [[\"addEventListener\", \"removeEventListener\"], [\"addListener\", \"removeListener\"], [\"on\", \"off\"], [\"bind\", \"unbind\"]];\n\nvar findHandlerMethods = function (target) {\n  var pair;\n  for (var i = 0; i < eventMethods.length; i++) {\n    pair = eventMethods[i];\n    var methodPair = [target[pair[0]], target[pair[1]]];\n    if (methodPair[0] && methodPair[1]) {\n      return methodPair;\n    }\n  }\n  for (var j = 0; j < eventMethods.length; j++) {\n    pair = eventMethods[j];\n    var addListener = target[pair[0]];\n    if (addListener) {\n      return [addListener, function () {}];\n    }\n  }\n  throw new Error(\"No suitable event methods in \" + target);\n};\n\nfunction fromEventTarget(target, eventSource, eventTransformer) {\n  var _findHandlerMethods = findHandlerMethods(target),\n      sub = _findHandlerMethods[0],\n      unsub = _findHandlerMethods[1];\n\n  var desc = new Desc(Bacon, \"fromEvent\", [target, eventSource]);\n  return withDesc(desc, fromBinder(function (handler) {\n    if (_.isFunction(eventSource)) {\n      eventSource(sub.bind(target), handler);\n      return function () {\n        return eventSource(unsub.bind(target), handler);\n      };\n    } else {\n      sub.call(target, eventSource, handler);\n      return function () {\n        return unsub.call(target, eventSource, handler);\n      };\n    }\n  }, eventTransformer));\n}\n\nBacon.fromEvent = Bacon.fromEventTarget = fromEventTarget;\n\nfunction fromPoll(delay, poll) {\n  var desc = new Desc(Bacon, \"fromPoll\", [delay, poll]);\n  return withDesc(desc, fromBinder(function (handler) {\n    var id = Bacon.scheduler.setInterval(handler, delay);\n    return function () {\n      return Bacon.scheduler.clearInterval(id);\n    };\n  }, poll));\n}\n\nBacon.fromPoll = fromPoll;\n\nfunction valueAndEnd(value) {\n  return [value, endEvent()];\n}\n\nfunction fromPromise(promise, abort) {\n  var eventTransformer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : valueAndEnd;\n\n  return withDesc(new Desc(Bacon, \"fromPromise\", [promise]), fromBinder(function (handler) {\n    var bound = promise.then(handler, function (e) {\n      return handler(new Error$1(e));\n    });\n    if (bound && typeof bound.done === \"function\") {\n      bound.done();\n    }\n\n    if (abort) {\n      return function () {\n        if (typeof promise.abort === \"function\") {\n          return promise.abort();\n        }\n      };\n    } else {\n      return function () {};\n    }\n  }, eventTransformer));\n}\n\nBacon.fromPromise = fromPromise;\n\nObservable.prototype.groupBy = function (keyF) {\n  var limitF = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _.id;\n\n  var streams = {};\n  var src = this;\n  return src.filter(function (x) {\n    return !streams[keyF(x)];\n  }).map(function (x) {\n    var key = keyF(x);\n    var similar = src.filter(function (x) {\n      return keyF(x) === key;\n    });\n    var data = once(x).concat(similar);\n    var limited = limitF(data, x).withHandler(function (event) {\n      this.push(event);\n      if (event.isEnd) {\n        return delete streams[key];\n      }\n    });\n    streams[key] = limited;\n    return limited;\n  });\n};\n\nEventStream.prototype.holdWhen = function (valve) {\n  var onHold = false;\n  var bufferedValues = [];\n  var src = this;\n  var srcIsEnded = false;\n  return new EventStream(new Desc(this, \"holdWhen\", [valve]), function (sink) {\n    var composite = new CompositeUnsubscribe();\n    var subscribed = false;\n    var endIfBothEnded = function (unsub) {\n      if (typeof unsub === \"function\") {\n        unsub();\n      }\n      if (composite.empty() && subscribed) {\n        return sink(endEvent());\n      }\n    };\n    composite.add(function (unsubAll, unsubMe) {\n      return valve.subscribeInternal(function (event) {\n        if (event.hasValue) {\n          onHold = event.value;\n          if (!onHold) {\n            var toSend = bufferedValues;\n            bufferedValues = [];\n            return function () {\n              var result = [];\n              for (var i = 0, value; i < toSend.length; i++) {\n                value = toSend[i];\n                result.push(sink(nextEvent(value)));\n              }\n              if (srcIsEnded) {\n                result.push(sink(endEvent()));\n                unsubMe();\n              }\n              return result;\n            }();\n          }\n        } else if (event.isEnd) {\n          return endIfBothEnded(unsubMe);\n        } else {\n          return sink(event);\n        }\n      });\n    });\n    composite.add(function (unsubAll, unsubMe) {\n      return src.subscribeInternal(function (event) {\n        if (onHold && event.hasValue) {\n          return bufferedValues.push(event.value);\n        } else if (event.isEnd && bufferedValues.length) {\n          srcIsEnded = true;\n          return endIfBothEnded(unsubMe);\n        } else {\n          return sink(event);\n        }\n      });\n    });\n    subscribed = true;\n    endIfBothEnded();\n    return composite.unsubscribe;\n  });\n};\n\nfunction interval(delay) {\n  var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  return withDesc(new Desc(Bacon, \"interval\", [delay, value]), fromPoll(delay, function () {\n    return nextEvent(value);\n  }));\n}\n\nBacon.interval = interval;\n\nBacon.$ = {};\nBacon.$.asEventStream = function (eventName, selector, eventTransformer) {\n  var _this = this;\n\n  if (_.isFunction(selector)) {\n    eventTransformer = selector;\n    selector = undefined;\n  }\n\n  return withDesc(new Desc(this.selector || this, \"asEventStream\", [eventName]), fromBinder(function (handler) {\n    _this.on(eventName, selector, handler);\n    return function () {\n      return _this.off(eventName, selector, handler);\n    };\n  }, eventTransformer));\n};\n\nif (typeof jQuery !== \"undefined\" && jQuery) {\n  jQuery.fn.asEventStream = Bacon.$.asEventStream;\n}\n\nif (typeof Zepto !== \"undefined\" && Zepto) {\n  Zepto.fn.asEventStream = Bacon.$.asEventStream;\n}\n\nObservable.prototype.last = function () {\n  var lastEvent;\n\n  return withDesc(new Desc(this, \"last\", []), this.withHandler(function (event) {\n    if (event.isEnd) {\n      if (lastEvent) {\n        this.push(lastEvent);\n      }\n      this.push(endEvent());\n      return noMore;\n    } else {\n      lastEvent = event;\n    }\n  }));\n};\n\nObservable.prototype.log = function () {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  this.subscribe(function (event) {\n    if (typeof console !== \"undefined\" && typeof console.log === \"function\") {\n      var _console;\n\n      (_console = console).log.apply(_console, args.concat([event.log()]));\n    }\n  });\n  return this;\n};\n\nEventStream.prototype.merge = function (right) {\n  assertEventStream(right);\n  var left = this;\n  return withDesc(new Desc(left, \"merge\", [right]), mergeAll(this, right));\n};\n\nfunction mergeAll() {\n  var streams = argumentsToObservables(arguments);\n  if (streams.length) {\n    return new EventStream(new Desc(Bacon, \"mergeAll\", streams), function (sink) {\n      var ends = 0;\n      var smartSink = function (obs) {\n        return function (unsubBoth) {\n          return obs.dispatcher.subscribe(function (event) {\n            if (event.isEnd) {\n              ends++;\n              if (ends === streams.length) {\n                return sink(endEvent());\n              } else {\n                return more;\n              }\n            } else {\n              var reply = sink(event);\n              if (reply === noMore) {\n                unsubBoth();\n              }\n              return reply;\n            }\n          });\n        };\n      };\n      var sinks = _.map(smartSink, streams);\n      return new CompositeUnsubscribe(sinks).unsubscribe;\n    });\n  } else {\n    return never();\n  }\n}\n\nBacon.mergeAll = mergeAll;\n\nfunction repeatedly(delay, values) {\n  var index = 0;\n  return withDesc(new Desc(Bacon, \"repeatedly\", [delay, values]), fromPoll(delay, function () {\n    return values[index++ % values.length];\n  }));\n}\n\nBacon.repeatedly = repeatedly;\n\nfunction repeat(generator) {\n  var index = 0;\n  return fromBinder(function (sink) {\n    var flag = false;\n    var reply = more;\n    var unsub = function () {};\n    function handleEvent(event) {\n      if (event.isEnd) {\n        if (!flag) {\n          return flag = true;\n        } else {\n          return subscribeNext();\n        }\n      } else {\n        return reply = sink(event);\n      }\n    }\n    function subscribeNext() {\n      var next;\n      flag = true;\n      while (flag && reply !== noMore) {\n        next = generator(index++);\n        flag = false;\n        if (next) {\n          unsub = next.subscribeInternal(handleEvent);\n        } else {\n          sink(endEvent());\n        }\n      }\n      return flag = true;\n    }\n    subscribeNext();\n    return function () {\n      return unsub();\n    };\n  });\n}\n\nBacon.repeat = repeat;\n\nBacon.retry = function (options) {\n  if (!_.isFunction(options.source)) {\n    throw new Error(\"'source' option has to be a function\");\n  }\n  var source = options.source;\n  var retries = options.retries || 0;\n  var retriesDone = 0;\n  var delay = options.delay || function () {\n    return 0;\n  };\n  var isRetryable = options.isRetryable || function () {\n    return true;\n  };\n  var finished = false;\n  var error = null;\n\n  return withDesc(new Desc(Bacon, \"retry\", [options]), Bacon.repeat(function (count) {\n    function valueStream() {\n      return source(count).endOnError().withHandler(function (event) {\n        if (event.isError) {\n          error = event;\n          if (!(isRetryable(error.error) && (retries === 0 || retriesDone < retries))) {\n            finished = true;\n            return this.push(event);\n          }\n        } else {\n          if (event.hasValue) {\n            error = null;\n            finished = true;\n          }\n          return this.push(event);\n        }\n      });\n    }\n\n    if (finished) {\n      return null;\n    } else if (error) {\n      var context = {\n        error: error.error,\n        retriesDone: retriesDone\n      };\n      var pause = later(delay(context)).filter(false);\n      retriesDone++;\n      return pause.concat(Bacon.once().flatMap(valueStream));\n    } else {\n      return valueStream();\n    }\n  }));\n};\n\nfunction sequentially(delay, values) {\n  var index = 0;\n  return withDesc(new Desc(Bacon, \"sequentially\", [delay, values]), fromPoll(delay, function () {\n    var value = values[index++];\n    if (index < values.length) {\n      return value;\n    } else if (index === values.length) {\n      return [value, endEvent()];\n    } else {\n      return endEvent();\n    }\n  }));\n}\n\nBacon.sequentially = sequentially;\n\nObservable.prototype.skip = function (count) {\n  return withDesc(new Desc(this, \"skip\", [count]), this.withHandler(function (event) {\n    if (!event.hasValue) {\n      return this.push(event);\n    } else if (count > 0) {\n      count--;\n      return more;\n    } else {\n      return this.push(event);\n    }\n  }));\n};\n\nEventStream.prototype.skipUntil = function (starter) {\n  var started = starter.take(1).map(true).toProperty(false);\n  return withDesc(new Desc(this, \"skipUntil\", [starter]), this.filter(started));\n};\n\nEventStream.prototype.skipWhile = function (f) {\n  assertObservableIsProperty(f);\n  var ok = false;\n\n  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return convertArgsToFunction(this, f, args, function (f) {\n    return withDesc(new Desc(this, \"skipWhile\", [f]), this.withHandler(function (event) {\n      if (ok || !event.hasValue || !f(event.value)) {\n        if (event.hasValue) {\n          ok = true;\n        }\n        return this.push(event);\n      } else {\n        return more;\n      }\n    }));\n  });\n};\n\nProperty.prototype.startWith = function (seed) {\n  return withDesc(new Desc(this, \"startWith\", [seed]), this.scan(seed, function (prev, next) {\n    return next;\n  }));\n};\n\nEventStream.prototype.startWith = function (seed) {\n  return withDesc(new Desc(this, \"startWith\", [seed]), once(seed).concat(this));\n};\n\nObservable.prototype.slidingWindow = function (n) {\n  var minValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n  return withDesc(new Desc(this, \"slidingWindow\", [n, minValues]), this.scan([], function (window, value) {\n    return window.concat([value]).slice(-n);\n  }).filter(function (values) {\n    return values.length >= minValues;\n  }));\n};\n\nObservable.prototype.takeWhile = function (f) {\n  assertObservableIsProperty(f);\n\n  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return convertArgsToFunction(this, f, args, function (f) {\n    return withDesc(new Desc(this, \"takeWhile\", [f]), this.withHandler(function (event) {\n      if (event.filter(f)) {\n        return this.push(event);\n      } else {\n        this.push(endEvent());\n        return noMore;\n      }\n    }));\n  });\n};\n\nObservable.prototype.throttle = function (delay) {\n  return this.delayChanges(new Desc(this, \"throttle\", [delay]), function (changes) {\n    return changes.bufferWithTime(delay).map(function (values) {\n      return values[values.length - 1];\n    });\n  });\n};\n\nProperty.prototype.toEventStream = function (options) {\n  var _this = this;\n\n  return new EventStream(new Desc(this, \"toEventStream\", []), function (sink) {\n    return _this.dispatcher.subscribe(function (event) {\n      return sink(event.toNext());\n    });\n  }, null, options);\n};\n\nObservable.prototype.firstToPromise = function (PromiseCtr) {\n  var _this = this;\n\n  if (typeof PromiseCtr !== \"function\") {\n    if (typeof Promise === \"function\") {\n      PromiseCtr = Promise;\n    } else {\n      throw new Error(\"There isn't default Promise, use shim or parameter\");\n    }\n  }\n\n  return new PromiseCtr(function (resolve, reject) {\n    return _this.subscribe(function (event) {\n      if (event.hasValue) {\n        resolve(event.value);\n      }\n      if (event.isError) {\n        reject(event.error);\n      }\n\n      return noMore;\n    });\n  });\n};\n\nObservable.prototype.toPromise = function (PromiseCtr) {\n  return this.last().firstToPromise(PromiseCtr);\n};\n\nfunction tryF(f) {\n  return function (value) {\n    try {\n      return once(f(value));\n    } catch (e) {\n      return new Error$1(e);\n    }\n  };\n}\n\nBacon[\"try\"] = tryF;\n\nfunction update(initial) {\n  function lateBindFirst(f) {\n    return function () {\n      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return function (i) {\n        return f.apply(undefined, [i].concat(args));\n      };\n    };\n  }\n\n  for (var _len = arguments.length, patterns = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    patterns[_key - 1] = arguments[_key];\n  }\n\n  var i = patterns.length - 1;\n  while (i > 0) {\n    if (!(patterns[i] instanceof Function)) {\n      patterns[i] = _.always(patterns[i]);\n    }\n    patterns[i] = lateBindFirst(patterns[i]);\n    i = i - 2;\n  }\n  return withDesc(new Desc(Bacon, \"update\", [initial].concat(patterns)), when.apply(undefined, patterns).scan(initial, function (x, f) {\n    return f(x);\n  }));\n}\n\nBacon.update = update;\n\nBacon.zipAsArray = function () {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var streams = argumentsToObservables(args);\n  return withDesc(new Desc(Bacon, \"zipAsArray\", streams), Bacon.zipWith(streams, function () {\n    for (var _len2 = arguments.length, xs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      xs[_key2] = arguments[_key2];\n    }\n\n    return xs;\n  }));\n};\n\nBacon.zipWith = function () {\n  for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n\n  var observablesAndFunction = argumentsToObservablesAndFunction(args);\n  var streams = observablesAndFunction[0];\n  var f = observablesAndFunction[1];\n\n  streams = _.map(function (s) {\n    return s.toEventStream();\n  }, streams);\n  return withDesc(new Desc(Bacon, \"zipWith\", [f].concat(streams)), Bacon.when(streams, f));\n};\n\nObservable.prototype.zip = function (other, f) {\n  return withDesc(new Desc(this, \"zip\", [other]), Bacon.zipWith([this, other], f || Array));\n};\n\nreturn Bacon;\n\n})));\n\n","/**\n * @file A <tt>&lt;datalist&gt;</tt> polyfill.\n * Created on 28/04/18 for the datalistjs project.\n */\n\n/**\n * JavaScript methods and constants defined by the datalist polyfill.\n * @namespace DataListJS\n */\n\n/**\n * @typedef {Object} PolyfillElementConfiguration\n * @property {String} [cssClassName='ul-datalist-polyfill'] a user-defined class name is given to each element. <tt>'ul-datalist-polyfill'</tt>\n * for the <tt>ul</tt> list container\n * @property {Object} [styles={useful defaults}] *camelCased* CSS rules e.g. <tt>{maxWidth: \"200px\", backgroundColor: \"aliceblue\"}</tt>\n * @memberOf! DataListJS\n */\n\n/**\n * @typedef {Object} PolyfillOptions\n * @property {PolyfillElementConfiguration} [uListStyle] the CSS rules applied to the <tt>ul</tt> option list container as inline style\n * @property {PolyfillElementConfiguration} [listItemStyle] the CSS rules applied to the <tt>li</tt> list items as inline style.\n * @memberOf! DataListJS\n */\n  \n/**\n * @typedef {Object} Module_datalist The polyfill is a UMD module which is exposed as <tt>DataListJS</tt> to the\n * browser's JS run context if loaded via <tt>&lt;script&gt;</tt> tag.\n * @property {Boolean} isNotNativelySupported\n * @property {function(HTMLElement=, PolyfillOptions?): function():void} polyfill\n */\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define('datalist',['vendor/ramda', 'vendor/Bacon'], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory(require('ramda'), require('baconjs'));\n    } else {\n        root.DataListJS = factory(root.R, root.Bacon);\n    }\n}(typeof self !== 'undefined' ? self : this, \n/**\n * @param {R.Static} R\n * @param {Bacon.Static} Bacon\n * @return {Module_datalist}\n */\nfunction (R, Bacon)\n{\n\t// Utility functions which usually are imported form somewhere else\n\t\n\tconst\n\t\ttruthy = R.identical(true),\n\t\tfalsy = R.identical(false),\n\t\t\n\t\t/** @type {function(Object): function(*, String): void} */\n\t\tofMutableObjectUpdateValueForKey = R.curry(\n\t\t\tfunction(obj, value, key)\n\t\t\t{\n\t\t\t\tobj[key] = value;\n\t\t\t}\n\t\t);\n\t\n\t/**\n\t * @param {PolyfillElementConfiguration} listItemConfig_\n\t * @param {String} valueText\n\t * @return {HTMLLIElement}\n\t */\n\tfunction createListElementWithValueAndConfig(valueText, listItemConfig_)\n\t{\n\t\tconst\n\t\t\t/** @type {PolyfillElementConfiguration} */\n\t\t\tlistItemConfig = R.merge({styles: {}}, listItemConfig_ || {}),\n\t\t\t\n\t\t\tlistElementStyle = R.merge({\n\t\t\t\tpadding: \"3px\"\n\t\t\t}, listItemConfig.styles),\n\t\t\t\n\t\t\tlistElement = document.createElement('li');\n\t\t\n\t\tlistElement.textContent = valueText;\n\t\t\n\t\tif (listItemConfig.cssClassName)\n\t\t{\n\t\t\tlistElement.classList.add(listItemConfig.cssClassName);\n\t\t}\n\t\t\n\t\tR.forEachObjIndexed(ofMutableObjectUpdateValueForKey(listElement.style), listElementStyle);\n\t\t\n\t\treturn listElement;\n\t}\n\t\n\t/**\n\t *\n\t * @param {Array<HTMLElement>} elements\n\t * @return {DocumentFragment}\n\t */\n\tfunction createDocumentFragmentOfElements(elements)\n\t{\n\t\tconst\n\t\t\tfrag = document.createDocumentFragment();\n\t\t\n\t\telements.forEach(function(element)\n\t\t{\n\t\t\tfrag.appendChild(element);\n\t\t});\n\t\t\n\t\treturn frag;\n\t}\n\t\n\tconst\n\t\t/**\n\t\t *\n\t\t * @param {HTMLElement} targetElement\n\t\t * @return {Boolean}\n\t\t * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight#Problems_and_solutions\n\t\t */\n\t\tisElementTotallyScrolled = function(targetElement)\n\t\t{\n\t\t\treturn targetElement.scrollHeight - targetElement.scrollTop <= targetElement.clientHeight;\n\t\t},\n\t\t\n\t\t/**\n\t\t * @see https://github.com/willmcpo/body-scroll-lock\n\t\t * @param {HTMLElement} targetElement\n\t\t * @return {function():void}\n\t\t */\n\t\tdisableBodyScroll = function(targetElement)\n\t\t{\n\t\t\t/**\n\t\t\t *\n\t\t\t * @param {TouchEvent} initialTouchEvent\n\t\t\t */\n\t\t\tfunction preventPageScrollingAtElementScrollEndingsStartingWithEvent(initialTouchEvent)\n\t\t\t{\n\t\t\t\tif (initialTouchEvent.targetTouches.length !== 1)\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tconst\n\t\t\t\t\t/** @type {Bacon.EventStream<E, TouchEvent>} */\n\t\t\t\t\ttouchMoveAtScrollEnding =\n\t\t\t\t\t\tBacon.fromEvent(targetElement, 'touchmove')\n\t\t\t\t\t\t.filter(\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t *\n\t\t\t\t\t\t\t * @param {TouchEvent} touchEvent\n\t\t\t\t\t\t\t * @return {Boolean}\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tfunction(touchEvent)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (touchEvent.targetTouches.length !== 1)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tconst\n\t\t\t\t\t\t\t\t\tisScrollingDown = touchEvent.targetTouches[0].clientY - initialTouchEvent.targetTouches[0].clientY > 0;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\treturn (isScrollingDown && (targetElement.scrollTop === 0)) ||\n\t\t\t\t\t\t\t\t\t(!isScrollingDown && isElementTotallyScrolled(targetElement));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.takeUntil(Bacon.fromEvent(targetElement, 'touchend'));\n\t\t\t\t\t\n\t\t\t\ttouchMoveAtScrollEnding\n\t\t\t\t.onValue(function (touchEvent)\n\t\t\t\t{\n\t\t\t\t\ttouchEvent.preventDefault();\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\ttargetElement.addEventListener('touchstart', preventPageScrollingAtElementScrollEndingsStartingWithEvent, false);\n\t\t\t\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\ttargetElement.removeEventListener('touchstart', preventPageScrollingAtElementScrollEndingsStartingWithEvent);\n\t\t\t};\n\t\t};\n\t\n\t/**\n\t *\n\t * @param {MutationObserverInit} initOptions\n\t * @param {Node} domNode\n\t * @return {Bacon.EventStream<E, Array<MutationRecord>>}\n\t */\n\tfunction mutationsForElement(initOptions, domNode)\n\t{\n\t\treturn Bacon.fromBinder(function (sink)\n\t\t{\n\t\t\tconst\n\t\t\t\tobserver = new MutationObserver(sink);\n\t\t\tobserver.observe(domNode, initOptions);\n\t\t\t\n\t\t\treturn function () { observer.disconnect(); };\n\t\t});\n\t}\n\t\n\tconst\n\t\t/**\n\t\t *\n\t\t * @type {function(HTMLElement): function(DocumentFragment): void}\n\t\t */\n\t\treplaceContainerContentsWithDomFragment = R.curry(\n\t\t\t/**\n\t\t\t * @param {HTMLElement} containerElement\n\t\t\t * @param {DocumentFragment} fragment\n\t\t\t */\n\t\t\tfunction(containerElement, fragment)\n\t\t\t{\n\t\t\t\tconst\n\t\t\t\t\trange = document.createRange();\n\t\t\t\t\n\t\t\t\trange.selectNodeContents(containerElement);\n\t\t\t\trange.deleteContents();\n\t\t\t\trange.insertNode(fragment);\n\t\t\t}),\n\t\t\n\t\tpopulateInputWithValue = R.curry(\n\t\t\t/**\n\t\t\t * @param {HTMLInputElement} input\n\t\t\t * @param {String} value\n\t\t\t */\n\t\t\tfunction(input, value)\n\t\t\t{\n\t\t\t\tinput.value = value;\n\t\t\t\t\n\t\t\t\tinput.dispatchEvent(new Event('change'));\n\t\t\t}),\n\t\t\n\t\t/**\n\t\t *\n\t\t * @param {HTMLElement} target\n\t\t * @param {HTMLElement} source\n\t\t */\n\t\tpositionTargetBelowSourceElement = function(target, source)\n\t\t{\n\t\t\ttarget.style.top = source.offsetTop + source.offsetHeight + 'px';\n\t\t\ttarget.style.left = source.offsetLeft + 'px';\n\t\t\ttarget.style.width = source.offsetWidth + 'px';\n\t\t},\n\t\t\n\t\t/**\n\t\t * @param {HTMLInputElement} inputField\n\t\t * @param {PolyfillElementConfiguration} [listConfig_]\n\t\t * @return {HTMLUListElement}\n\t\t */\n\t\tcreateSelectionContainerForInput = function(inputField, listConfig_)\n\t\t{\n\t\t\tconst\n\t\t\t\t/** @type {PolyfillElementConfiguration} */\n\t\t\t\tlistConfig = R.merge({cssClassName: 'ul-datalist-polyfill', styles: {}}, listConfig_ || {}),\n\t\t\t\t\n\t\t\t\tselectBox = document.createElement('ul'),\n\t\t\t\t/**\n\t\t\t\t *\n\t\t\t\t * @type {CSSStyleDeclaration}\n\t\t\t\t */\n\t\t\t\tinputFieldStyle = window.getComputedStyle(inputField),\n\t\t\t\t\n\t\t\t\tboxStyle = R.merge({\n\t\t\t\t\tdisplay: \"none\",  // create hidden\n\t\t\t\t\tlistStyle: \"none\",\n\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\toverflowY: \"auto\",\n\t\t\t\t\tpadding: \"0px\",\n\t\t\t\t\tmargin: \"0px\",\n\t\t\t\t\tboxShadow: \"rgb(128, 128, 128) 0px 2px 2px 0px\",\n\t\t\t\t\tmaxHeight: \"150px\",\n\t\t\t\t\tzIndex: \"1\",\n\t\t\t\t\tbackgroundColor: inputFieldStyle.backgroundColor,\n\t\t\t\t\tcolor: inputFieldStyle.color\n\t\t\t\t}, listConfig.styles || {});\n\t\t\t\n\t\t\tselectBox.classList.add(listConfig.cssClassName);\n\t\t\t\n\t\t\tR.forEachObjIndexed(ofMutableObjectUpdateValueForKey(selectBox.style), boxStyle);\n\t\t\t\n\t\t\treturn selectBox;\n\t\t};\n\t\n\tconst\n\t\t/**\n\t\t * Is the polyfill needed (i.e. are we running on Safari?)\n\t\t * @type {boolean}\n\t\t * @memberOf! DataListJS\n\t\t */\n\t\t isNotNativelySupported = window.HTMLDataListElement === undefined;\n\t\n\t/**\n\t * Initializes the inputs and returns a function to re-position the option lists found in the container\n\t * @param {HTMLElement} [parent=document.body] a DOM element which contains the targeted form <tt>input</tt>s.\n\t * @param {DataListJS.PolyfillOptions} [polyfillConfiguration_] a configuration object used to customize the css of the generated DOM elements\n\t * which make up the polyfill\n\t * @return {function(): void} A function which updates the positions of the generated compensatory select boxes\n\t * according to the positions of the input elements. The implementation should call this function when the web page\n\t * layout has changed the positions of the form `input`s.\n\t * @memberOf! DataListJS\n\t * @example\n\t * if (DataListJS.isNotNativelySupported){\n\t *    updatePositions = DataListJS.polyfill(\n\t *       document.body,\n\t *       {\n\t *          uListStyle: {\n\t *             cssClassName: 'datalist-polyfill-demo',\n\t *             styles: { maxHeight: \"120px\" }\n\t *          }\n\t *       }\n\t *    );\n\t *}\n\t */\n\tfunction polyfill(parent, polyfillConfiguration_)\n\t{\n\t\tconst\n\t\t\tpolyfillConfiguration = polyfillConfiguration_ || {},\n\t\t\t\n\t\t\tinputs = (parent || document.body).querySelectorAll('input[list]'),\n\t\t\t\n\t\t\tresizingPage = Bacon.fromEvent(window, 'resize'),\n\t\t\t\n\t\t\tcreateListElementWithValue = R.partialRight(createListElementWithValueAndConfig, [polyfillConfiguration.listItemStyle]),\n\t\t\n\t\t\t/**\n\t\t\t *\n\t\t\t * @param {HTMLInputElement} inputElement\n\t\t\t * @return {function():void}\n\t\t\t */\n\t\t\tsetupInputElement = function (inputElement)\n\t\t\t{\n\t\t\t\tconst\n\t\t\t\t\tselectBox = createSelectionContainerForInput(inputElement, polyfillConfiguration.uListStyle),\n\t\t\t\t\tdataListElement = /** @type {HTMLDataListElement} */ document.getElementById(inputElement.getAttribute('list')),\n\t\t\t\t\toptionsLiveCollection = dataListElement.getElementsByTagName('option'),\n\t\t\t\t\t\n\t\t\t\t\tpositionListAccordingToInput = positionTargetBelowSourceElement.bind(undefined, selectBox, inputElement),\n\t\t\t\t\t\n\t\t\t\t\t/** @type {Bacon.Property<E, Array<String>>} */\n\t\t\t\t\toptions =\n\t\t\t\t\t\tmutationsForElement({childList: true}, dataListElement)\n\t\t\t\t\t\t.filter(R.filter(R.propEq('type', 'childList')))\n\t\t\t\t\t\t.map(optionsLiveCollection)\n\t\t\t\t\t\t.toProperty(optionsLiveCollection)\n\t\t\t\t\t\t.map(R.pluck('value')),\n\t\t\t\t\t\t\n\t\t\t\t\thasFocus = Bacon.mergeAll(\n\t\t\t\t\t\tBacon.fromEvent(inputElement, 'focus').map(true),\n\t\t\t\t\t\tBacon.fromEvent(inputElement, 'blur').delay(20).map(false) // If this fires immediately, it prevents click-to-select from working\n\t\t\t\t\t).toProperty(document.activeElement === inputElement),\n\t\t\t\t\t\n\t\t\t\t\tfocus = hasFocus.filter(truthy).toEventStream(),\n\t\t\t\t\tblur = hasFocus.filter(falsy).toEventStream(),\n\t\t\t\t\t\n\t\t\t\t\t/**\n\t\t\t\t\t *\n\t\t\t\t\t * @type {Bacon.Property<any, String>}\n\t\t\t\t\t */\n\t\t\t\t\tinput =\n\t\t\t\t\t\tBacon.mergeAll(\n\t\t\t\t\t\t\tBacon.fromEvent(inputElement, 'input'),\n\t\t\t\t\t\t\tBacon.fromEvent(inputElement, 'change')\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.map(R.path(['target', 'value']))\n\t\t\t\t\t\t.toProperty(inputElement.value)\n\t\t\t\t\t\t.skipDuplicates(),\n\t\t\t\t\t\n\t\t\t\t\thideSelectBox = function()\n\t\t\t\t\t{\n\t\t\t\t\t\tselectBox.style.display = \"none\";\n\t\t\t\t\t},\n\t\t\t\t\t\n\t\t\t\t\tshowSelectBox = function()\n\t\t\t\t\t{\n\t\t\t\t\t\tselectBox.style.display = \"block\";\n\t\t\t\t\t},\n\t\t\t\t\t\n\t\t\t\t\tupdateSelectBoxContentsWithDomFragment = replaceContainerContentsWithDomFragment(selectBox),\n\t\t\t\t\t\n\t\t\t\t\t/** @type {Bacon.Property<E, Array<String>>} */\n\t\t\t\t\tmatchedOptions = Bacon.combineWith(\n\t\t\t\t\t\tfunction(userText, optionTexts)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn R.filter(R.useWith(R.contains, [R.toLower, R.toLower])(userText), optionTexts);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tinput,\n\t\t\t\t\t\toptions\n\t\t\t\t\t),\n\t\t\t\t\t\n\t\t\t\t\t/** @type {Bacon.Property<E, Array<HTMLElement>>} */\n\t\t\t\t\toptionButtons =\n\t\t\t\t\t\tmatchedOptions\n\t\t\t\t\t\t.filter(R.complement(R.isEmpty))\n\t\t\t\t\t\t.skipDuplicates(R.equals)\n\t\t\t\t\t\t.map(R.map(createListElementWithValue)),\n\t\t\t\t\t\n\t\t\t\t\t/**\n\t\t\t\t\t *\n\t\t\t\t\t * @type {Bacon.EventStream<E, Boolean>}\n\t\t\t\t\t */\n\t\t\t\t\ttoggledAreAnyOptionsMatched =\n\t\t\t\t\t\tmatchedOptions\n\t\t\t\t\t\t.map(R.complement(R.isEmpty))\n\t\t\t\t\t\t.changes(),\n\t\t\t\t\t\n\t\t\t\t\tselecting =\n\t\t\t\t\t\toptionButtons\n\t\t\t\t\t\t.map(R.map(\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t *\n\t\t\t\t\t\t\t * @param {HTMLElement} button\n\t\t\t\t\t\t\t * @return {Bacon.EventStream<E, String>}\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tfunction(button)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\treturn Bacon.fromEvent(\n\t\t\t\t\t\t\t\t\tbutton,\n\t\t\t\t\t\t\t\t\t'click',\n\t\t\t\t\t\t\t\t\tR.compose(R.trim, R.path(['target', 'textContent']))\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t.first();\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.flatMap(Bacon.mergeAll)\n\t\t\t\t\t\t.filter(hasFocus);\n\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\tBacon.mergeAll(\n\t\t\t\t\tfocus.filter(matchedOptions.map(R.complement(R.isEmpty))),\n\t\t\t\t\ttoggledAreAnyOptionsMatched.filter(truthy).filter(hasFocus)\n\t\t\t\t)\n\t\t\t\t.onValue(showSelectBox);\n\t\t\t\t\n\t\t\t\tBacon.mergeAll(\n\t\t\t\t\tblur,\n\t\t\t\t\ttoggledAreAnyOptionsMatched.filter(falsy)\n\t\t\t\t).onValue(hideSelectBox);\n\t\t\t\t\n\t\t\t\toptionButtons.onValue(\n\t\t\t\t\tR.compose(updateSelectBoxContentsWithDomFragment, createDocumentFragmentOfElements)\n\t\t\t\t);\n\t\t\t\t\n\t\t\t\tBacon.mergeAll(\n\t\t\t\t\tresizingPage,\n\t\t\t\t\tBacon.once(undefined)\n\t\t\t\t)\n\t\t\t\t.onValue(positionListAccordingToInput);\n\t\t\t\t\n\t\t\t\tselecting\n\t\t\t\t.onValue(populateInputWithValue(inputElement));\n\t\t\t\t\n\t\t\t\tdisableBodyScroll(selectBox);\n\t\t\t\t\n\t\t\t\tinputElement.parentElement.appendChild(selectBox);\n\t\t\t\t\n\t\t\t\treturn positionListAccordingToInput;\n\t\t\t};\n\t\t\t\n\t\tconst\n\t\t\tallPositionUpdateFunctions = R.map(setupInputElement, Array.from(inputs));\n\t\t\n\t\treturn function()\n\t\t{\n\t\t\tR.forEach(R.call, allPositionUpdateFunctions);\n\t\t};\n\t}\n\t\n\treturn {\n\t\tpolyfill: polyfill,\n\t\tisNotNativelySupported: isNotNativelySupported\n\t};\n}));\n"]}